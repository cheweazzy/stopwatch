
Stoper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d830  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a8  0800d9e0  0800d9e0  0001d9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb88  0800fb88  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb90  0800fb90  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb90  0800fb90  0001fb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb94  0800fb94  0001fb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800fb98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          000007e8  20000228  20000228  00020228  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a10  20000a10  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a568  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038f7  00000000  00000000  0003a803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b8  00000000  00000000  0003e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000132c  00000000  00000000  0003f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027ed5  00000000  00000000  00040ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca35  00000000  00000000  00068bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ea950  00000000  00000000  000855ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008054  00000000  00000000  0016ff40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00177f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d9c8 	.word	0x0800d9c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0800d9c8 	.word	0x0800d9c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001014:	b088      	sub	sp, #32
 8001016:	af00      	add	r7, sp, #0
	struct Time curTime;
	struct Time lapTime1;
	struct Time lapTime2;
	struct Time lapTime3;

	sprintf(str_Space, "Lap Timer");
 8001018:	4992      	ldr	r1, [pc, #584]	; (8001264 <main+0x254>)
 800101a:	4893      	ldr	r0, [pc, #588]	; (8001268 <main+0x258>)
 800101c:	f007 ffa0 	bl	8008f60 <siprintf>

	HAL_Init();
 8001020:	f003 f884 	bl	800412c <HAL_Init>

	// Configure the system clock */
	SystemClock_Config();
 8001024:	f000 fc44 	bl	80018b0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001028:	f000 feaa 	bl	8001d80 <MX_GPIO_Init>
	MX_DMA2D_Init();
 800102c:	f000 fcb0 	bl	8001990 <MX_DMA2D_Init>
	MX_FMC_Init ();
 8001030:	f000 fe58 	bl	8001ce4 <MX_FMC_Init>
	MX_I2C3_Init();
 8001034:	f000 fcde 	bl	80019f4 <MX_I2C3_Init>
	MX_LTDC_Init();
 8001038:	f000 fd1c 	bl	8001a74 <MX_LTDC_Init>
	MX_SPI5_Init();
 800103c:	f000 fdcc 	bl	8001bd8 <MX_SPI5_Init>
	MX_TIM3_Init();
 8001040:	f000 fe00 	bl	8001c44 <MX_TIM3_Init>


	//inicjalizacja i konfiguracja LCD
	 BSP_LCD_Init();
 8001044:	f001 fefa 	bl	8002e3c <BSP_LCD_Init>
	  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8001048:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800104c:	2000      	movs	r0, #0
 800104e:	f001 ff77 	bl	8002f40 <BSP_LCD_LayerDefaultInit>
	  BSP_LCD_Clear(LCD_COLOR_WHITE); // Change background color to white
 8001052:	f04f 30ff 	mov.w	r0, #4294967295
 8001056:	f002 f81f 	bl	8003098 <BSP_LCD_Clear>
	  HAL_TIM_Base_Start_IT(&htim3);
 800105a:	4884      	ldr	r0, [pc, #528]	; (800126c <main+0x25c>)
 800105c:	f006 faf2 	bl	8007644 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f003 f864 	bl	800412c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 fc24 	bl	80018b0 <SystemClock_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (globalSpace > 3) {
 8001068:	4b81      	ldr	r3, [pc, #516]	; (8001270 <main+0x260>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b03      	cmp	r3, #3
 800106e:	dd02      	ble.n	8001076 <main+0x66>
		  globalSpace = 0;
 8001070:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <main+0x260>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	  }
	  if (globalClock > 9) {
 8001076:	4b7f      	ldr	r3, [pc, #508]	; (8001274 <main+0x264>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b09      	cmp	r3, #9
 800107c:	dd02      	ble.n	8001084 <main+0x74>
		  globalClock = 0;
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <main+0x264>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
	  }
	  if (globalTick > 3600) {
 8001084:	4b7c      	ldr	r3, [pc, #496]	; (8001278 <main+0x268>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800108c:	dd02      	ble.n	8001094 <main+0x84>
		  globalTick = 0;
 800108e:	4b7a      	ldr	r3, [pc, #488]	; (8001278 <main+0x268>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
	  }

	  if (globalClock == 0)
 8001094:	4b77      	ldr	r3, [pc, #476]	; (8001274 <main+0x264>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11d      	bne.n	80010d8 <main+0xc8>
	  {
	  privateTick = 0;
 800109c:	4b77      	ldr	r3, [pc, #476]	; (800127c <main+0x26c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
	  curTime.minutes = privateTick / 60;
 80010a2:	4b76      	ldr	r3, [pc, #472]	; (800127c <main+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a76      	ldr	r2, [pc, #472]	; (8001280 <main+0x270>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	441a      	add	r2, r3
 80010ae:	1152      	asrs	r2, r2, #5
 80010b0:	17db      	asrs	r3, r3, #31
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	733b      	strb	r3, [r7, #12]
	  curTime.seconds = privateTick % (curTime.minutes * 60);
 80010b8:	4b70      	ldr	r3, [pc, #448]	; (800127c <main+0x26c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	4619      	mov	r1, r3
 80010c0:	460b      	mov	r3, r1
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	1a5b      	subs	r3, r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80010cc:	fb01 f303 	mul.w	r3, r1, r3
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	737b      	strb	r3, [r7, #13]
 80010d6:	e0e6      	b.n	80012a6 <main+0x296>
	  }
	  else if (globalClock == 1)
 80010d8:	4b66      	ldr	r3, [pc, #408]	; (8001274 <main+0x264>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <main+0xe2>
	  {
		  globalTick = 0;
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <main+0x268>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
		  globalClock++;
 80010e6:	4b63      	ldr	r3, [pc, #396]	; (8001274 <main+0x264>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a61      	ldr	r2, [pc, #388]	; (8001274 <main+0x264>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e0d9      	b.n	80012a6 <main+0x296>
	  }
	  else if (globalClock == 2 || globalClock == 4 || globalClock == 6)
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <main+0x264>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d007      	beq.n	800110a <main+0xfa>
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <main+0x264>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d003      	beq.n	800110a <main+0xfa>
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <main+0x264>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d11e      	bne.n	8001148 <main+0x138>
	  {
		  privateTick = globalTick;
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <main+0x268>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a5b      	ldr	r2, [pc, #364]	; (800127c <main+0x26c>)
 8001110:	6013      	str	r3, [r2, #0]
		  curTime.minutes = privateTick / 60;
 8001112:	4b5a      	ldr	r3, [pc, #360]	; (800127c <main+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a5a      	ldr	r2, [pc, #360]	; (8001280 <main+0x270>)
 8001118:	fb82 1203 	smull	r1, r2, r2, r3
 800111c:	441a      	add	r2, r3
 800111e:	1152      	asrs	r2, r2, #5
 8001120:	17db      	asrs	r3, r3, #31
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	733b      	strb	r3, [r7, #12]
		  curTime.seconds = privateTick % (curTime.minutes * 60);
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <main+0x26c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	4619      	mov	r1, r3
 8001130:	460b      	mov	r3, r1
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fb92 f1f3 	sdiv	r1, r2, r3
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	737b      	strb	r3, [r7, #13]
 8001146:	e0ae      	b.n	80012a6 <main+0x296>
	  }
	  else if (globalClock == 3)
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <main+0x264>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d127      	bne.n	80011a0 <main+0x190>
	  {
		  privateTick = globalTick;
 8001150:	4b49      	ldr	r3, [pc, #292]	; (8001278 <main+0x268>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a49      	ldr	r2, [pc, #292]	; (800127c <main+0x26c>)
 8001156:	6013      	str	r3, [r2, #0]
		  privateTickL1 = privateTick;
 8001158:	4b48      	ldr	r3, [pc, #288]	; (800127c <main+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a49      	ldr	r2, [pc, #292]	; (8001284 <main+0x274>)
 800115e:	6013      	str	r3, [r2, #0]
		  lapTime1.minutes = privateTickL1 / 60;
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <main+0x274>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a46      	ldr	r2, [pc, #280]	; (8001280 <main+0x270>)
 8001166:	fb82 1203 	smull	r1, r2, r2, r3
 800116a:	441a      	add	r2, r3
 800116c:	1152      	asrs	r2, r2, #5
 800116e:	17db      	asrs	r3, r3, #31
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	723b      	strb	r3, [r7, #8]
	  	  lapTime1.seconds = privateTickL1 % (lapTime1.minutes * 60);
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <main+0x274>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	7a3b      	ldrb	r3, [r7, #8]
 800117c:	4619      	mov	r1, r3
 800117e:	460b      	mov	r3, r1
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	1a5b      	subs	r3, r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fb92 f1f3 	sdiv	r1, r2, r3
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	727b      	strb	r3, [r7, #9]
	  	  globalClock++;
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <main+0x264>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a36      	ldr	r2, [pc, #216]	; (8001274 <main+0x264>)
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e082      	b.n	80012a6 <main+0x296>
	  }
	  else if (globalClock == 5)
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <main+0x264>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	d12a      	bne.n	80011fe <main+0x1ee>
	  {
		  privateTick = globalTick;
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <main+0x268>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <main+0x26c>)
 80011ae:	6013      	str	r3, [r2, #0]
		  privateTickL2 = privateTick - privateTickL1;
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <main+0x26c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <main+0x274>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4a33      	ldr	r2, [pc, #204]	; (8001288 <main+0x278>)
 80011bc:	6013      	str	r3, [r2, #0]
		  lapTime2.minutes = privateTickL2 / 60;
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <main+0x278>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <main+0x270>)
 80011c4:	fb82 1203 	smull	r1, r2, r2, r3
 80011c8:	441a      	add	r2, r3
 80011ca:	1152      	asrs	r2, r2, #5
 80011cc:	17db      	asrs	r3, r3, #31
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	713b      	strb	r3, [r7, #4]
		  lapTime2.seconds = privateTickL2 % (lapTime2 .minutes * 60);
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <main+0x278>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	4619      	mov	r1, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fb92 f1f3 	sdiv	r1, r2, r3
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	717b      	strb	r3, [r7, #5]
		  globalClock++;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <main+0x264>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <main+0x264>)
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e053      	b.n	80012a6 <main+0x296>
	  }
	  else if (globalClock == 7)
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <main+0x264>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d144      	bne.n	8001290 <main+0x280>
	  {
		  privateTick = globalTick;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <main+0x268>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <main+0x26c>)
 800120c:	6013      	str	r3, [r2, #0]
	  	  privateTickL3 = privateTick - (privateTickL1 + privateTickL2);
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <main+0x26c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <main+0x274>)
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <main+0x278>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	440b      	add	r3, r1
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <main+0x27c>)
 8001220:	6013      	str	r3, [r2, #0]
		  lapTime3.minutes = privateTickL3 / 60;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <main+0x27c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a16      	ldr	r2, [pc, #88]	; (8001280 <main+0x270>)
 8001228:	fb82 1203 	smull	r1, r2, r2, r3
 800122c:	441a      	add	r2, r3
 800122e:	1152      	asrs	r2, r2, #5
 8001230:	17db      	asrs	r3, r3, #31
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	703b      	strb	r3, [r7, #0]
	  	  lapTime3.seconds = privateTickL3 % (lapTime3.minutes * 60);
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <main+0x27c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	783b      	ldrb	r3, [r7, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	460b      	mov	r3, r1
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fb92 f1f3 	sdiv	r1, r2, r3
 800124c:	fb01 f303 	mul.w	r3, r1, r3
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	707b      	strb	r3, [r7, #1]
	  	  globalClock++;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <main+0x264>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <main+0x264>)
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e021      	b.n	80012a6 <main+0x296>
 8001262:	bf00      	nop
 8001264:	0800d9e0 	.word	0x0800d9e0
 8001268:	200005f4 	.word	0x200005f4
 800126c:	200003d8 	.word	0x200003d8
 8001270:	2000065c 	.word	0x2000065c
 8001274:	20000660 	.word	0x20000660
 8001278:	20000658 	.word	0x20000658
 800127c:	20000454 	.word	0x20000454
 8001280:	88888889 	.word	0x88888889
 8001284:	20000458 	.word	0x20000458
 8001288:	2000045c 	.word	0x2000045c
 800128c:	20000460 	.word	0x20000460
	  }
	  else if (globalClock == 8 || globalClock == 9)
 8001290:	4b77      	ldr	r3, [pc, #476]	; (8001470 <main+0x460>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d003      	beq.n	80012a0 <main+0x290>
 8001298:	4b75      	ldr	r3, [pc, #468]	; (8001470 <main+0x460>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d102      	bne.n	80012a6 <main+0x296>
	  {
	  privateTick = 0;
 80012a0:	4b74      	ldr	r3, [pc, #464]	; (8001474 <main+0x464>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
	  }

	  if (globalSpace == 0 || globalSpace == 2 || globalSpace == 4)
 80012a6:	4b74      	ldr	r3, [pc, #464]	; (8001478 <main+0x468>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <main+0x2ae>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <main+0x468>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d003      	beq.n	80012be <main+0x2ae>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <main+0x468>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d118      	bne.n	80012f0 <main+0x2e0>
	  {
		  HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f002 ffa6 	bl	8004210 <HAL_Delay>
	  	  BSP_LCD_Clear (LCD_COLOR_WHITE);
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f001 fee6 	bl	8003098 <BSP_LCD_Clear>
	  	  BSP_LCD_ClearStringLine (1);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f001 ff0b 	bl	80030e8 <BSP_LCD_ClearStringLine>
	  	  BSP_LCD_ClearStringLine (2);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f001 ff08 	bl	80030e8 <BSP_LCD_ClearStringLine>
	  	  BSP_LCD_ClearStringLine (3);
 80012d8:	2003      	movs	r0, #3
 80012da:	f001 ff05 	bl	80030e8 <BSP_LCD_ClearStringLine>
	  	  BSP_LCD_ClearStringLine (4);
 80012de:	2004      	movs	r0, #4
 80012e0:	f001 ff02 	bl	80030e8 <BSP_LCD_ClearStringLine>
	  	  globalSpace++;
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <main+0x468>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a63      	ldr	r2, [pc, #396]	; (8001478 <main+0x468>)
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e2ce      	b.n	800188e <main+0x87e>
	  }

	  else if (globalSpace == 1)
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <main+0x468>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	f47f aeb7 	bne.w	8001068 <main+0x58>
	  {
		  if (globalClock == 0 || globalClock == 1)
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <main+0x460>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <main+0x2fa>
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <main+0x460>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d113      	bne.n	8001332 <main+0x322>
		  {
			  sprintf(str_curTime, "Time : %d:0%d", curTime.minutes, curTime.seconds);
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	461a      	mov	r2, r3
 800130e:	7b7b      	ldrb	r3, [r7, #13]
 8001310:	495a      	ldr	r1, [pc, #360]	; (800147c <main+0x46c>)
 8001312:	485b      	ldr	r0, [pc, #364]	; (8001480 <main+0x470>)
 8001314:	f007 fe24 	bl	8008f60 <siprintf>
			  sprintf(str_lapTime1, "Lap l:---");
 8001318:	495a      	ldr	r1, [pc, #360]	; (8001484 <main+0x474>)
 800131a:	485b      	ldr	r0, [pc, #364]	; (8001488 <main+0x478>)
 800131c:	f007 fe20 	bl	8008f60 <siprintf>
			  sprintf(str_lapTime2, "Lap 2:---");
 8001320:	495a      	ldr	r1, [pc, #360]	; (800148c <main+0x47c>)
 8001322:	485b      	ldr	r0, [pc, #364]	; (8001490 <main+0x480>)
 8001324:	f007 fe1c 	bl	8008f60 <siprintf>
			  sprintf(str_lapTime3, "Lap 3:---");
 8001328:	495a      	ldr	r1, [pc, #360]	; (8001494 <main+0x484>)
 800132a:	485b      	ldr	r0, [pc, #364]	; (8001498 <main+0x488>)
 800132c:	f007 fe18 	bl	8008f60 <siprintf>
 8001330:	e0db      	b.n	80014ea <main+0x4da>
		  }
	  else if (globalClock == 2)
 8001332:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <main+0x460>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d112      	bne.n	8001360 <main+0x350>
		  {
		  if(curTime.seconds < 10)
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d807      	bhi.n	8001350 <main+0x340>
			  {
			  sprintf(str_curTime, "Time: %d:0%d", curTime.minutes, curTime.seconds) ;
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	461a      	mov	r2, r3
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	4955      	ldr	r1, [pc, #340]	; (800149c <main+0x48c>)
 8001348:	484d      	ldr	r0, [pc, #308]	; (8001480 <main+0x470>)
 800134a:	f007 fe09 	bl	8008f60 <siprintf>
 800134e:	e0cc      	b.n	80014ea <main+0x4da>
			  }
		  	  else
		  	  {
		  	  sprintf(str_curTime, "Time: %d:%d", curTime.minutes, curTime.seconds);
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	461a      	mov	r2, r3
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	4952      	ldr	r1, [pc, #328]	; (80014a0 <main+0x490>)
 8001358:	4849      	ldr	r0, [pc, #292]	; (8001480 <main+0x470>)
 800135a:	f007 fe01 	bl	8008f60 <siprintf>
 800135e:	e0c4      	b.n	80014ea <main+0x4da>
		  	  }
		  }
	  else if (globalClock == 3 || globalClock == 4)
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <main+0x460>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d003      	beq.n	8001370 <main+0x360>
 8001368:	4b41      	ldr	r3, [pc, #260]	; (8001470 <main+0x460>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d124      	bne.n	80013ba <main+0x3aa>
		  {
		  if(curTime.seconds < 10)
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	2b09      	cmp	r3, #9
 8001374:	d807      	bhi.n	8001386 <main+0x376>
		 	 {
		 	 sprintf(str_curTime, "Time: %d:0%d", curTime.minutes, curTime. seconds) ;
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	461a      	mov	r2, r3
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	4947      	ldr	r1, [pc, #284]	; (800149c <main+0x48c>)
 800137e:	4840      	ldr	r0, [pc, #256]	; (8001480 <main+0x470>)
 8001380:	f007 fdee 	bl	8008f60 <siprintf>
 8001384:	e006      	b.n	8001394 <main+0x384>
		 	 }
		  else
		 	 {
		 	 sprintf(str_curTime, "Time: %d:%d", curTime.minutes, curTime.seconds) ;
 8001386:	7b3b      	ldrb	r3, [r7, #12]
 8001388:	461a      	mov	r2, r3
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	4944      	ldr	r1, [pc, #272]	; (80014a0 <main+0x490>)
 800138e:	483c      	ldr	r0, [pc, #240]	; (8001480 <main+0x470>)
 8001390:	f007 fde6 	bl	8008f60 <siprintf>
		 	 }
		  if(lapTime1.seconds < 10)
 8001394:	7a7b      	ldrb	r3, [r7, #9]
 8001396:	2b09      	cmp	r3, #9
 8001398:	d807      	bhi.n	80013aa <main+0x39a>
		      {
			  sprintf(str_lapTime1, "Lap 1: %d:0%d", lapTime1.minutes, lapTime1.seconds);
 800139a:	7a3b      	ldrb	r3, [r7, #8]
 800139c:	461a      	mov	r2, r3
 800139e:	7a7b      	ldrb	r3, [r7, #9]
 80013a0:	4940      	ldr	r1, [pc, #256]	; (80014a4 <main+0x494>)
 80013a2:	4839      	ldr	r0, [pc, #228]	; (8001488 <main+0x478>)
 80013a4:	f007 fddc 	bl	8008f60 <siprintf>
		  if(lapTime1.seconds < 10)
 80013a8:	e09f      	b.n	80014ea <main+0x4da>
		      }
		  else
		  	  {
		  	  sprintf(str_lapTime1, "Lap 1: %d:%d", lapTime1.minutes, lapTime1.seconds) ;
 80013aa:	7a3b      	ldrb	r3, [r7, #8]
 80013ac:	461a      	mov	r2, r3
 80013ae:	7a7b      	ldrb	r3, [r7, #9]
 80013b0:	493d      	ldr	r1, [pc, #244]	; (80014a8 <main+0x498>)
 80013b2:	4835      	ldr	r0, [pc, #212]	; (8001488 <main+0x478>)
 80013b4:	f007 fdd4 	bl	8008f60 <siprintf>
		  if(lapTime1.seconds < 10)
 80013b8:	e097      	b.n	80014ea <main+0x4da>
		  	  }
		  }
	  else if (globalClock == 5 || globalClock == 6)
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <main+0x460>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d003      	beq.n	80013ca <main+0x3ba>
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <main+0x460>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d124      	bne.n	8001414 <main+0x404>
		  	{
		  if(curTime.seconds < 10)
 80013ca:	7b7b      	ldrb	r3, [r7, #13]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d807      	bhi.n	80013e0 <main+0x3d0>
		 	 		{
		 	 		sprintf(str_curTime, "Time: %d:0%d", curTime.minutes, curTime. seconds) ;
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	461a      	mov	r2, r3
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	4931      	ldr	r1, [pc, #196]	; (800149c <main+0x48c>)
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <main+0x470>)
 80013da:	f007 fdc1 	bl	8008f60 <siprintf>
 80013de:	e006      	b.n	80013ee <main+0x3de>
		 	 		}
		  else
		 	 		{
		 	 		sprintf(str_curTime, "Time: %d:%d", curTime.minutes, curTime.seconds) ;
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	461a      	mov	r2, r3
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	492e      	ldr	r1, [pc, #184]	; (80014a0 <main+0x490>)
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <main+0x470>)
 80013ea:	f007 fdb9 	bl	8008f60 <siprintf>
		 	 		}
		  	if(lapTime2.seconds < 10)
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d807      	bhi.n	8001404 <main+0x3f4>
		  		 {
		  		 sprintf(str_lapTime2, "Lap 2: %d:0%d", lapTime2.minutes, lapTime2.seconds);
 80013f4:	793b      	ldrb	r3, [r7, #4]
 80013f6:	461a      	mov	r2, r3
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	492c      	ldr	r1, [pc, #176]	; (80014ac <main+0x49c>)
 80013fc:	4824      	ldr	r0, [pc, #144]	; (8001490 <main+0x480>)
 80013fe:	f007 fdaf 	bl	8008f60 <siprintf>
		  	if(lapTime2.seconds < 10)
 8001402:	e072      	b.n	80014ea <main+0x4da>
		  		 }
		  	else
		  		{
		  		sprintf(str_lapTime2, "Lap 2: %d:%d", lapTime2.minutes, lapTime2.seconds) ;
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	4929      	ldr	r1, [pc, #164]	; (80014b0 <main+0x4a0>)
 800140c:	4820      	ldr	r0, [pc, #128]	; (8001490 <main+0x480>)
 800140e:	f007 fda7 	bl	8008f60 <siprintf>
		  	if(lapTime2.seconds < 10)
 8001412:	e06a      	b.n	80014ea <main+0x4da>
		  		}
		  	}
	  else if (globalClock == 7 || globalClock == 8)
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <main+0x460>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b07      	cmp	r3, #7
 800141a:	d003      	beq.n	8001424 <main+0x414>
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <main+0x460>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d14d      	bne.n	80014c0 <main+0x4b0>
	 		  	{
	 		  	 if(curTime.seconds < 10)
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	2b09      	cmp	r3, #9
 8001428:	d807      	bhi.n	800143a <main+0x42a>
	 		  		 {
	 		  		 sprintf(str_curTime, "Final: %0d:%d", curTime.minutes, curTime. seconds) ;
 800142a:	7b3b      	ldrb	r3, [r7, #12]
 800142c:	461a      	mov	r2, r3
 800142e:	7b7b      	ldrb	r3, [r7, #13]
 8001430:	4920      	ldr	r1, [pc, #128]	; (80014b4 <main+0x4a4>)
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <main+0x470>)
 8001434:	f007 fd94 	bl	8008f60 <siprintf>
 8001438:	e006      	b.n	8001448 <main+0x438>
	 		  		 }
	 		  	 else
	 		  		 {
	 		  		 sprintf(str_curTime, "Final: %0d:%d", curTime.minutes, curTime.seconds) ;
 800143a:	7b3b      	ldrb	r3, [r7, #12]
 800143c:	461a      	mov	r2, r3
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	491c      	ldr	r1, [pc, #112]	; (80014b4 <main+0x4a4>)
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <main+0x470>)
 8001444:	f007 fd8c 	bl	8008f60 <siprintf>
	 		  	     }
	 		  	if(lapTime3.seconds < 10)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b09      	cmp	r3, #9
 800144c:	d807      	bhi.n	800145e <main+0x44e>
	 		  		{
	 		  		sprintf(str_lapTime3, "Lap 3: %d:0%d", lapTime3.minutes, lapTime3.seconds);
 800144e:	783b      	ldrb	r3, [r7, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	787b      	ldrb	r3, [r7, #1]
 8001454:	4918      	ldr	r1, [pc, #96]	; (80014b8 <main+0x4a8>)
 8001456:	4810      	ldr	r0, [pc, #64]	; (8001498 <main+0x488>)
 8001458:	f007 fd82 	bl	8008f60 <siprintf>
	 		  	if(lapTime3.seconds < 10)
 800145c:	e045      	b.n	80014ea <main+0x4da>
	 		  		}
	 		  	else
	 		  		{
	 		  		sprintf(str_lapTime3, "Lap 3: %d:%d", lapTime3.minutes, lapTime3.seconds) ;
 800145e:	783b      	ldrb	r3, [r7, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	4915      	ldr	r1, [pc, #84]	; (80014bc <main+0x4ac>)
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <main+0x488>)
 8001468:	f007 fd7a 	bl	8008f60 <siprintf>
	 		  	if(lapTime3.seconds < 10)
 800146c:	e03d      	b.n	80014ea <main+0x4da>
 800146e:	bf00      	nop
 8001470:	20000660 	.word	0x20000660
 8001474:	20000454 	.word	0x20000454
 8001478:	2000065c 	.word	0x2000065c
 800147c:	0800d9ec 	.word	0x0800d9ec
 8001480:	20000464 	.word	0x20000464
 8001484:	0800d9fc 	.word	0x0800d9fc
 8001488:	200004c8 	.word	0x200004c8
 800148c:	0800da08 	.word	0x0800da08
 8001490:	2000052c 	.word	0x2000052c
 8001494:	0800da14 	.word	0x0800da14
 8001498:	20000590 	.word	0x20000590
 800149c:	0800da20 	.word	0x0800da20
 80014a0:	0800da30 	.word	0x0800da30
 80014a4:	0800da3c 	.word	0x0800da3c
 80014a8:	0800da4c 	.word	0x0800da4c
 80014ac:	0800da5c 	.word	0x0800da5c
 80014b0:	0800da6c 	.word	0x0800da6c
 80014b4:	0800da7c 	.word	0x0800da7c
 80014b8:	0800da8c 	.word	0x0800da8c
 80014bc:	0800da9c 	.word	0x0800da9c
	 		  		}
	 		  	}

		 else if (globalClock == 9)
 80014c0:	4b9f      	ldr	r3, [pc, #636]	; (8001740 <main+0x730>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d110      	bne.n	80014ea <main+0x4da>
		 {
		  BSP_LCD_ClearStringLine (1) ;
 80014c8:	2001      	movs	r0, #1
 80014ca:	f001 fe0d 	bl	80030e8 <BSP_LCD_ClearStringLine>
		  BSP_LCD_ClearStringLine (2);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f001 fe0a 	bl	80030e8 <BSP_LCD_ClearStringLine>
		  BSP_LCD_ClearStringLine (3);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f001 fe07 	bl	80030e8 <BSP_LCD_ClearStringLine>
		  BSP_LCD_ClearStringLine (4) ;
 80014da:	2004      	movs	r0, #4
 80014dc:	f001 fe04 	bl	80030e8 <BSP_LCD_ClearStringLine>
		  globalClock++;
 80014e0:	4b97      	ldr	r3, [pc, #604]	; (8001740 <main+0x730>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a96      	ldr	r2, [pc, #600]	; (8001740 <main+0x730>)
 80014e8:	6013      	str	r3, [r2, #0]
		 }

		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK) ;
 80014ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014ee:	f001 fd8b 	bl	8003008 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine (0, (uint8_t*)&str_Space) ;
 80014f2:	4994      	ldr	r1, [pc, #592]	; (8001744 <main+0x734>)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f001 ff5d 	bl	80033b4 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine (1, (uint8_t*)&str_curTime);
 80014fa:	4993      	ldr	r1, [pc, #588]	; (8001748 <main+0x738>)
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 ff59 	bl	80033b4 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine (2, (uint8_t*)&str_lapTime1);
 8001502:	4992      	ldr	r1, [pc, #584]	; (800174c <main+0x73c>)
 8001504:	2002      	movs	r0, #2
 8001506:	f001 ff55 	bl	80033b4 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine (3, (uint8_t*)&str_lapTime2);
 800150a:	4991      	ldr	r1, [pc, #580]	; (8001750 <main+0x740>)
 800150c:	2003      	movs	r0, #3
 800150e:	f001 ff51 	bl	80033b4 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine (4, (uint8_t*)&str_lapTime3);
 8001512:	4990      	ldr	r1, [pc, #576]	; (8001754 <main+0x744>)
 8001514:	2004      	movs	r0, #4
 8001516:	f001 ff4d 	bl	80033b4 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DrawCircle (centerX, centerY, (r+1));
 800151a:	4b8f      	ldr	r3, [pc, #572]	; (8001758 <main+0x748>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b298      	uxth	r0, r3
 8001520:	4b8e      	ldr	r3, [pc, #568]	; (800175c <main+0x74c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b299      	uxth	r1, r3
 8001526:	4b8e      	ldr	r3, [pc, #568]	; (8001760 <main+0x750>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	3301      	adds	r3, #1
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	f002 f85f 	bl	80035f4 <BSP_LCD_DrawCircle>
		  BSP_LCD_DrawCircle(centerX, centerY, r);
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <main+0x748>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4a87      	ldr	r2, [pc, #540]	; (800175c <main+0x74c>)
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	b291      	uxth	r1, r2
 8001542:	4a87      	ldr	r2, [pc, #540]	; (8001760 <main+0x750>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	b292      	uxth	r2, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f002 f853 	bl	80035f4 <BSP_LCD_DrawCircle>
		  BSP_LCD_DrawCircle (centerX, centerY, (r-1));
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <main+0x748>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b298      	uxth	r0, r3
 8001554:	4b81      	ldr	r3, [pc, #516]	; (800175c <main+0x74c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b299      	uxth	r1, r3
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <main+0x750>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	f002 f845 	bl	80035f4 <BSP_LCD_DrawCircle>
		  BSP_LCD_SetTextColor (LCD_COLOR_WHITE) ;
 800156a:	f04f 30ff 	mov.w	r0, #4294967295
 800156e:	f001 fd4b 	bl	8003008 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(centerX, centerY, (r-2));
 8001572:	4b79      	ldr	r3, [pc, #484]	; (8001758 <main+0x748>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b298      	uxth	r0, r3
 8001578:	4b78      	ldr	r3, [pc, #480]	; (800175c <main+0x74c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b299      	uxth	r1, r3
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <main+0x750>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	3b02      	subs	r3, #2
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	f002 f977 	bl	800387c <BSP_LCD_FillCircle>
		  BSP_LCD_SetTextColor (LCD_COLOR_BLACK);
 800158e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001592:	f001 fd39 	bl	8003008 <BSP_LCD_SetTextColor>


		  float secondAngle;
		  if(curTime.seconds >= 0 && curTime.seconds <= 30)
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	2b1e      	cmp	r3, #30
 800159a:	d81c      	bhi.n	80015d6 <main+0x5c6>
		  {
			  secondAngle = (30-curTime. seconds) *M_PI/30;
 800159c:	7b7b      	ldrb	r3, [r7, #13]
 800159e:	f1c3 031e 	rsb	r3, r3, #30
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffce 	bl	8000544 <__aeabi_i2d>
 80015a8:	a363      	add	r3, pc, #396	; (adr r3, 8001738 <main+0x728>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f833 	bl	8000618 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b69      	ldr	r3, [pc, #420]	; (8001764 <main+0x754>)
 80015c0:	f7ff f954 	bl	800086c <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fb1c 	bl	8000c08 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e024      	b.n	8001620 <main+0x610>
		  }
		  else
		  {
			  secondAngle = (60-curTime. seconds) *M_PI/30+M_PI;
 80015d6:	7b7b      	ldrb	r3, [r7, #13]
 80015d8:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb1 	bl	8000544 <__aeabi_i2d>
 80015e2:	a355      	add	r3, pc, #340	; (adr r3, 8001738 <main+0x728>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f816 	bl	8000618 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <main+0x754>)
 80015fa:	f7ff f937 	bl	800086c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a34c      	add	r3, pc, #304	; (adr r3, 8001738 <main+0x728>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fe4e 	bl	80002ac <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff faf6 	bl	8000c08 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	61fb      	str	r3, [r7, #28]
		  }
		  float x = centerX + sin(secondAngle) *r;
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <main+0x748>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8d 	bl	8000544 <__aeabi_i2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
 800162e:	69f8      	ldr	r0, [r7, #28]
 8001630:	f7fe ff9a 	bl	8000568 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	ec43 2b10 	vmov	d0, r2, r3
 800163c:	f00b f984 	bl	800c948 <sin>
 8001640:	ec59 8b10 	vmov	r8, r9, d0
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <main+0x750>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7b 	bl	8000544 <__aeabi_i2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4640      	mov	r0, r8
 8001654:	4649      	mov	r1, r9
 8001656:	f7fe ffdf 	bl	8000618 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fe23 	bl	80002ac <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff facb 	bl	8000c08 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	617b      	str	r3, [r7, #20]
		  float y= centerY + cos(secondAngle) *r;
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <main+0x74c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff62 	bl	8000544 <__aeabi_i2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
 8001684:	69f8      	ldr	r0, [r7, #28]
 8001686:	f7fe ff6f 	bl	8000568 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b10 	vmov	d0, r2, r3
 8001692:	f00b f905 	bl	800c8a0 <cos>
 8001696:	ec59 8b10 	vmov	r8, r9, d0
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <main+0x750>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff50 	bl	8000544 <__aeabi_i2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4640      	mov	r0, r8
 80016aa:	4649      	mov	r1, r9
 80016ac:	f7fe ffb4 	bl	8000618 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe fdf8 	bl	80002ac <__adddf3>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff faa0 	bl	8000c08 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
		  BSP_LCD_DrawLine (centerX, centerY, x, y);
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <main+0x748>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b298      	uxth	r0, r3
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <main+0x74c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b299      	uxth	r1, r3
 80016d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	f001 feb4 	bl	8003460 <BSP_LCD_DrawLine>

		  float minuteAngle;
		  if(curTime.minutes >= 0 && curTime.minutes <= 30)
 80016f8:	7b3b      	ldrb	r3, [r7, #12]
 80016fa:	2b1e      	cmp	r3, #30
 80016fc:	d834      	bhi.n	8001768 <main+0x758>
		  {
			  minuteAngle = (30-curTime.minutes) *M_PI/30;
 80016fe:	7b3b      	ldrb	r3, [r7, #12]
 8001700:	f1c3 031e 	rsb	r3, r3, #30
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff1d 	bl	8000544 <__aeabi_i2d>
 800170a:	a30b      	add	r3, pc, #44	; (adr r3, 8001738 <main+0x728>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff82 	bl	8000618 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <main+0x754>)
 8001722:	f7ff f8a3 	bl	800086c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa6b 	bl	8000c08 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	e03c      	b.n	80017b2 <main+0x7a2>
 8001738:	54442d18 	.word	0x54442d18
 800173c:	400921fb 	.word	0x400921fb
 8001740:	20000660 	.word	0x20000660
 8001744:	200005f4 	.word	0x200005f4
 8001748:	20000464 	.word	0x20000464
 800174c:	200004c8 	.word	0x200004c8
 8001750:	2000052c 	.word	0x2000052c
 8001754:	20000590 	.word	0x20000590
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004
 8001760:	20000008 	.word	0x20000008
 8001764:	403e0000 	.word	0x403e0000
		  }
		  else
		  {
		  minuteAngle = (60-curTime. minutes) *M_PI/30+M_PI;
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fee8 	bl	8000544 <__aeabi_i2d>
 8001774:	a348      	add	r3, pc, #288	; (adr r3, 8001898 <main+0x888>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff4d 	bl	8000618 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <main+0x890>)
 800178c:	f7ff f86e 	bl	800086c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a33f      	add	r3, pc, #252	; (adr r3, 8001898 <main+0x888>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fd85 	bl	80002ac <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff fa2d 	bl	8000c08 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
		  }
		  x = centerX + sin(minuteAngle)*(r-20);
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <main+0x894>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fec4 	bl	8000544 <__aeabi_i2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	69b8      	ldr	r0, [r7, #24]
 80017c2:	f7fe fed1 	bl	8000568 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b10 	vmov	d0, r2, r3
 80017ce:	f00b f8bb 	bl	800c948 <sin>
 80017d2:	ec59 8b10 	vmov	r8, r9, d0
 80017d6:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <main+0x898>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3b14      	subs	r3, #20
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe feb1 	bl	8000544 <__aeabi_i2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4640      	mov	r0, r8
 80017e8:	4649      	mov	r1, r9
 80017ea:	f7fe ff15 	bl	8000618 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe fd59 	bl	80002ac <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff fa01 	bl	8000c08 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	617b      	str	r3, [r7, #20]
		  y = centerY + cos(minuteAngle)*(r-20) ;
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <main+0x89c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe98 	bl	8000544 <__aeabi_i2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	69b8      	ldr	r0, [r7, #24]
 800181a:	f7fe fea5 	bl	8000568 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b10 	vmov	d0, r2, r3
 8001826:	f00b f83b 	bl	800c8a0 <cos>
 800182a:	ec59 8b10 	vmov	r8, r9, d0
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <main+0x898>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3b14      	subs	r3, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe85 	bl	8000544 <__aeabi_i2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fee9 	bl	8000618 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fd2d 	bl	80002ac <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f9d5 	bl	8000c08 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	613b      	str	r3, [r7, #16]
		  BSP_LCD_DrawLine (centerX, centerY, x, y);
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <main+0x894>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b298      	uxth	r0, r3
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <main+0x89c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b299      	uxth	r1, r3
 800186e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001876:	ee17 3a90 	vmov	r3, s15
 800187a:	b29a      	uxth	r2, r3
 800187c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001884:	ee17 3a90 	vmov	r3, s15
 8001888:	b29b      	uxth	r3, r3
 800188a:	f001 fde9 	bl	8003460 <BSP_LCD_DrawLine>
	  if (globalSpace > 3) {
 800188e:	f7ff bbeb 	b.w	8001068 <main+0x58>
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	54442d18 	.word	0x54442d18
 800189c:	400921fb 	.word	0x400921fb
 80018a0:	403e0000 	.word	0x403e0000
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2230      	movs	r2, #48	; 0x30
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f007 fbb1 	bl	8009026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <SystemClock_Config+0xd8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <SystemClock_Config+0xd8>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <SystemClock_Config+0xd8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <SystemClock_Config+0xdc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <SystemClock_Config+0xdc>)
 80018fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <SystemClock_Config+0xdc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001920:	2310      	movs	r3, #16
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001924:	23d8      	movs	r3, #216	; 0xd8
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001928:	2302      	movs	r3, #2
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800192c:	2308      	movs	r3, #8
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f004 f9c1 	bl	8005cbc <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001940:	f000 fabe 	bl	8001ec0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001944:	f004 f96a 	bl	8005c1c <HAL_PWREx_EnableOverDrive>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800194e:	f000 fab7 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800195e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2105      	movs	r1, #5
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fc1b 	bl	80061ac <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800197c:	f000 faa0 	bl	8001ec0 <Error_Handler>
  }
}
 8001980:	bf00      	nop
 8001982:	3750      	adds	r7, #80	; 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_DMA2D_Init+0x5c>)
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <MX_DMA2D_Init+0x60>)
 8001998:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_DMA2D_Init+0x5c>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80019c4:	4809      	ldr	r0, [pc, #36]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019c6:	f002 ff17 	bl	80047f8 <HAL_DMA2D_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80019d0:	f000 fa76 	bl	8001ec0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80019d4:	2101      	movs	r1, #1
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_DMA2D_Init+0x5c>)
 80019d8:	f003 f86c 	bl	8004ab4 <HAL_DMA2D_ConfigLayer>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80019e2:	f000 fa6d 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000244 	.word	0x20000244
 80019f0:	4002b000 	.word	0x4002b000

080019f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_I2C3_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <MX_I2C3_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <MX_I2C3_Init+0x7c>)
 8001a02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a32:	f003 fc63 	bl	80052fc <HAL_I2C_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a3c:	f000 fa40 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a40:	2100      	movs	r1, #0
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a44:	f003 fd9e 	bl	8005584 <HAL_I2CEx_ConfigAnalogFilter>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a4e:	f000 fa37 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_I2C3_Init+0x74>)
 8001a56:	f003 fdd1 	bl	80055fc <HAL_I2CEx_ConfigDigitalFilter>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a60:	f000 fa2e 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000284 	.word	0x20000284
 8001a6c:	40005c00 	.word	0x40005c00
 8001a70:	000186a0 	.word	0x000186a0

08001a74 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b09a      	sub	sp, #104	; 0x68
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a7e:	2234      	movs	r2, #52	; 0x34
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f007 facf 	bl	8009026 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2234      	movs	r2, #52	; 0x34
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 fac9 	bl	8009026 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a94:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001a96:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <MX_LTDC_Init+0x160>)
 8001a98:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a9a:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001aba:	2203      	movs	r2, #3
 8001abc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ac0:	220e      	movs	r2, #14
 8001ac2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ac6:	2205      	movs	r2, #5
 8001ac8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001acc:	22fe      	movs	r2, #254	; 0xfe
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8001ad0:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ad2:	f240 1245 	movw	r2, #325	; 0x145
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8001ad8:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ada:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001ae2:	f240 1247 	movw	r2, #327	; 0x147
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b00:	4833      	ldr	r0, [pc, #204]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001b02:	f003 fdbb 	bl	800567c <HAL_LTDC_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8001b0c:	f000 f9d8 	bl	8001ec0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b30:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b32:	2305      	movs	r3, #5
 8001b34:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481c      	ldr	r0, [pc, #112]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001b5e:	f003 fe5d 	bl	800581c <HAL_LTDC_ConfigLayer>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001b68:	f000 f9aa 	bl	8001ec0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_LTDC_Init+0x15c>)
 8001bb8:	f003 fe30 	bl	800581c <HAL_LTDC_ConfigLayer>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8001bc2:	f000 f97d 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3768      	adds	r7, #104	; 0x68
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002d8 	.word	0x200002d8
 8001bd4:	40016800 	.word	0x40016800

08001bd8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <MX_SPI5_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_SPI5_Init+0x64>)
 8001c2a:	f004 fedc 	bl	80069e6 <HAL_SPI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c34:	f000 f944 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000380 	.word	0x20000380
 8001c40:	40015000 	.word	0x40015000

08001c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c62:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <MX_TIM3_Init+0x98>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96000;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c68:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <MX_TIM3_Init+0x9c>)
 8001c6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001c88:	f005 fc8c 	bl	80075a4 <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c92:	f000 f915 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001ca4:	f005 fe46 	bl	8007934 <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cae:	f000 f907 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_TIM3_Init+0x94>)
 8001cc0:	f006 f86c 	bl	8007d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cca:	f000 f8f9 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200003d8 	.word	0x200003d8
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	00017700 	.word	0x00017700

08001ce4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <MX_FMC_Init+0x94>)
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <MX_FMC_Init+0x98>)
 8001d00:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d10:	2204      	movs	r2, #4
 8001d12:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d16:	2210      	movs	r2, #16
 8001d18:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001d42:	2310      	movs	r3, #16
 8001d44:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001d46:	2310      	movs	r3, #16
 8001d48:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001d4e:	2310      	movs	r3, #16
 8001d50:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001d52:	2310      	movs	r3, #16
 8001d54:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001d56:	2310      	movs	r3, #16
 8001d58:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_FMC_Init+0x94>)
 8001d60:	f004 fdb0 	bl	80068c4 <HAL_SDRAM_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001d6a:	f000 f8a9 	bl	8001ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000420 	.word	0x20000420
 8001d7c:	a0000140 	.word	0xa0000140

08001d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a46      	ldr	r2, [pc, #280]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001da0:	f043 0320 	orr.w	r3, r3, #32
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_GPIO_Init+0x138>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001e76:	2381      	movs	r3, #129	; 0x81
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_GPIO_Init+0x13c>)
 8001e8c:	f002 ff40 	bl	8004d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2006      	movs	r0, #6
 8001e96:	f002 faba 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e9a:	2006      	movs	r0, #6
 8001e9c:	f002 fad3 	bl	8004446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2017      	movs	r0, #23
 8001ea6:	f002 fab2 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eaa:	2017      	movs	r0, #23
 8001eac:	f002 facb 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 8001eb0:	bf00      	nop
 8001eb2:	3738      	adds	r7, #56	; 0x38
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_MspInit+0x4c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_MspInit+0x4c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	6413      	str	r3, [r2, #64]	; 0x40
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_DMA2D_MspInit+0x3c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d10d      	bne.n	8001f4a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_DMA2D_MspInit+0x40>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_DMA2D_MspInit+0x40>)
 8001f38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_DMA2D_MspInit+0x40>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	4002b000 	.word	0x4002b000
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_I2C_MspInit+0xc4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d14b      	bne.n	800201a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a27      	ldr	r2, [pc, #156]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4815      	ldr	r0, [pc, #84]	; (800202c <HAL_I2C_MspInit+0xcc>)
 8001fd8:	f002 fe9a 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <HAL_I2C_MspInit+0xd0>)
 8001ffa:	f002 fe89 	bl	8004d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8002008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_I2C_MspInit+0xc8>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	; 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40005c00 	.word	0x40005c00
 8002028:	40023800 	.word	0x40023800
 800202c:	40020800 	.word	0x40020800
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09a      	sub	sp, #104	; 0x68
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	2230      	movs	r2, #48	; 0x30
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f006 ffe6 	bl	8009026 <memset>
  if(hltdc->Instance==LTDC)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a81      	ldr	r2, [pc, #516]	; (8002264 <HAL_LTDC_MspInit+0x230>)
 8002060:	4293      	cmp	r3, r2
 8002062:	f040 80fa 	bne.w	800225a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002066:	2308      	movs	r3, #8
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800206a:	2331      	movs	r3, #49	; 0x31
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 800206e:	2302      	movs	r3, #2
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002072:	2300      	movs	r3, #0
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fa62 	bl	8006544 <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002086:	f7ff ff1b 	bl	8001ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020b0:	f043 0320 	orr.w	r3, r3, #32
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	4b68      	ldr	r3, [pc, #416]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a67      	ldr	r2, [pc, #412]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b50      	ldr	r3, [pc, #320]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_LTDC_MspInit+0x234>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002160:	230e      	movs	r3, #14
 8002162:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002168:	4619      	mov	r1, r3
 800216a:	4840      	ldr	r0, [pc, #256]	; (800226c <HAL_LTDC_MspInit+0x238>)
 800216c:	f002 fdd0 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002170:	f641 0358 	movw	r3, #6232	; 0x1858
 8002174:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002182:	230e      	movs	r3, #14
 8002184:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218a:	4619      	mov	r1, r3
 800218c:	4838      	ldr	r0, [pc, #224]	; (8002270 <HAL_LTDC_MspInit+0x23c>)
 800218e:	f002 fdbf 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002192:	2303      	movs	r3, #3
 8002194:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021a2:	2309      	movs	r3, #9
 80021a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021aa:	4619      	mov	r1, r3
 80021ac:	4831      	ldr	r0, [pc, #196]	; (8002274 <HAL_LTDC_MspInit+0x240>)
 80021ae:	f002 fdaf 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80021b2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021c4:	230e      	movs	r3, #14
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021cc:	4619      	mov	r1, r3
 80021ce:	4829      	ldr	r0, [pc, #164]	; (8002274 <HAL_LTDC_MspInit+0x240>)
 80021d0:	f002 fd9e 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80021d4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80021d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e6:	230e      	movs	r3, #14
 80021e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ee:	4619      	mov	r1, r3
 80021f0:	4821      	ldr	r0, [pc, #132]	; (8002278 <HAL_LTDC_MspInit+0x244>)
 80021f2:	f002 fd8d 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80021f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002208:	230e      	movs	r3, #14
 800220a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002210:	4619      	mov	r1, r3
 8002212:	481a      	ldr	r0, [pc, #104]	; (800227c <HAL_LTDC_MspInit+0x248>)
 8002214:	f002 fd7c 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002218:	2348      	movs	r3, #72	; 0x48
 800221a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002228:	230e      	movs	r3, #14
 800222a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002230:	4619      	mov	r1, r3
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <HAL_LTDC_MspInit+0x24c>)
 8002234:	f002 fd6c 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002238:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800223c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800224a:	2309      	movs	r3, #9
 800224c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800224e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002252:	4619      	mov	r1, r3
 8002254:	4808      	ldr	r0, [pc, #32]	; (8002278 <HAL_LTDC_MspInit+0x244>)
 8002256:	f002 fd5b 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3768      	adds	r7, #104	; 0x68
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40016800 	.word	0x40016800
 8002268:	40023800 	.word	0x40023800
 800226c:	40021400 	.word	0x40021400
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40021800 	.word	0x40021800
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00

08002284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <HAL_SPI_MspInit+0x84>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d12c      	bne.n	8002300 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_SPI_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022f0:	2305      	movs	r3, #5
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_SPI_MspInit+0x8c>)
 80022fc:	f002 fd08 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40015000 	.word	0x40015000
 800230c:	40023800 	.word	0x40023800
 8002310:	40021400 	.word	0x40021400

08002314 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_SPI_MspDeInit+0x30>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10a      	bne.n	800233c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_SPI_MspDeInit+0x34>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_SPI_MspDeInit+0x34>)
 800232c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002332:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <HAL_SPI_MspDeInit+0x38>)
 8002338:	f002 fe96 	bl	8005068 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40015000 	.word	0x40015000
 8002348:	40023800 	.word	0x40023800
 800234c:	40021400 	.word	0x40021400

08002350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_TIM_Base_MspInit+0x48>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d115      	bne.n	800238e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_TIM_Base_MspInit+0x4c>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_TIM_Base_MspInit+0x4c>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_TIM_Base_MspInit+0x4c>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	201d      	movs	r0, #29
 8002384:	f002 f843 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002388:	201d      	movs	r0, #29
 800238a:	f002 f85c 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40000400 	.word	0x40000400
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_FMC_MspInit+0x104>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d16f      	bne.n	800249c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_FMC_MspInit+0x104>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_FMC_MspInit+0x108>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	4a37      	ldr	r2, [pc, #220]	; (80024a8 <HAL_FMC_MspInit+0x108>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6393      	str	r3, [r2, #56]	; 0x38
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_FMC_MspInit+0x108>)
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023f0:	230c      	movs	r3, #12
 80023f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	482c      	ldr	r0, [pc, #176]	; (80024ac <HAL_FMC_MspInit+0x10c>)
 80023fa:	f002 fc89 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fe:	2301      	movs	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800240e:	230c      	movs	r3, #12
 8002410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4826      	ldr	r0, [pc, #152]	; (80024b0 <HAL_FMC_MspInit+0x110>)
 8002418:	f002 fc7a 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800241c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002420:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800242e:	230c      	movs	r3, #12
 8002430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	481f      	ldr	r0, [pc, #124]	; (80024b4 <HAL_FMC_MspInit+0x114>)
 8002438:	f002 fc6a 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800243c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002440:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244e:	230c      	movs	r3, #12
 8002450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <HAL_FMC_MspInit+0x118>)
 8002458:	f002 fc5a 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800245c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002460:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800246e:	230c      	movs	r3, #12
 8002470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4811      	ldr	r0, [pc, #68]	; (80024bc <HAL_FMC_MspInit+0x11c>)
 8002478:	f002 fc4a 	bl	8004d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800247c:	2360      	movs	r3, #96	; 0x60
 800247e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248c:	230c      	movs	r3, #12
 800248e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4619      	mov	r1, r3
 8002494:	480a      	ldr	r0, [pc, #40]	; (80024c0 <HAL_FMC_MspInit+0x120>)
 8002496:	f002 fc3b 	bl	8004d10 <HAL_GPIO_Init>
 800249a:	e000      	b.n	800249e <HAL_FMC_MspInit+0xfe>
    return;
 800249c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000664 	.word	0x20000664
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40021400 	.word	0x40021400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40021800 	.word	0x40021800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40020400 	.word	0x40020400

080024c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80024cc:	f7ff ff68 	bl	80023a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <NMI_Handler+0x4>

080024de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler+0x4>

080024ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002524:	f001 fe54 	bl	80041d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	globalClock++;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <EXTI0_IRQHandler+0x18>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <EXTI0_IRQHandler+0x18>)
 8002538:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800253a:	2001      	movs	r0, #1
 800253c:	f002 feba 	bl	80052b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000660 	.word	0x20000660

08002548 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	globalSpace++;
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <EXTI9_5_IRQHandler+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a03      	ldr	r2, [pc, #12]	; (8002560 <EXTI9_5_IRQHandler+0x18>)
 8002554:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002556:	2080      	movs	r0, #128	; 0x80
 8002558:	f002 feac 	bl	80052b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000065c 	.word	0x2000065c

08002564 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	globalTick++;
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <TIM3_IRQHandler+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a03      	ldr	r2, [pc, #12]	; (800257c <TIM3_IRQHandler+0x18>)
 8002570:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002572:	4803      	ldr	r0, [pc, #12]	; (8002580 <TIM3_IRQHandler+0x1c>)
 8002574:	f005 f8d6 	bl	8007724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000658 	.word	0x20000658
 8002580:	200003d8 	.word	0x200003d8

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_kill>:

int _kill(int pid, int sig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259e:	f006 fd95 	bl	80090cc <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2216      	movs	r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
  return -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_exit>:

void _exit (int status)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffe7 	bl	8002594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c6:	e7fe      	b.n	80025c6 <_exit+0x12>

080025c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00a      	b.n	80025f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025da:	f3af 8000 	nop.w
 80025de:	4601      	mov	r1, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf0      	blt.n	80025da <_read+0x12>
  }

  return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf1      	blt.n	8002614 <_write+0x12>
  }
  return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_close>:

int _close(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002662:	605a      	str	r2, [r3, #4]
  return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_isatty>:

int _isatty(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f006 fcfa 	bl	80090cc <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20030000 	.word	0x20030000
 8002704:	00000400 	.word	0x00000400
 8002708:	20000668 	.word	0x20000668
 800270c:	20000a10 	.word	0x20000a10

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800276c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480d      	ldr	r0, [pc, #52]	; (8002770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275e:	f7ff ffd7 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002762:	f006 fcb9 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7fe fc53 	bl	8001010 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800276c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002778:	0800fb98 	.word	0x0800fb98
  ldr r2, =_sbss
 800277c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002780:	20000a10 	.word	0x20000a10

08002784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <ADC_IRQHandler>

08002786 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800278a:	f000 fa5d 	bl	8002c48 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800278e:	20ca      	movs	r0, #202	; 0xca
 8002790:	f000 f95d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002794:	20c3      	movs	r0, #195	; 0xc3
 8002796:	f000 f967 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800279a:	2008      	movs	r0, #8
 800279c:	f000 f964 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80027a0:	2050      	movs	r0, #80	; 0x50
 80027a2:	f000 f961 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80027a6:	20cf      	movs	r0, #207	; 0xcf
 80027a8:	f000 f951 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f000 f95b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80027b2:	20c1      	movs	r0, #193	; 0xc1
 80027b4:	f000 f958 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80027b8:	2030      	movs	r0, #48	; 0x30
 80027ba:	f000 f955 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80027be:	20ed      	movs	r0, #237	; 0xed
 80027c0:	f000 f945 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f000 f94f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f000 f94c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80027d0:	2012      	movs	r0, #18
 80027d2:	f000 f949 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80027d6:	2081      	movs	r0, #129	; 0x81
 80027d8:	f000 f946 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80027dc:	20e8      	movs	r0, #232	; 0xe8
 80027de:	f000 f936 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80027e2:	2085      	movs	r0, #133	; 0x85
 80027e4:	f000 f940 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f000 f93d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027ee:	2078      	movs	r0, #120	; 0x78
 80027f0:	f000 f93a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80027f4:	20cb      	movs	r0, #203	; 0xcb
 80027f6:	f000 f92a 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80027fa:	2039      	movs	r0, #57	; 0x39
 80027fc:	f000 f934 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	f000 f931 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 f92e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800280c:	2034      	movs	r0, #52	; 0x34
 800280e:	f000 f92b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002812:	2002      	movs	r0, #2
 8002814:	f000 f928 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002818:	20f7      	movs	r0, #247	; 0xf7
 800281a:	f000 f918 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800281e:	2020      	movs	r0, #32
 8002820:	f000 f922 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002824:	20ea      	movs	r0, #234	; 0xea
 8002826:	f000 f912 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f91c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f919 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002836:	20b1      	movs	r0, #177	; 0xb1
 8002838:	f000 f909 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f913 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002842:	201b      	movs	r0, #27
 8002844:	f000 f910 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002848:	20b6      	movs	r0, #182	; 0xb6
 800284a:	f000 f900 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800284e:	200a      	movs	r0, #10
 8002850:	f000 f90a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002854:	20a2      	movs	r0, #162	; 0xa2
 8002856:	f000 f907 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800285a:	20c0      	movs	r0, #192	; 0xc0
 800285c:	f000 f8f7 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002860:	2010      	movs	r0, #16
 8002862:	f000 f901 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002866:	20c1      	movs	r0, #193	; 0xc1
 8002868:	f000 f8f1 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800286c:	2010      	movs	r0, #16
 800286e:	f000 f8fb 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002872:	20c5      	movs	r0, #197	; 0xc5
 8002874:	f000 f8eb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002878:	2045      	movs	r0, #69	; 0x45
 800287a:	f000 f8f5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800287e:	2015      	movs	r0, #21
 8002880:	f000 f8f2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002884:	20c7      	movs	r0, #199	; 0xc7
 8002886:	f000 f8e2 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800288a:	2090      	movs	r0, #144	; 0x90
 800288c:	f000 f8ec 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002890:	2036      	movs	r0, #54	; 0x36
 8002892:	f000 f8dc 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002896:	20c8      	movs	r0, #200	; 0xc8
 8002898:	f000 f8e6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800289c:	20f2      	movs	r0, #242	; 0xf2
 800289e:	f000 f8d6 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f8e0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80028a8:	20b0      	movs	r0, #176	; 0xb0
 80028aa:	f000 f8d0 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80028ae:	20c2      	movs	r0, #194	; 0xc2
 80028b0:	f000 f8da 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80028b4:	20b6      	movs	r0, #182	; 0xb6
 80028b6:	f000 f8ca 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80028ba:	200a      	movs	r0, #10
 80028bc:	f000 f8d4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80028c0:	20a7      	movs	r0, #167	; 0xa7
 80028c2:	f000 f8d1 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80028c6:	2027      	movs	r0, #39	; 0x27
 80028c8:	f000 f8ce 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80028cc:	2004      	movs	r0, #4
 80028ce:	f000 f8cb 	bl	8002a68 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80028d2:	202a      	movs	r0, #42	; 0x2a
 80028d4:	f000 f8bb 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f8c5 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f8c2 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f8bf 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80028ea:	20ef      	movs	r0, #239	; 0xef
 80028ec:	f000 f8bc 	bl	8002a68 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80028f0:	202b      	movs	r0, #43	; 0x2b
 80028f2:	f000 f8ac 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f8b6 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 f8b3 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002902:	2001      	movs	r0, #1
 8002904:	f000 f8b0 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002908:	203f      	movs	r0, #63	; 0x3f
 800290a:	f000 f8ad 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800290e:	20f6      	movs	r0, #246	; 0xf6
 8002910:	f000 f89d 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 f8a7 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f000 f8a4 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002920:	2006      	movs	r0, #6
 8002922:	f000 f8a1 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f000 f891 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 800292c:	20c8      	movs	r0, #200	; 0xc8
 800292e:	f000 fa79 	bl	8002e24 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002932:	2026      	movs	r0, #38	; 0x26
 8002934:	f000 f88b 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 f895 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800293e:	20e0      	movs	r0, #224	; 0xe0
 8002940:	f000 f885 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002944:	200f      	movs	r0, #15
 8002946:	f000 f88f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800294a:	2029      	movs	r0, #41	; 0x29
 800294c:	f000 f88c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002950:	2024      	movs	r0, #36	; 0x24
 8002952:	f000 f889 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002956:	200c      	movs	r0, #12
 8002958:	f000 f886 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800295c:	200e      	movs	r0, #14
 800295e:	f000 f883 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002962:	2009      	movs	r0, #9
 8002964:	f000 f880 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002968:	204e      	movs	r0, #78	; 0x4e
 800296a:	f000 f87d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 f87a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002974:	203c      	movs	r0, #60	; 0x3c
 8002976:	f000 f877 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800297a:	2009      	movs	r0, #9
 800297c:	f000 f874 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002980:	2013      	movs	r0, #19
 8002982:	f000 f871 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002986:	2005      	movs	r0, #5
 8002988:	f000 f86e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800298c:	2017      	movs	r0, #23
 800298e:	f000 f86b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002992:	2011      	movs	r0, #17
 8002994:	f000 f868 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f865 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800299e:	20e1      	movs	r0, #225	; 0xe1
 80029a0:	f000 f855 	bl	8002a4e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f000 f85f 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80029aa:	2016      	movs	r0, #22
 80029ac:	f000 f85c 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029b0:	201b      	movs	r0, #27
 80029b2:	f000 f859 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80029b6:	2004      	movs	r0, #4
 80029b8:	f000 f856 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80029bc:	2011      	movs	r0, #17
 80029be:	f000 f853 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80029c2:	2007      	movs	r0, #7
 80029c4:	f000 f850 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80029c8:	2031      	movs	r0, #49	; 0x31
 80029ca:	f000 f84d 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80029ce:	2033      	movs	r0, #51	; 0x33
 80029d0:	f000 f84a 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80029d4:	2042      	movs	r0, #66	; 0x42
 80029d6:	f000 f847 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80029da:	2005      	movs	r0, #5
 80029dc:	f000 f844 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029e0:	200c      	movs	r0, #12
 80029e2:	f000 f841 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80029e6:	200a      	movs	r0, #10
 80029e8:	f000 f83e 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f000 f83b 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80029f2:	202f      	movs	r0, #47	; 0x2f
 80029f4:	f000 f838 	bl	8002a68 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80029f8:	200f      	movs	r0, #15
 80029fa:	f000 f835 	bl	8002a68 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80029fe:	2011      	movs	r0, #17
 8002a00:	f000 f825 	bl	8002a4e <ili9341_WriteReg>
  LCD_Delay(200);
 8002a04:	20c8      	movs	r0, #200	; 0xc8
 8002a06:	f000 fa0d 	bl	8002e24 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a0a:	2029      	movs	r0, #41	; 0x29
 8002a0c:	f000 f81f 	bl	8002a4e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002a10:	202c      	movs	r0, #44	; 0x2c
 8002a12:	f000 f81c 	bl	8002a4e <ili9341_WriteReg>
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002a1e:	f000 f913 	bl	8002c48 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002a22:	2103      	movs	r1, #3
 8002a24:	20d3      	movs	r0, #211	; 0xd3
 8002a26:	f000 f82c 	bl	8002a82 <ili9341_ReadData>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	b29b      	uxth	r3, r3
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a36:	2029      	movs	r0, #41	; 0x29
 8002a38:	f000 f809 	bl	8002a4e <ili9341_WriteReg>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002a44:	2028      	movs	r0, #40	; 0x28
 8002a46:	f000 f802 	bl	8002a4e <ili9341_WriteReg>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f98e 	bl	8002d7c <LCD_IO_WriteReg>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f95f 	bl	8002d38 <LCD_IO_WriteData>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	80fb      	strh	r3, [r7, #6]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a92:	797a      	ldrb	r2, [r7, #5]
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f991 	bl	8002dc0 <LCD_IO_ReadData>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002aac:	23f0      	movs	r3, #240	; 0xf0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002abc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <SPIx_Init+0x6c>)
 8002ad2:	f004 fc28 	bl	8007326 <HAL_SPI_GetState>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d12b      	bne.n	8002b34 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <SPIx_Init+0x6c>)
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <SPIx_Init+0x70>)
 8002ae0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <SPIx_Init+0x6c>)
 8002ae4:	2218      	movs	r2, #24
 8002ae6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <SPIx_Init+0x6c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <SPIx_Init+0x6c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <SPIx_Init+0x6c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <SPIx_Init+0x6c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <SPIx_Init+0x6c>)
 8002b02:	2207      	movs	r2, #7
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <SPIx_Init+0x6c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <SPIx_Init+0x6c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <SPIx_Init+0x6c>)
 8002b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b18:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <SPIx_Init+0x6c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SPIx_Init+0x6c>)
 8002b22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b26:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <SPIx_Init+0x6c>)
 8002b2a:	f000 f853 	bl	8002bd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002b2e:	4802      	ldr	r0, [pc, #8]	; (8002b38 <SPIx_Init+0x6c>)
 8002b30:	f003 ff59 	bl	80069e6 <HAL_SPI_Init>
  } 
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000066c 	.word	0x2000066c
 8002b3c:	40015000 	.word	0x40015000

08002b40 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <SPIx_Read+0x38>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f107 0108 	add.w	r1, r7, #8
 8002b5a:	4808      	ldr	r0, [pc, #32]	; (8002b7c <SPIx_Read+0x3c>)
 8002b5c:	f004 f930 	bl	8006dc0 <HAL_SPI_Receive>
 8002b60:	4603      	mov	r3, r0
 8002b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002b6a:	f000 f827 	bl	8002bbc <SPIx_Error>
  }
  
  return readvalue;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20000048 	.word	0x20000048
 8002b7c:	2000066c 	.word	0x2000066c

08002b80 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <SPIx_Write+0x34>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	1db9      	adds	r1, r7, #6
 8002b94:	2201      	movs	r2, #1
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <SPIx_Write+0x38>)
 8002b98:	f003 ffd6 	bl	8006b48 <HAL_SPI_Transmit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ba6:	f000 f809 	bl	8002bbc <SPIx_Error>
  }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000048 	.word	0x20000048
 8002bb8:	2000066c 	.word	0x2000066c

08002bbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <SPIx_Error+0x14>)
 8002bc2:	f003 ff99 	bl	8006af8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002bc6:	f7ff ff81 	bl	8002acc <SPIx_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000066c 	.word	0x2000066c

08002bd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bea:	6453      	str	r3, [r2, #68]	; 0x44
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002c02:	f043 0320 	orr.w	r3, r3, #32
 8002c06:	6313      	str	r3, [r2, #48]	; 0x30
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <SPIx_MspInit+0x6c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002c14:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002c22:	2301      	movs	r3, #1
 8002c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002c26:	2305      	movs	r3, #5
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <SPIx_MspInit+0x70>)
 8002c32:	f002 f86d 	bl	8004d10 <HAL_GPIO_Init>
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40021400 	.word	0x40021400

08002c48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <LCD_IO_Init+0xe0>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d164      	bne.n	8002d20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <LCD_IO_Init+0xe0>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c86:	2302      	movs	r3, #2
 8002c88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4827      	ldr	r0, [pc, #156]	; (8002d30 <LCD_IO_Init+0xe8>)
 8002c92:	f002 f83d 	bl	8004d10 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4819      	ldr	r0, [pc, #100]	; (8002d30 <LCD_IO_Init+0xe8>)
 8002ccc:	f002 f820 	bl	8004d10 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <LCD_IO_Init+0xe4>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002cec:	2304      	movs	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4619      	mov	r1, r3
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d04:	f002 f804 	bl	8004d10 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	4809      	ldr	r0, [pc, #36]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d0e:	f002 fab7 	bl	8005280 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002d12:	2201      	movs	r2, #1
 8002d14:	2104      	movs	r1, #4
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <LCD_IO_Init+0xec>)
 8002d18:	f002 fab2 	bl	8005280 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002d1c:	f7ff fed6 	bl	8002acc <SPIx_Init>
  }
}
 8002d20:	bf00      	nop
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	200006c4 	.word	0x200006c4
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40020800 	.word	0x40020800

08002d38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d42:	2201      	movs	r2, #1
 8002d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d48:	480a      	ldr	r0, [pc, #40]	; (8002d74 <LCD_IO_WriteData+0x3c>)
 8002d4a:	f002 fa99 	bl	8005280 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2104      	movs	r1, #4
 8002d52:	4809      	ldr	r0, [pc, #36]	; (8002d78 <LCD_IO_WriteData+0x40>)
 8002d54:	f002 fa94 	bl	8005280 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff10 	bl	8002b80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d60:	2201      	movs	r2, #1
 8002d62:	2104      	movs	r1, #4
 8002d64:	4804      	ldr	r0, [pc, #16]	; (8002d78 <LCD_IO_WriteData+0x40>)
 8002d66:	f002 fa8b 	bl	8005280 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40020800 	.word	0x40020800

08002d7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002d86:	2200      	movs	r2, #0
 8002d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d8c:	480a      	ldr	r0, [pc, #40]	; (8002db8 <LCD_IO_WriteReg+0x3c>)
 8002d8e:	f002 fa77 	bl	8005280 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002d92:	2200      	movs	r2, #0
 8002d94:	2104      	movs	r1, #4
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <LCD_IO_WriteReg+0x40>)
 8002d98:	f002 fa72 	bl	8005280 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff feed 	bl	8002b80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002da6:	2201      	movs	r2, #1
 8002da8:	2104      	movs	r1, #4
 8002daa:	4804      	ldr	r0, [pc, #16]	; (8002dbc <LCD_IO_WriteReg+0x40>)
 8002dac:	f002 fa68 	bl	8005280 <HAL_GPIO_WritePin>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40020800 	.word	0x40020800

08002dc0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	80fb      	strh	r3, [r7, #6]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	4810      	ldr	r0, [pc, #64]	; (8002e1c <LCD_IO_ReadData+0x5c>)
 8002dda:	f002 fa51 	bl	8005280 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <LCD_IO_ReadData+0x60>)
 8002de6:	f002 fa4b 	bl	8005280 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fec7 	bl	8002b80 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fea3 	bl	8002b40 <SPIx_Read>
 8002dfa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e02:	4807      	ldr	r0, [pc, #28]	; (8002e20 <LCD_IO_ReadData+0x60>)
 8002e04:	f002 fa3c 	bl	8005280 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4803      	ldr	r0, [pc, #12]	; (8002e1c <LCD_IO_ReadData+0x5c>)
 8002e0e:	f002 fa37 	bl	8005280 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00

08002e24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f001 f9ef 	bl	8004210 <HAL_Delay>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002e40:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e42:	4a2e      	ldr	r2, [pc, #184]	; (8002efc <BSP_LCD_Init+0xc0>)
 8002e44:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e48:	2209      	movs	r2, #9
 8002e4a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002e4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e54:	221d      	movs	r2, #29
 8002e56:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e60:	f240 120d 	movw	r2, #269	; 0x10d
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e68:	f240 1243 	movw	r2, #323	; 0x143
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e70:	f240 1217 	movw	r2, #279	; 0x117
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e78:	f240 1247 	movw	r2, #327	; 0x147
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002e98:	2208      	movs	r2, #8
 8002e9a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002e9e:	22c0      	movs	r2, #192	; 0xc0
 8002ea0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002eb0:	4813      	ldr	r0, [pc, #76]	; (8002f00 <BSP_LCD_Init+0xc4>)
 8002eb2:	f003 fb47 	bl	8006544 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002ece:	f000 fd75 	bl	80039bc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <BSP_LCD_Init+0xbc>)
 8002ed4:	f002 fbd2 	bl	800567c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <BSP_LCD_Init+0xc8>)
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <BSP_LCD_Init+0xcc>)
 8002edc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <BSP_LCD_Init+0xc8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ee6:	f000 ff57 	bl	8003d98 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002eea:	4808      	ldr	r0, [pc, #32]	; (8002f0c <BSP_LCD_Init+0xd0>)
 8002eec:	f000 f8a4 	bl	8003038 <BSP_LCD_SetFont>

  return LCD_OK;
 8002ef0:	2300      	movs	r3, #0
}  
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200006c8 	.word	0x200006c8
 8002efc:	40016800 	.word	0x40016800
 8002f00:	200007b0 	.word	0x200007b0
 8002f04:	200007fc 	.word	0x200007fc
 8002f08:	20000010 	.word	0x20000010
 8002f0c:	2000004c 	.word	0x2000004c

08002f10 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <BSP_LCD_GetXSize+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	4798      	blx	r3
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200007fc 	.word	0x200007fc

08002f28 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <BSP_LCD_GetYSize+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4798      	blx	r3
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200007fc 	.word	0x200007fc

08002f40 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b090      	sub	sp, #64	; 0x40
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002f50:	f7ff ffde 	bl	8002f10 <BSP_LCD_GetXSize>
 8002f54:	4603      	mov	r3, r0
 8002f56:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002f5c:	f7ff ffe4 	bl	8002f28 <BSP_LCD_GetYSize>
 8002f60:	4603      	mov	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002f6c:	23ff      	movs	r3, #255	; 0xff
 8002f6e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002f86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002f90:	f7ff ffbe 	bl	8002f10 <BSP_LCD_GetXSize>
 8002f94:	4603      	mov	r3, r0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002f98:	f7ff ffc6 	bl	8002f28 <BSP_LCD_GetYSize>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4814      	ldr	r0, [pc, #80]	; (8002ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002faa:	f002 fc37 	bl	800581c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	4913      	ldr	r1, [pc, #76]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	490e      	ldr	r1, [pc, #56]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3308      	adds	r3, #8
 8002fd4:	4a0b      	ldr	r2, [pc, #44]	; (8003004 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002fd6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	4909      	ldr	r1, [pc, #36]	; (8003000 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002fec:	4803      	ldr	r0, [pc, #12]	; (8002ffc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002fee:	f002 fc53 	bl	8005898 <HAL_LTDC_EnableDither>
}
 8002ff2:	bf00      	nop
 8002ff4:	3740      	adds	r7, #64	; 0x40
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200006c8 	.word	0x200006c8
 8003000:	200007e4 	.word	0x200007e4
 8003004:	2000004c 	.word	0x2000004c

08003008 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <BSP_LCD_SetTextColor+0x28>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <BSP_LCD_SetTextColor+0x2c>)
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200007e0 	.word	0x200007e0
 8003034:	200007e4 	.word	0x200007e4

08003038 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <BSP_LCD_SetFont+0x2c>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4908      	ldr	r1, [pc, #32]	; (8003068 <BSP_LCD_SetFont+0x30>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200007e0 	.word	0x200007e0
 8003068:	200007e4 	.word	0x200007e4

0800306c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <BSP_LCD_GetFont+0x24>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <BSP_LCD_GetFont+0x28>)
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3308      	adds	r3, #8
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	200007e0 	.word	0x200007e0
 8003094:	200007e4 	.word	0x200007e4

08003098 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <BSP_LCD_Clear+0x48>)
 80030a2:	681c      	ldr	r4, [r3, #0]
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <BSP_LCD_Clear+0x48>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <BSP_LCD_Clear+0x4c>)
 80030aa:	2134      	movs	r1, #52	; 0x34
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	335c      	adds	r3, #92	; 0x5c
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461e      	mov	r6, r3
 80030b8:	f7ff ff2a 	bl	8002f10 <BSP_LCD_GetXSize>
 80030bc:	4605      	mov	r5, r0
 80030be:	f7ff ff33 	bl	8002f28 <BSP_LCD_GetYSize>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	462a      	mov	r2, r5
 80030d0:	4631      	mov	r1, r6
 80030d2:	4620      	mov	r0, r4
 80030d4:	f000 fe28 	bl	8003d28 <FillBuffer>
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e0:	200007e0 	.word	0x200007e0
 80030e4:	200006c8 	.word	0x200006c8

080030e8 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	492d      	ldr	r1, [pc, #180]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 8003106:	6819      	ldr	r1, [r3, #0]
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4827      	ldr	r0, [pc, #156]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	3304      	adds	r3, #4
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	4823      	ldr	r0, [pc, #140]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800312a:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	491f      	ldr	r1, [pc, #124]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3308      	adds	r3, #8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	88da      	ldrh	r2, [r3, #6]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	b29b      	uxth	r3, r3
 8003144:	fb12 f303 	smulbb	r3, r2, r3
 8003148:	b29c      	uxth	r4, r3
 800314a:	f7ff fee1 	bl	8002f10 <BSP_LCD_GetXSize>
 800314e:	4603      	mov	r3, r0
 8003150:	b299      	uxth	r1, r3
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4815      	ldr	r0, [pc, #84]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4403      	add	r3, r0
 8003162:	3308      	adds	r3, #8
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	88db      	ldrh	r3, [r3, #6]
 8003168:	460a      	mov	r2, r1
 800316a:	4621      	mov	r1, r4
 800316c:	2000      	movs	r0, #0
 800316e:	f000 fb2b 	bl	80037c8 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	490d      	ldr	r1, [pc, #52]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <BSP_LCD_ClearStringLine+0xc0>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <BSP_LCD_ClearStringLine+0xc4>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff35 	bl	8003008 <BSP_LCD_SetTextColor>
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200007e0 	.word	0x200007e0
 80031ac:	200007e4 	.word	0x200007e4

080031b0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
 80031ba:	460b      	mov	r3, r1
 80031bc:	80bb      	strh	r3, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <BSP_LCD_DisplayChar+0x80>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	491b      	ldr	r1, [pc, #108]	; (8003234 <BSP_LCD_DisplayChar+0x84>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3308      	adds	r3, #8
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <BSP_LCD_DisplayChar+0x80>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4c14      	ldr	r4, [pc, #80]	; (8003234 <BSP_LCD_DisplayChar+0x84>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4423      	add	r3, r4
 80031ee:	3308      	adds	r3, #8
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80031f4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <BSP_LCD_DisplayChar+0x80>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <BSP_LCD_DisplayChar+0x84>)
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4423      	add	r3, r4
 8003208:	3308      	adds	r3, #8
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	889b      	ldrh	r3, [r3, #4]
 800320e:	3307      	adds	r3, #7
 8003210:	2b00      	cmp	r3, #0
 8003212:	da00      	bge.n	8003216 <BSP_LCD_DisplayChar+0x66>
 8003214:	3307      	adds	r3, #7
 8003216:	10db      	asrs	r3, r3, #3
 8003218:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800321c:	18ca      	adds	r2, r1, r3
 800321e:	88b9      	ldrh	r1, [r7, #4]
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fcc6 	bl	8003bb4 <DrawChar>
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}
 8003230:	200007e0 	.word	0x200007e0
 8003234:	200007e4 	.word	0x200007e4

08003238 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60ba      	str	r2, [r7, #8]
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	81fb      	strh	r3, [r7, #14]
 8003246:	460b      	mov	r3, r1
 8003248:	81bb      	strh	r3, [r7, #12]
 800324a:	4613      	mov	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800324e:	2301      	movs	r3, #1
 8003250:	83fb      	strh	r3, [r7, #30]
 8003252:	2300      	movs	r3, #0
 8003254:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003262:	e002      	b.n	800326a <BSP_LCD_DisplayStringAt+0x32>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	3301      	adds	r3, #1
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	617a      	str	r2, [r7, #20]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f6      	bne.n	8003264 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003276:	f7ff fe4b 	bl	8002f10 <BSP_LCD_GetXSize>
 800327a:	4601      	mov	r1, r0
 800327c:	4b4b      	ldr	r3, [pc, #300]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	484b      	ldr	r0, [pc, #300]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4403      	add	r3, r0
 800328c:	3308      	adds	r3, #8
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	889b      	ldrh	r3, [r3, #4]
 8003292:	fbb1 f3f3 	udiv	r3, r1, r3
 8003296:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d01c      	beq.n	80032d8 <BSP_LCD_DisplayStringAt+0xa0>
 800329e:	2b03      	cmp	r3, #3
 80032a0:	dc33      	bgt.n	800330a <BSP_LCD_DisplayStringAt+0xd2>
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <BSP_LCD_DisplayStringAt+0x74>
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d019      	beq.n	80032de <BSP_LCD_DisplayStringAt+0xa6>
 80032aa:	e02e      	b.n	800330a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	1ad1      	subs	r1, r2, r3
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	483e      	ldr	r0, [pc, #248]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4403      	add	r3, r0
 80032c2:	3308      	adds	r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	889b      	ldrh	r3, [r3, #4]
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	4413      	add	r3, r2
 80032d4:	83fb      	strh	r3, [r7, #30]
      break;
 80032d6:	e01b      	b.n	8003310 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	83fb      	strh	r3, [r7, #30]
      break;
 80032dc:	e018      	b.n	8003310 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	b299      	uxth	r1, r3
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4831      	ldr	r0, [pc, #196]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4403      	add	r3, r0
 80032f6:	3308      	adds	r3, #8
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	889b      	ldrh	r3, [r3, #4]
 80032fc:	fb11 f303 	smulbb	r3, r1, r3
 8003300:	b29a      	uxth	r2, r3
 8003302:	89fb      	ldrh	r3, [r7, #14]
 8003304:	4413      	add	r3, r2
 8003306:	83fb      	strh	r3, [r7, #30]
      break;
 8003308:	e002      	b.n	8003310 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	83fb      	strh	r3, [r7, #30]
      break;
 800330e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003310:	e01a      	b.n	8003348 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	89b9      	ldrh	r1, [r7, #12]
 8003318:	8bfb      	ldrh	r3, [r7, #30]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff48 	bl	80031b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4922      	ldr	r1, [pc, #136]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3308      	adds	r3, #8
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	889a      	ldrh	r2, [r3, #4]
 8003336:	8bfb      	ldrh	r3, [r7, #30]
 8003338:	4413      	add	r3, r2
 800333a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
    i++;
 8003342:	8bbb      	ldrh	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2dc      	uxtb	r4, r3
 8003356:	f7ff fddb 	bl	8002f10 <BSP_LCD_GetXSize>
 800335a:	8bb9      	ldrh	r1, [r7, #28]
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4d13      	ldr	r5, [pc, #76]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	442b      	add	r3, r5
 800336c:	3308      	adds	r3, #8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	889b      	ldrh	r3, [r3, #4]
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	1ac3      	subs	r3, r0, r3
 8003378:	b299      	uxth	r1, r3
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <BSP_LCD_DisplayStringAt+0x174>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	480c      	ldr	r0, [pc, #48]	; (80033b0 <BSP_LCD_DisplayStringAt+0x178>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4403      	add	r3, r0
 800338a:	3308      	adds	r3, #8
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	889b      	ldrh	r3, [r3, #4]
 8003390:	4299      	cmp	r1, r3
 8003392:	bf2c      	ite	cs
 8003394:	2301      	movcs	r3, #1
 8003396:	2300      	movcc	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4023      	ands	r3, r4
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1b7      	bne.n	8003312 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdb0      	pop	{r4, r5, r7, pc}
 80033ac:	200007e0 	.word	0x200007e0
 80033b0:	200007e4 	.word	0x200007e4

080033b4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80033c0:	f7ff fe54 	bl	800306c <BSP_LCD_GetFont>
 80033c4:	4603      	mov	r3, r0
 80033c6:	88db      	ldrh	r3, [r3, #6]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	fb12 f303 	smulbb	r3, r2, r3
 80033ce:	b299      	uxth	r1, r3
 80033d0:	2303      	movs	r3, #3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	f7ff ff2f 	bl	8003238 <BSP_LCD_DisplayStringAt>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	4603      	mov	r3, r0
 80033ec:	80fb      	strh	r3, [r7, #6]
 80033ee:	460b      	mov	r3, r1
 80033f0:	80bb      	strh	r3, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <BSP_LCD_DrawHLine+0x70>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <BSP_LCD_DrawHLine+0x74>)
 8003400:	2134      	movs	r1, #52	; 0x34
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	335c      	adds	r3, #92	; 0x5c
 800340a:	681c      	ldr	r4, [r3, #0]
 800340c:	f7ff fd80 	bl	8002f10 <BSP_LCD_GetXSize>
 8003410:	4602      	mov	r2, r0
 8003412:	88bb      	ldrh	r3, [r7, #4]
 8003414:	fb03 f202 	mul.w	r2, r3, r2
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4423      	add	r3, r4
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <BSP_LCD_DrawHLine+0x70>)
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	887c      	ldrh	r4, [r7, #2]
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <BSP_LCD_DrawHLine+0x70>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4d0b      	ldr	r5, [pc, #44]	; (800345c <BSP_LCD_DrawHLine+0x78>)
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	442b      	add	r3, r5
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2300      	movs	r3, #0
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2301      	movs	r3, #1
 8003444:	4622      	mov	r2, r4
 8003446:	f000 fc6f 	bl	8003d28 <FillBuffer>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bdb0      	pop	{r4, r5, r7, pc}
 8003452:	bf00      	nop
 8003454:	200007e0 	.word	0x200007e0
 8003458:	200006c8 	.word	0x200006c8
 800345c:	200007e4 	.word	0x200007e4

08003460 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b08b      	sub	sp, #44	; 0x2c
 8003464:	af00      	add	r7, sp, #0
 8003466:	4604      	mov	r4, r0
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	80fb      	strh	r3, [r7, #6]
 8003472:	4603      	mov	r3, r0
 8003474:	80bb      	strh	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	807b      	strh	r3, [r7, #2]
 800347a:	4613      	mov	r3, r2
 800347c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800347e:	2300      	movs	r3, #0
 8003480:	823b      	strh	r3, [r7, #16]
 8003482:	2300      	movs	r3, #0
 8003484:	81fb      	strh	r3, [r7, #14]
 8003486:	2300      	movs	r3, #0
 8003488:	84fb      	strh	r3, [r7, #38]	; 0x26
 800348a:	2300      	movs	r3, #0
 800348c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800348e:	2300      	movs	r3, #0
 8003490:	847b      	strh	r3, [r7, #34]	; 0x22
 8003492:	2300      	movs	r3, #0
 8003494:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003496:	2300      	movs	r3, #0
 8003498:	83fb      	strh	r3, [r7, #30]
 800349a:	2300      	movs	r3, #0
 800349c:	83bb      	strh	r3, [r7, #28]
 800349e:	2300      	movs	r3, #0
 80034a0:	837b      	strh	r3, [r7, #26]
 80034a2:	2300      	movs	r3, #0
 80034a4:	833b      	strh	r3, [r7, #24]
 80034a6:	2300      	movs	r3, #0
 80034a8:	82fb      	strh	r3, [r7, #22]
 80034aa:	2300      	movs	r3, #0
 80034ac:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bfb8      	it	lt
 80034bc:	425b      	neglt	r3, r3
 80034be:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80034c0:	883a      	ldrh	r2, [r7, #0]
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bfb8      	it	lt
 80034ca:	425b      	neglt	r3, r3
 80034cc:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80034d2:	88bb      	ldrh	r3, [r7, #4]
 80034d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d304      	bcc.n	80034e8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	843b      	strh	r3, [r7, #32]
 80034e6:	e005      	b.n	80034f4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80034e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ec:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80034ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f2:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80034f4:	883a      	ldrh	r2, [r7, #0]
 80034f6:	88bb      	ldrh	r3, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d304      	bcc.n	8003506 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003500:	2301      	movs	r3, #1
 8003502:	83bb      	strh	r3, [r7, #28]
 8003504:	e005      	b.n	8003512 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800350c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003510:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003512:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800351a:	429a      	cmp	r2, r3
 800351c:	db10      	blt.n	8003540 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800351e:	2300      	movs	r3, #0
 8003520:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003522:	2300      	movs	r3, #0
 8003524:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003526:	8a3b      	ldrh	r3, [r7, #16]
 8003528:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800352a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800352e:	0fda      	lsrs	r2, r3, #31
 8003530:	4413      	add	r3, r2
 8003532:	105b      	asrs	r3, r3, #1
 8003534:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800353a:	8a3b      	ldrh	r3, [r7, #16]
 800353c:	82bb      	strh	r3, [r7, #20]
 800353e:	e00f      	b.n	8003560 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003540:	2300      	movs	r3, #0
 8003542:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003544:	2300      	movs	r3, #0
 8003546:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800354c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003550:	0fda      	lsrs	r2, r3, #31
 8003552:	4413      	add	r3, r2
 8003554:	105b      	asrs	r3, r3, #1
 8003556:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003558:	8a3b      	ldrh	r3, [r7, #16]
 800355a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003560:	2300      	movs	r3, #0
 8003562:	827b      	strh	r3, [r7, #18]
 8003564:	e037      	b.n	80035d6 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003566:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003568:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <BSP_LCD_DrawLine+0x18c>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4c20      	ldr	r4, [pc, #128]	; (80035f0 <BSP_LCD_DrawLine+0x190>)
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4423      	add	r3, r4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f000 faf3 	bl	8003b68 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003582:	8b3a      	ldrh	r2, [r7, #24]
 8003584:	8afb      	ldrh	r3, [r7, #22]
 8003586:	4413      	add	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800358c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003590:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003594:	429a      	cmp	r2, r3
 8003596:	db0e      	blt.n	80035b6 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003598:	8b3a      	ldrh	r2, [r7, #24]
 800359a:	8b7b      	ldrh	r3, [r7, #26]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80035a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035a6:	4413      	add	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80035ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035ae:	8bfb      	ldrh	r3, [r7, #30]
 80035b0:	4413      	add	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80035b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035b8:	8c3b      	ldrh	r3, [r7, #32]
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80035c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c2:	8bbb      	ldrh	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80035ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	827b      	strh	r3, [r7, #18]
 80035d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	ddc1      	ble.n	8003566 <BSP_LCD_DrawLine+0x106>
  }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	372c      	adds	r7, #44	; 0x2c
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	200007e0 	.word	0x200007e0
 80035f0:	200007e4 	.word	0x200007e4

080035f4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
 80035fe:	460b      	mov	r3, r1
 8003600:	80bb      	strh	r3, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	f1c3 0303 	rsb	r3, r3, #3
 800360e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003618:	e0c7      	b.n	80037aa <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	b29a      	uxth	r2, r3
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4413      	add	r3, r2
 8003622:	b298      	uxth	r0, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	b29b      	uxth	r3, r3
 8003628:	88ba      	ldrh	r2, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b299      	uxth	r1, r3
 800362e:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4c64      	ldr	r4, [pc, #400]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4423      	add	r3, r4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f000 fa91 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	b29b      	uxth	r3, r3
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	b298      	uxth	r0, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	b29b      	uxth	r3, r3
 8003654:	88ba      	ldrh	r2, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	b299      	uxth	r1, r3
 800365a:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4c59      	ldr	r4, [pc, #356]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4423      	add	r3, r4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	f000 fa7b 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	b29a      	uxth	r2, r3
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	4413      	add	r3, r2
 800367a:	b298      	uxth	r0, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	b29b      	uxth	r3, r3
 8003680:	88ba      	ldrh	r2, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	b299      	uxth	r1, r3
 8003686:	4b4e      	ldr	r3, [pc, #312]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4c4e      	ldr	r4, [pc, #312]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4423      	add	r3, r4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 fa65 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b298      	uxth	r0, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	88ba      	ldrh	r2, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	b299      	uxth	r1, r3
 80036b2:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4c43      	ldr	r4, [pc, #268]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4423      	add	r3, r4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f000 fa4f 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	4413      	add	r3, r2
 80036d2:	b298      	uxth	r0, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	88bb      	ldrh	r3, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	b299      	uxth	r1, r3
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4c38      	ldr	r4, [pc, #224]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4423      	add	r3, r4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f000 fa39 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b298      	uxth	r0, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	b29a      	uxth	r2, r3
 8003704:	88bb      	ldrh	r3, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	b299      	uxth	r1, r3
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4c2d      	ldr	r4, [pc, #180]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4423      	add	r3, r4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f000 fa23 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	b29a      	uxth	r2, r3
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4413      	add	r3, r2
 800372a:	b298      	uxth	r0, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	b29a      	uxth	r2, r3
 8003730:	88bb      	ldrh	r3, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	b299      	uxth	r1, r3
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4c22      	ldr	r4, [pc, #136]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4423      	add	r3, r4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f000 fa0d 	bl	8003b68 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	b29b      	uxth	r3, r3
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	b298      	uxth	r0, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	b29a      	uxth	r2, r3
 800375c:	88bb      	ldrh	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	b299      	uxth	r1, r3
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <BSP_LCD_DrawCircle+0x1cc>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4c17      	ldr	r4, [pc, #92]	; (80037c4 <BSP_LCD_DrawCircle+0x1d0>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4423      	add	r3, r4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	f000 f9f7 	bl	8003b68 <BSP_LCD_DrawPixel>

    if (d < 0)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da06      	bge.n	800378e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	009a      	lsls	r2, r3, #2
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4413      	add	r3, r2
 8003788:	3306      	adds	r3, #6
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e00a      	b.n	80037a4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	009a      	lsls	r2, r3, #2
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	330a      	adds	r3, #10
 800379c:	617b      	str	r3, [r7, #20]
      cury--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	3301      	adds	r3, #1
 80037a8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	f67f af33 	bls.w	800361a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd90      	pop	{r4, r7, pc}
 80037be:	bf00      	nop
 80037c0:	200007e0 	.word	0x200007e0
 80037c4:	200007e4 	.word	0x200007e4

080037c8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80037c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af02      	add	r7, sp, #8
 80037d0:	4604      	mov	r4, r0
 80037d2:	4608      	mov	r0, r1
 80037d4:	4611      	mov	r1, r2
 80037d6:	461a      	mov	r2, r3
 80037d8:	4623      	mov	r3, r4
 80037da:	80fb      	strh	r3, [r7, #6]
 80037dc:	4603      	mov	r3, r0
 80037de:	80bb      	strh	r3, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80037ec:	4b20      	ldr	r3, [pc, #128]	; (8003870 <BSP_LCD_FillRect+0xa8>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4920      	ldr	r1, [pc, #128]	; (8003874 <BSP_LCD_FillRect+0xac>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fc02 	bl	8003008 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <BSP_LCD_FillRect+0xa8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <BSP_LCD_FillRect+0xb0>)
 800380a:	2134      	movs	r1, #52	; 0x34
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	335c      	adds	r3, #92	; 0x5c
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	f7ff fb7b 	bl	8002f10 <BSP_LCD_GetXSize>
 800381a:	4602      	mov	r2, r0
 800381c:	88bb      	ldrh	r3, [r7, #4]
 800381e:	fb03 f202 	mul.w	r2, r3, r2
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4423      	add	r3, r4
 800382a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <BSP_LCD_FillRect+0xa8>)
 800382e:	681c      	ldr	r4, [r3, #0]
 8003830:	68fd      	ldr	r5, [r7, #12]
 8003832:	887e      	ldrh	r6, [r7, #2]
 8003834:	f8b7 8000 	ldrh.w	r8, [r7]
 8003838:	f7ff fb6a 	bl	8002f10 <BSP_LCD_GetXSize>
 800383c:	4602      	mov	r2, r0
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	1ad1      	subs	r1, r2, r3
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <BSP_LCD_FillRect+0xa8>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	480b      	ldr	r0, [pc, #44]	; (8003874 <BSP_LCD_FillRect+0xac>)
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	9100      	str	r1, [sp, #0]
 8003858:	4643      	mov	r3, r8
 800385a:	4632      	mov	r2, r6
 800385c:	4629      	mov	r1, r5
 800385e:	4620      	mov	r0, r4
 8003860:	f000 fa62 	bl	8003d28 <FillBuffer>
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386e:	bf00      	nop
 8003870:	200007e0 	.word	0x200007e0
 8003874:	200007e4 	.word	0x200007e4
 8003878:	200006c8 	.word	0x200006c8

0800387c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	80fb      	strh	r3, [r7, #6]
 8003886:	460b      	mov	r3, r1
 8003888:	80bb      	strh	r3, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	f1c3 0303 	rsb	r3, r3, #3
 8003896:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <BSP_LCD_FillCircle+0x138>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4944      	ldr	r1, [pc, #272]	; (80039b8 <BSP_LCD_FillCircle+0x13c>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fba8 	bl	8003008 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80038b8:	e061      	b.n	800397e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d021      	beq.n	8003904 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	88fa      	ldrh	r2, [r7, #6]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b298      	uxth	r0, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	88bb      	ldrh	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	b299      	uxth	r1, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	f7ff fd81 	bl	80033e4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b298      	uxth	r0, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	88ba      	ldrh	r2, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	b299      	uxth	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	f7ff fd70 	bl	80033e4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d021      	beq.n	800394e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b298      	uxth	r0, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	b29b      	uxth	r3, r3
 8003918:	88ba      	ldrh	r2, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	b299      	uxth	r1, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	b29b      	uxth	r3, r3
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	f7ff fd5c 	bl	80033e4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	b29b      	uxth	r3, r3
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	b298      	uxth	r0, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	b29a      	uxth	r2, r3
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	b299      	uxth	r1, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	b29b      	uxth	r3, r3
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	f7ff fd4b 	bl	80033e4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	da06      	bge.n	8003962 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	3306      	adds	r3, #6
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e00a      	b.n	8003978 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	009a      	lsls	r2, r3, #2
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	330a      	adds	r3, #10
 8003970:	617b      	str	r3, [r7, #20]
      cury--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3b01      	subs	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	3301      	adds	r3, #1
 800397c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	429a      	cmp	r2, r3
 8003984:	d999      	bls.n	80038ba <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <BSP_LCD_FillCircle+0x138>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	490b      	ldr	r1, [pc, #44]	; (80039b8 <BSP_LCD_FillCircle+0x13c>)
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb35 	bl	8003008 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	88b9      	ldrh	r1, [r7, #4]
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe25 	bl	80035f4 <BSP_LCD_DrawCircle>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200007e0 	.word	0x200007e0
 80039b8:	200007e4 	.word	0x200007e4

080039bc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	; 0x38
 80039c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a60      	ldr	r2, [pc, #384]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b5e      	ldr	r3, [pc, #376]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	4b4c      	ldr	r3, [pc, #304]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a3c:	f043 0304 	orr.w	r3, r3, #4
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b34      	ldr	r3, [pc, #208]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <BSP_LCD_MspInit+0x190>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003aa2:	f641 0358 	movw	r3, #6232	; 0x1858
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003ab4:	230e      	movs	r3, #14
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abc:	4619      	mov	r1, r3
 8003abe:	4824      	ldr	r0, [pc, #144]	; (8003b50 <BSP_LCD_MspInit+0x194>)
 8003ac0:	f001 f926 	bl	8004d10 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003ac4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4820      	ldr	r0, [pc, #128]	; (8003b54 <BSP_LCD_MspInit+0x198>)
 8003ad2:	f001 f91d 	bl	8004d10 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003ad6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	481d      	ldr	r0, [pc, #116]	; (8003b58 <BSP_LCD_MspInit+0x19c>)
 8003ae4:	f001 f914 	bl	8004d10 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003ae8:	2348      	movs	r3, #72	; 0x48
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af0:	4619      	mov	r1, r3
 8003af2:	481a      	ldr	r0, [pc, #104]	; (8003b5c <BSP_LCD_MspInit+0x1a0>)
 8003af4:	f001 f90c 	bl	8004d10 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b02:	4619      	mov	r1, r3
 8003b04:	4816      	ldr	r0, [pc, #88]	; (8003b60 <BSP_LCD_MspInit+0x1a4>)
 8003b06:	f001 f903 	bl	8004d10 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003b0a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	4619      	mov	r1, r3
 8003b16:	4813      	ldr	r0, [pc, #76]	; (8003b64 <BSP_LCD_MspInit+0x1a8>)
 8003b18:	f001 f8fa 	bl	8004d10 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003b20:	2309      	movs	r3, #9
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480a      	ldr	r0, [pc, #40]	; (8003b54 <BSP_LCD_MspInit+0x198>)
 8003b2c:	f001 f8f0 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003b30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4809      	ldr	r0, [pc, #36]	; (8003b64 <BSP_LCD_MspInit+0x1a8>)
 8003b3e:	f001 f8e7 	bl	8004d10 <HAL_GPIO_Init>
}
 8003b42:	bf00      	nop
 8003b44:	3738      	adds	r7, #56	; 0x38
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40021400 	.word	0x40021400
 8003b64:	40021800 	.word	0x40021800

08003b68 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003b68:	b5b0      	push	{r4, r5, r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	603a      	str	r2, [r7, #0]
 8003b72:	80fb      	strh	r3, [r7, #6]
 8003b74:	460b      	mov	r3, r1
 8003b76:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <BSP_LCD_DrawPixel+0x44>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <BSP_LCD_DrawPixel+0x48>)
 8003b7e:	2134      	movs	r1, #52	; 0x34
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	335c      	adds	r3, #92	; 0x5c
 8003b88:	681c      	ldr	r4, [r3, #0]
 8003b8a:	88bd      	ldrh	r5, [r7, #4]
 8003b8c:	f7ff f9c0 	bl	8002f10 <BSP_LCD_GetXSize>
 8003b90:	4603      	mov	r3, r0
 8003b92:	fb03 f205 	mul.w	r2, r3, r5
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4423      	add	r3, r4
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bdb0      	pop	{r4, r5, r7, pc}
 8003bac:	200007e0 	.word	0x200007e0
 8003bb0:	200006c8 	.word	0x200006c8

08003bb4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	603a      	str	r2, [r7, #0]
 8003bbe:	80fb      	strh	r3, [r7, #6]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <DrawChar+0x16c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4953      	ldr	r1, [pc, #332]	; (8003d24 <DrawChar+0x170>)
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3308      	adds	r3, #8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	88db      	ldrh	r3, [r3, #6]
 8003be6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <DrawChar+0x16c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	494d      	ldr	r1, [pc, #308]	; (8003d24 <DrawChar+0x170>)
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	889b      	ldrh	r3, [r3, #4]
 8003bfe:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003c00:	8a3b      	ldrh	r3, [r7, #16]
 8003c02:	3307      	adds	r3, #7
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da00      	bge.n	8003c0a <DrawChar+0x56>
 8003c08:	3307      	adds	r3, #7
 8003c0a:	10db      	asrs	r3, r3, #3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8a3b      	ldrh	r3, [r7, #16]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e076      	b.n	8003d0e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003c20:	8a3b      	ldrh	r3, [r7, #16]
 8003c22:	3307      	adds	r3, #7
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da00      	bge.n	8003c2a <DrawChar+0x76>
 8003c28:	3307      	adds	r3, #7
 8003c2a:	10db      	asrs	r3, r3, #3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4413      	add	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003c3a:	8a3b      	ldrh	r3, [r7, #16]
 8003c3c:	3307      	adds	r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da00      	bge.n	8003c44 <DrawChar+0x90>
 8003c42:	3307      	adds	r3, #7
 8003c44:	10db      	asrs	r3, r3, #3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d002      	beq.n	8003c50 <DrawChar+0x9c>
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d004      	beq.n	8003c58 <DrawChar+0xa4>
 8003c4e:	e00c      	b.n	8003c6a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
      break;
 8003c56:	e016      	b.n	8003c86 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	3201      	adds	r2, #1
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
      break;
 8003c68:	e00d      	b.n	8003c86 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	041a      	lsls	r2, r3, #16
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3301      	adds	r3, #1
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	3202      	adds	r2, #2
 8003c7e:	7812      	ldrb	r2, [r2, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
      break;
 8003c84:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	e036      	b.n	8003cfa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003c8c:	8a3a      	ldrh	r2, [r7, #16]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad2      	subs	r2, r2, r3
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	4413      	add	r3, r2
 8003c96:	3b01      	subs	r3, #1
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	4413      	add	r3, r2
 8003cb0:	b298      	uxth	r0, r3
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <DrawChar+0x16c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	491b      	ldr	r1, [pc, #108]	; (8003d24 <DrawChar+0x170>)
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	88bb      	ldrh	r3, [r7, #4]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f7ff ff4e 	bl	8003b68 <BSP_LCD_DrawPixel>
 8003ccc:	e012      	b.n	8003cf4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b298      	uxth	r0, r3
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <DrawChar+0x16c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4911      	ldr	r1, [pc, #68]	; (8003d24 <DrawChar+0x170>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3304      	adds	r3, #4
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	88bb      	ldrh	r3, [r7, #4]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7ff ff3a 	bl	8003b68 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	8a3b      	ldrh	r3, [r7, #16]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3c4      	bcc.n	8003c8c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	3301      	adds	r3, #1
 8003d06:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	8a7b      	ldrh	r3, [r7, #18]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d384      	bcc.n	8003c20 <DrawChar+0x6c>
  }
}
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
 8003d1a:	3720      	adds	r7, #32
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200007e0 	.word	0x200007e0
 8003d24:	200007e4 	.word	0x200007e4

08003d28 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <FillBuffer+0x68>)
 8003d38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d3c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <FillBuffer+0x68>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003d44:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <FillBuffer+0x68>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <FillBuffer+0x68>)
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <FillBuffer+0x6c>)
 8003d4e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003d50:	480f      	ldr	r0, [pc, #60]	; (8003d90 <FillBuffer+0x68>)
 8003d52:	f000 fd51 	bl	80047f8 <HAL_DMA2D_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d115      	bne.n	8003d88 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	480c      	ldr	r0, [pc, #48]	; (8003d90 <FillBuffer+0x68>)
 8003d60:	f000 fea8 	bl	8004ab4 <HAL_DMA2D_ConfigLayer>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10e      	bne.n	8003d88 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69f9      	ldr	r1, [r7, #28]
 8003d74:	4806      	ldr	r0, [pc, #24]	; (8003d90 <FillBuffer+0x68>)
 8003d76:	f000 fd88 	bl	800488a <HAL_DMA2D_Start>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003d80:	210a      	movs	r1, #10
 8003d82:	4803      	ldr	r0, [pc, #12]	; (8003d90 <FillBuffer+0x68>)
 8003d84:	f000 fdac 	bl	80048e0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000770 	.word	0x20000770
 8003d94:	4002b000 	.word	0x4002b000

08003d98 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003d9e:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <BSP_SDRAM_Init+0xb0>)
 8003da0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003da4:	2202      	movs	r2, #2
 8003da6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003da8:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003daa:	2207      	movs	r2, #7
 8003dac:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003dae:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003db0:	2204      	movs	r2, #4
 8003db2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003db4:	4b25      	ldr	r3, [pc, #148]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003db6:	2207      	movs	r2, #7
 8003db8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003dc0:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003dc6:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003dc8:	2202      	movs	r2, #2
 8003dca:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003dda:	2204      	movs	r2, #4
 8003ddc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003dde:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003de0:	2210      	movs	r2, #16
 8003de2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003dec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003df0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfe:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003e08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003e12:	f000 f87f 	bl	8003f14 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003e16:	490d      	ldr	r1, [pc, #52]	; (8003e4c <BSP_SDRAM_Init+0xb4>)
 8003e18:	480a      	ldr	r0, [pc, #40]	; (8003e44 <BSP_SDRAM_Init+0xac>)
 8003e1a:	f002 fd53 	bl	80068c4 <HAL_SDRAM_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003e24:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <BSP_SDRAM_Init+0xb8>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e002      	b.n	8003e32 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <BSP_SDRAM_Init+0xb8>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003e32:	f240 506a 	movw	r0, #1386	; 0x56a
 8003e36:	f000 f80d 	bl	8003e54 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <BSP_SDRAM_Init+0xb8>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000800 	.word	0x20000800
 8003e48:	a0000140 	.word	0xa0000140
 8003e4c:	20000834 	.word	0x20000834
 8003e50:	20000054 	.word	0x20000054

08003e54 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e68:	2208      	movs	r2, #8
 8003e6a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7c:	4923      	ldr	r1, [pc, #140]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7e:	4824      	ldr	r0, [pc, #144]	; (8003f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e80:	f002 fd54 	bl	800692c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f000 f9c3 	bl	8004210 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e92:	2208      	movs	r2, #8
 8003e94:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea6:	4919      	ldr	r1, [pc, #100]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea8:	4819      	ldr	r0, [pc, #100]	; (8003f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003eaa:	f002 fd3f 	bl	800692c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003eae:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eca:	4910      	ldr	r1, [pc, #64]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ecc:	4810      	ldr	r0, [pc, #64]	; (8003f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ece:	f002 fd2d 	bl	800692c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003ed2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003ed6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eda:	2204      	movs	r2, #4
 8003edc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef4:	4905      	ldr	r1, [pc, #20]	; (8003f0c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ef6:	4806      	ldr	r0, [pc, #24]	; (8003f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ef8:	f002 fd18 	bl	800692c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4804      	ldr	r0, [pc, #16]	; (8003f10 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f00:	f002 fd49 	bl	8006996 <HAL_SDRAM_ProgramRefreshRate>
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000850 	.word	0x20000850
 8003f10:	20000800 	.word	0x20000800

08003f14 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b090      	sub	sp, #64	; 0x40
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80ec 	beq.w	80040fe <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2a:	4b77      	ldr	r3, [pc, #476]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	4a76      	ldr	r2, [pc, #472]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6393      	str	r3, [r2, #56]	; 0x38
 8003f36:	4b74      	ldr	r3, [pc, #464]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	4b69      	ldr	r3, [pc, #420]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a68      	ldr	r2, [pc, #416]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a61      	ldr	r2, [pc, #388]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a5a      	ldr	r2, [pc, #360]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b58      	ldr	r3, [pc, #352]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a53      	ldr	r2, [pc, #332]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fbc:	f043 0310 	orr.w	r3, r3, #16
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b51      	ldr	r3, [pc, #324]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a4c      	ldr	r2, [pc, #304]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b46      	ldr	r3, [pc, #280]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a45      	ldr	r2, [pc, #276]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <BSP_SDRAM_MspInit+0x1f4>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004006:	2302      	movs	r3, #2
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800400a:	2302      	movs	r3, #2
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004012:	230c      	movs	r3, #12
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004016:	2360      	movs	r3, #96	; 0x60
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800401a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800401e:	4619      	mov	r1, r3
 8004020:	483a      	ldr	r0, [pc, #232]	; (800410c <BSP_SDRAM_MspInit+0x1f8>)
 8004022:	f000 fe75 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004026:	2301      	movs	r3, #1
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800402a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	4837      	ldr	r0, [pc, #220]	; (8004110 <BSP_SDRAM_MspInit+0x1fc>)
 8004032:	f000 fe6d 	bl	8004d10 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004036:	f24c 7303 	movw	r3, #50947	; 0xc703
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800403c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	4834      	ldr	r0, [pc, #208]	; (8004114 <BSP_SDRAM_MspInit+0x200>)
 8004044:	f000 fe64 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004048:	f64f 7383 	movw	r3, #65411	; 0xff83
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800404e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004052:	4619      	mov	r1, r3
 8004054:	4830      	ldr	r0, [pc, #192]	; (8004118 <BSP_SDRAM_MspInit+0x204>)
 8004056:	f000 fe5b 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800405a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004064:	4619      	mov	r1, r3
 8004066:	482d      	ldr	r0, [pc, #180]	; (800411c <BSP_SDRAM_MspInit+0x208>)
 8004068:	f000 fe52 	bl	8004d10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800406c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004076:	4619      	mov	r1, r3
 8004078:	4829      	ldr	r0, [pc, #164]	; (8004120 <BSP_SDRAM_MspInit+0x20c>)
 800407a:	f000 fe49 	bl	8004d10 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800407e:	4b29      	ldr	r3, [pc, #164]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 8004080:	2200      	movs	r2, #0
 8004082:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004084:	4b27      	ldr	r3, [pc, #156]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 8004094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004098:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 800409c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040a0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040a8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80040b0:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040b6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040c0:	2203      	movs	r2, #3
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80040c4:	4b17      	ldr	r3, [pc, #92]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80040ca:	4b16      	ldr	r3, [pc, #88]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <BSP_SDRAM_MspInit+0x214>)
 80040d4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a12      	ldr	r2, [pc, #72]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80040e2:	4810      	ldr	r0, [pc, #64]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040e4:	f000 fa78 	bl	80045d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80040e8:	480e      	ldr	r0, [pc, #56]	; (8004124 <BSP_SDRAM_MspInit+0x210>)
 80040ea:	f000 f9c7 	bl	800447c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80040ee:	2200      	movs	r2, #0
 80040f0:	210f      	movs	r1, #15
 80040f2:	2038      	movs	r0, #56	; 0x38
 80040f4:	f000 f98b 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80040f8:	2038      	movs	r0, #56	; 0x38
 80040fa:	f000 f9a4 	bl	8004446 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80040fe:	bf00      	nop
 8004100:	3740      	adds	r7, #64	; 0x40
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40021400 	.word	0x40021400
 8004120:	40021800 	.word	0x40021800
 8004124:	20000860 	.word	0x20000860
 8004128:	40026410 	.word	0x40026410

0800412c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_Init+0x40>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <HAL_Init+0x40>)
 8004136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_Init+0x40>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_Init+0x40>)
 8004142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_Init+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <HAL_Init+0x40>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004154:	2003      	movs	r0, #3
 8004156:	f000 f94f 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800415a:	200f      	movs	r0, #15
 800415c:	f000 f808 	bl	8004170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004160:	f7fd feb4 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00

08004170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_InitTick+0x54>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_InitTick+0x58>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004186:	fbb3 f3f1 	udiv	r3, r3, r1
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f967 	bl	8004462 <HAL_SYSTICK_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e00e      	b.n	80041bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	d80a      	bhi.n	80041ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a4:	2200      	movs	r2, #0
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	f000 f92f 	bl	800440e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <HAL_InitTick+0x5c>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	2000005c 	.word	0x2000005c
 80041cc:	20000058 	.word	0x20000058

080041d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_IncTick+0x20>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_IncTick+0x24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <HAL_IncTick+0x24>)
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000005c 	.word	0x2000005c
 80041f4:	200008c0 	.word	0x200008c0

080041f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return uwTick;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_GetTick+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	200008c0 	.word	0x200008c0

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff ffee 	bl	80041f8 <HAL_GetTick>
 800421c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004236:	bf00      	nop
 8004238:	f7ff ffde 	bl	80041f8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000005c 	.word	0x2000005c

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4907      	ldr	r1, [pc, #28]	; (80042f4 <__NVIC_EnableIRQ+0x38>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000e100 	.word	0xe000e100

080042f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	; (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf28      	it	cs
 800436a:	2304      	movcs	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	2b06      	cmp	r3, #6
 8004374:	d902      	bls.n	800437c <NVIC_EncodePriority+0x30>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b03      	subs	r3, #3
 800437a:	e000      	b.n	800437e <NVIC_EncodePriority+0x32>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	401a      	ands	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004394:	f04f 31ff 	mov.w	r1, #4294967295
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43d9      	mvns	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	4313      	orrs	r3, r2
         );
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c4:	d301      	bcc.n	80043ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <SysTick_Config+0x40>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d2:	210f      	movs	r1, #15
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	f7ff ff8e 	bl	80042f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <SysTick_Config+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <SysTick_Config+0x40>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000e010 	.word	0xe000e010

080043f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff29 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff3e 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff8e 	bl	800434c <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5d 	bl	80042f8 <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff31 	bl	80042bc <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa2 	bl	80043b4 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004488:	f7ff feb6 	bl	80041f8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e099      	b.n	80045cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b8:	e00f      	b.n	80044da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ba:	f7ff fe9d 	bl	80041f8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d908      	bls.n	80044da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e078      	b.n	80045cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e8      	bne.n	80044ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_DMA_Init+0x158>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b04      	cmp	r3, #4
 8004532:	d107      	bne.n	8004544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	4313      	orrs	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f023 0307 	bic.w	r3, r3, #7
 800455a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b04      	cmp	r3, #4
 800456c:	d117      	bne.n	800459e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f8bd 	bl	8004700 <DMA_CheckFifoParam>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800459a:	2301      	movs	r3, #1
 800459c:	e016      	b.n	80045cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f874 	bl	8004694 <DMA_CalcBaseAndBitshift>
 80045ac:	4603      	mov	r3, r0
 80045ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	223f      	movs	r2, #63	; 0x3f
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	f010803f 	.word	0xf010803f

080045d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e050      	b.n	800468c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d101      	bne.n	80045fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	e048      	b.n	800468c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2221      	movs	r2, #33	; 0x21
 8004638:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f82a 	bl	8004694 <DMA_CalcBaseAndBitshift>
 8004640:	4603      	mov	r3, r0
 8004642:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	223f      	movs	r2, #63	; 0x3f
 800466e:	409a      	lsls	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3b10      	subs	r3, #16
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <DMA_CalcBaseAndBitshift+0x64>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ae:	4a13      	ldr	r2, [pc, #76]	; (80046fc <DMA_CalcBaseAndBitshift+0x68>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d909      	bls.n	80046d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58
 80046d4:	e007      	b.n	80046e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	aaaaaaab 	.word	0xaaaaaaab
 80046fc:	0800f57c 	.word	0x0800f57c

08004700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11f      	bne.n	800475a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d856      	bhi.n	80047ce <DMA_CheckFifoParam+0xce>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <DMA_CheckFifoParam+0x28>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004739 	.word	0x08004739
 800472c:	0800474b 	.word	0x0800474b
 8004730:	08004739 	.word	0x08004739
 8004734:	080047cf 	.word	0x080047cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d046      	beq.n	80047d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e043      	b.n	80047d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004752:	d140      	bne.n	80047d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e03d      	b.n	80047d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	d121      	bne.n	80047a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d837      	bhi.n	80047da <DMA_CheckFifoParam+0xda>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <DMA_CheckFifoParam+0x70>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004781 	.word	0x08004781
 8004774:	08004787 	.word	0x08004787
 8004778:	08004781 	.word	0x08004781
 800477c:	08004799 	.word	0x08004799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e030      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d025      	beq.n	80047de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004796:	e022      	b.n	80047de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047a0:	d11f      	bne.n	80047e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047a6:	e01c      	b.n	80047e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d903      	bls.n	80047b6 <DMA_CheckFifoParam+0xb6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d003      	beq.n	80047bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b4:	e018      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ba:	e015      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e00b      	b.n	80047e6 <DMA_CheckFifoParam+0xe6>
      break;
 80047ce:	bf00      	nop
 80047d0:	e00a      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
 80047d4:	e008      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e006      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e004      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
    }
  } 
  
  return status; 
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e03b      	b.n	8004882 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fb7c 	bl	8001f1c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	f023 0107 	bic.w	r1, r3, #7
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004862:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d1      	ldr	r1, [r2, #12]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	430b      	orrs	r3, r1
 8004870:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af02      	add	r7, sp, #8
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_DMA2D_Start+0x1c>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e018      	b.n	80048d8 <HAL_DMA2D_Start+0x4e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f989 	bl	8004bd8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d056      	beq.n	80049aa <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048fc:	f7ff fc7c 	bl	80041f8 <HAL_GetTick>
 8004900:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004902:	e04b      	b.n	800499c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004912:	2b00      	cmp	r3, #0
 8004914:	d023      	beq.n	800495e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2221      	movs	r2, #33	; 0x21
 8004948:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0a5      	b.n	8004aaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d01a      	beq.n	800499c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7ff fc47 	bl	80041f8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <HAL_DMA2D_PollForTransfer+0x9c>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2203      	movs	r2, #3
 800498c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e086      	b.n	8004aaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ac      	beq.n	8004904 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d061      	beq.n	8004a90 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80049cc:	f7ff fc14 	bl	80041f8 <HAL_GetTick>
 80049d0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80049d2:	e056      	b.n	8004a82 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02e      	beq.n	8004a44 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	f043 0204 	orr.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2229      	movs	r2, #41	; 0x29
 8004a2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e032      	b.n	8004aaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d01a      	beq.n	8004a82 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7ff fbd4 	bl	80041f8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <HAL_DMA2D_PollForTransfer+0x182>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10f      	bne.n	8004a82 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2203      	movs	r2, #3
 8004a72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e013      	b.n	8004aaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0a1      	beq.n	80049d4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2212      	movs	r2, #18
 8004a96:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA2D_ConfigLayer+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e079      	b.n	8004bc8 <HAL_DMA2D_ConfigLayer+0x114>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3318      	adds	r3, #24
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004afe:	4b35      	ldr	r3, [pc, #212]	; (8004bd4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004b00:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b0a      	cmp	r3, #10
 8004b08:	d003      	beq.n	8004b12 <HAL_DMA2D_ConfigLayer+0x5e>
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b09      	cmp	r3, #9
 8004b10:	d107      	bne.n	8004b22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e005      	b.n	8004b2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d120      	bne.n	8004b76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	ea02 0103 	and.w	r1, r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b0a      	cmp	r3, #10
 8004b5c:	d003      	beq.n	8004b66 <HAL_DMA2D_ConfigLayer+0xb2>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b09      	cmp	r3, #9
 8004b64:	d127      	bne.n	8004bb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28
 8004b74:	e01f      	b.n	8004bb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	ea02 0103 	and.w	r1, r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b0a      	cmp	r3, #10
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA2D_ConfigLayer+0xf4>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	d106      	bne.n	8004bb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004bb4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	ff03000f 	.word	0xff03000f

08004bd8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b08b      	sub	sp, #44	; 0x2c
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	041a      	lsls	r2, r3, #16
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c10:	d174      	bne.n	8004cfc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c20:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c28:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	e053      	b.n	8004cf2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d106      	bne.n	8004c60 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	e048      	b.n	8004cf2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d111      	bne.n	8004c8c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	0cdb      	lsrs	r3, r3, #19
 8004c6c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	0a9b      	lsrs	r3, r3, #10
 8004c72:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	08db      	lsrs	r3, r3, #3
 8004c78:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	02db      	lsls	r3, r3, #11
 8004c82:	4313      	orrs	r3, r2
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	e032      	b.n	8004cf2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d117      	bne.n	8004cc4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	0fdb      	lsrs	r3, r3, #31
 8004c98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	0cdb      	lsrs	r3, r3, #19
 8004c9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	0adb      	lsrs	r3, r3, #11
 8004ca4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	03db      	lsls	r3, r3, #15
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	e016      	b.n	8004cf2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	0f1b      	lsrs	r3, r3, #28
 8004cc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	0d1b      	lsrs	r3, r3, #20
 8004cce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	0b1b      	lsrs	r3, r3, #12
 8004cd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	011a      	lsls	r2, r3, #4
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	4313      	orrs	r3, r2
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004cfa:	e003      	b.n	8004d04 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	60da      	str	r2, [r3, #12]
}
 8004d04:	bf00      	nop
 8004d06:	372c      	adds	r7, #44	; 0x2c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e177      	b.n	800501c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	f040 8166 	bne.w	8005016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d005      	beq.n	8004d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d130      	bne.n	8004dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 0201 	and.w	r2, r3, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d017      	beq.n	8004e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d123      	bne.n	8004e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	08da      	lsrs	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3208      	adds	r2, #8
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0203 	and.w	r2, r3, #3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80c0 	beq.w	8005016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b66      	ldr	r3, [pc, #408]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a65      	ldr	r2, [pc, #404]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b63      	ldr	r3, [pc, #396]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eb2:	4a61      	ldr	r2, [pc, #388]	; (8005038 <HAL_GPIO_Init+0x328>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	; (800503c <HAL_GPIO_Init+0x32c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d037      	beq.n	8004f4e <HAL_GPIO_Init+0x23e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a57      	ldr	r2, [pc, #348]	; (8005040 <HAL_GPIO_Init+0x330>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_GPIO_Init+0x23a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a56      	ldr	r2, [pc, #344]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02b      	beq.n	8004f46 <HAL_GPIO_Init+0x236>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a55      	ldr	r2, [pc, #340]	; (8005048 <HAL_GPIO_Init+0x338>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d025      	beq.n	8004f42 <HAL_GPIO_Init+0x232>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a54      	ldr	r2, [pc, #336]	; (800504c <HAL_GPIO_Init+0x33c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01f      	beq.n	8004f3e <HAL_GPIO_Init+0x22e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a53      	ldr	r2, [pc, #332]	; (8005050 <HAL_GPIO_Init+0x340>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d019      	beq.n	8004f3a <HAL_GPIO_Init+0x22a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a52      	ldr	r2, [pc, #328]	; (8005054 <HAL_GPIO_Init+0x344>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_GPIO_Init+0x226>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a51      	ldr	r2, [pc, #324]	; (8005058 <HAL_GPIO_Init+0x348>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00d      	beq.n	8004f32 <HAL_GPIO_Init+0x222>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a50      	ldr	r2, [pc, #320]	; (800505c <HAL_GPIO_Init+0x34c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <HAL_GPIO_Init+0x21e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a4f      	ldr	r2, [pc, #316]	; (8005060 <HAL_GPIO_Init+0x350>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d101      	bne.n	8004f2a <HAL_GPIO_Init+0x21a>
 8004f26:	2309      	movs	r3, #9
 8004f28:	e012      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f2a:	230a      	movs	r3, #10
 8004f2c:	e010      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	e00e      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f32:	2307      	movs	r3, #7
 8004f34:	e00c      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f36:	2306      	movs	r3, #6
 8004f38:	e00a      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	e008      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f42:	2303      	movs	r3, #3
 8004f44:	e004      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e002      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_GPIO_Init+0x240>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	f002 0203 	and.w	r2, r2, #3
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	4093      	lsls	r3, r2
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f60:	4935      	ldr	r1, [pc, #212]	; (8005038 <HAL_GPIO_Init+0x328>)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	089b      	lsrs	r3, r3, #2
 8004f66:	3302      	adds	r3, #2
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f6e:	4b3d      	ldr	r3, [pc, #244]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f92:	4a34      	ldr	r2, [pc, #208]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f98:	4b32      	ldr	r3, [pc, #200]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fbc:	4a29      	ldr	r2, [pc, #164]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fe6:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_GPIO_Init+0x354>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <HAL_GPIO_Init+0x354>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3301      	adds	r3, #1
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	f67f ae84 	bls.w	8004d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	40013800 	.word	0x40013800
 800503c:	40020000 	.word	0x40020000
 8005040:	40020400 	.word	0x40020400
 8005044:	40020800 	.word	0x40020800
 8005048:	40020c00 	.word	0x40020c00
 800504c:	40021000 	.word	0x40021000
 8005050:	40021400 	.word	0x40021400
 8005054:	40021800 	.word	0x40021800
 8005058:	40021c00 	.word	0x40021c00
 800505c:	40022000 	.word	0x40022000
 8005060:	40022400 	.word	0x40022400
 8005064:	40013c00 	.word	0x40013c00

08005068 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e0d9      	b.n	8005238 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005084:	2201      	movs	r2, #1
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	429a      	cmp	r2, r3
 800509c:	f040 80c9 	bne.w	8005232 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80050a0:	4a6b      	ldr	r2, [pc, #428]	; (8005250 <HAL_GPIO_DeInit+0x1e8>)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	3302      	adds	r3, #2
 80050a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	220f      	movs	r2, #15
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a63      	ldr	r2, [pc, #396]	; (8005254 <HAL_GPIO_DeInit+0x1ec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d037      	beq.n	800513a <HAL_GPIO_DeInit+0xd2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a62      	ldr	r2, [pc, #392]	; (8005258 <HAL_GPIO_DeInit+0x1f0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d031      	beq.n	8005136 <HAL_GPIO_DeInit+0xce>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_GPIO_DeInit+0x1f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d02b      	beq.n	8005132 <HAL_GPIO_DeInit+0xca>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a60      	ldr	r2, [pc, #384]	; (8005260 <HAL_GPIO_DeInit+0x1f8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d025      	beq.n	800512e <HAL_GPIO_DeInit+0xc6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a5f      	ldr	r2, [pc, #380]	; (8005264 <HAL_GPIO_DeInit+0x1fc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <HAL_GPIO_DeInit+0xc2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a5e      	ldr	r2, [pc, #376]	; (8005268 <HAL_GPIO_DeInit+0x200>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d019      	beq.n	8005126 <HAL_GPIO_DeInit+0xbe>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a5d      	ldr	r2, [pc, #372]	; (800526c <HAL_GPIO_DeInit+0x204>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_GPIO_DeInit+0xba>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a5c      	ldr	r2, [pc, #368]	; (8005270 <HAL_GPIO_DeInit+0x208>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00d      	beq.n	800511e <HAL_GPIO_DeInit+0xb6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a5b      	ldr	r2, [pc, #364]	; (8005274 <HAL_GPIO_DeInit+0x20c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <HAL_GPIO_DeInit+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a5a      	ldr	r2, [pc, #360]	; (8005278 <HAL_GPIO_DeInit+0x210>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_GPIO_DeInit+0xae>
 8005112:	2309      	movs	r3, #9
 8005114:	e012      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 8005116:	230a      	movs	r3, #10
 8005118:	e010      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 800511a:	2308      	movs	r3, #8
 800511c:	e00e      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 800511e:	2307      	movs	r3, #7
 8005120:	e00c      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 8005122:	2306      	movs	r3, #6
 8005124:	e00a      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 8005126:	2305      	movs	r3, #5
 8005128:	e008      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 800512a:	2304      	movs	r3, #4
 800512c:	e006      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 800512e:	2303      	movs	r3, #3
 8005130:	e004      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 8005132:	2302      	movs	r3, #2
 8005134:	e002      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_GPIO_DeInit+0xd4>
 800513a:	2300      	movs	r3, #0
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	f002 0203 	and.w	r2, r2, #3
 8005142:	0092      	lsls	r2, r2, #2
 8005144:	4093      	lsls	r3, r2
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	429a      	cmp	r2, r3
 800514a:	d132      	bne.n	80051b2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800514c:	4b4b      	ldr	r3, [pc, #300]	; (800527c <HAL_GPIO_DeInit+0x214>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	43db      	mvns	r3, r3
 8005154:	4949      	ldr	r1, [pc, #292]	; (800527c <HAL_GPIO_DeInit+0x214>)
 8005156:	4013      	ands	r3, r2
 8005158:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_GPIO_DeInit+0x214>)
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	43db      	mvns	r3, r3
 8005162:	4946      	ldr	r1, [pc, #280]	; (800527c <HAL_GPIO_DeInit+0x214>)
 8005164:	4013      	ands	r3, r2
 8005166:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005168:	4b44      	ldr	r3, [pc, #272]	; (800527c <HAL_GPIO_DeInit+0x214>)
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	43db      	mvns	r3, r3
 8005170:	4942      	ldr	r1, [pc, #264]	; (800527c <HAL_GPIO_DeInit+0x214>)
 8005172:	4013      	ands	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005176:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_GPIO_DeInit+0x214>)
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	43db      	mvns	r3, r3
 800517e:	493f      	ldr	r1, [pc, #252]	; (800527c <HAL_GPIO_DeInit+0x214>)
 8005180:	4013      	ands	r3, r2
 8005182:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	220f      	movs	r2, #15
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005194:	4a2e      	ldr	r2, [pc, #184]	; (8005250 <HAL_GPIO_DeInit+0x1e8>)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	3302      	adds	r3, #2
 800519c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	482a      	ldr	r0, [pc, #168]	; (8005250 <HAL_GPIO_DeInit+0x1e8>)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	400a      	ands	r2, r1
 80051ac:	3302      	adds	r3, #2
 80051ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2103      	movs	r1, #3
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	08da      	lsrs	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3208      	adds	r2, #8
 80051d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	220f      	movs	r2, #15
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	08d2      	lsrs	r2, r2, #3
 80051e8:	4019      	ands	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3208      	adds	r2, #8
 80051ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	2103      	movs	r1, #3
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	401a      	ands	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	2101      	movs	r1, #1
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	2103      	movs	r1, #3
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3301      	adds	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b0f      	cmp	r3, #15
 800523c:	f67f af22 	bls.w	8005084 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40013800 	.word	0x40013800
 8005254:	40020000 	.word	0x40020000
 8005258:	40020400 	.word	0x40020400
 800525c:	40020800 	.word	0x40020800
 8005260:	40020c00 	.word	0x40020c00
 8005264:	40021000 	.word	0x40021000
 8005268:	40021400 	.word	0x40021400
 800526c:	40021800 	.word	0x40021800
 8005270:	40021c00 	.word	0x40021c00
 8005274:	40022000 	.word	0x40022000
 8005278:	40022400 	.word	0x40022400
 800527c:	40013c00 	.word	0x40013c00

08005280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
 800528c:	4613      	mov	r3, r2
 800528e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005290:	787b      	ldrb	r3, [r7, #1]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005296:	887a      	ldrh	r2, [r7, #2]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800529c:	e003      	b.n	80052a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800529e:	887b      	ldrh	r3, [r7, #2]
 80052a0:	041a      	lsls	r2, r3, #16
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	619a      	str	r2, [r3, #24]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052be:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d006      	beq.n	80052d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052ca:	4a05      	ldr	r2, [pc, #20]	; (80052e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f806 	bl	80052e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e12b      	b.n	8005566 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc fe1c 	bl	8001f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800534e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800535e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005360:	f001 f8dc 	bl	800651c <HAL_RCC_GetPCLK1Freq>
 8005364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4a81      	ldr	r2, [pc, #516]	; (8005570 <HAL_I2C_Init+0x274>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d807      	bhi.n	8005380 <HAL_I2C_Init+0x84>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a80      	ldr	r2, [pc, #512]	; (8005574 <HAL_I2C_Init+0x278>)
 8005374:	4293      	cmp	r3, r2
 8005376:	bf94      	ite	ls
 8005378:	2301      	movls	r3, #1
 800537a:	2300      	movhi	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	e006      	b.n	800538e <HAL_I2C_Init+0x92>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a7d      	ldr	r2, [pc, #500]	; (8005578 <HAL_I2C_Init+0x27c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	bf94      	ite	ls
 8005388:	2301      	movls	r3, #1
 800538a:	2300      	movhi	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0e7      	b.n	8005566 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a78      	ldr	r2, [pc, #480]	; (800557c <HAL_I2C_Init+0x280>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0c9b      	lsrs	r3, r3, #18
 80053a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a6a      	ldr	r2, [pc, #424]	; (8005570 <HAL_I2C_Init+0x274>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d802      	bhi.n	80053d0 <HAL_I2C_Init+0xd4>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	3301      	adds	r3, #1
 80053ce:	e009      	b.n	80053e4 <HAL_I2C_Init+0xe8>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	4a69      	ldr	r2, [pc, #420]	; (8005580 <HAL_I2C_Init+0x284>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	099b      	lsrs	r3, r3, #6
 80053e2:	3301      	adds	r3, #1
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	495c      	ldr	r1, [pc, #368]	; (8005570 <HAL_I2C_Init+0x274>)
 8005400:	428b      	cmp	r3, r1
 8005402:	d819      	bhi.n	8005438 <HAL_I2C_Init+0x13c>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1e59      	subs	r1, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005418:	400b      	ands	r3, r1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_I2C_Init+0x138>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1e59      	subs	r1, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fbb1 f3f3 	udiv	r3, r1, r3
 800542c:	3301      	adds	r3, #1
 800542e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005432:	e051      	b.n	80054d8 <HAL_I2C_Init+0x1dc>
 8005434:	2304      	movs	r3, #4
 8005436:	e04f      	b.n	80054d8 <HAL_I2C_Init+0x1dc>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d111      	bne.n	8005464 <HAL_I2C_Init+0x168>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1e58      	subs	r0, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	440b      	add	r3, r1
 800544e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005452:	3301      	adds	r3, #1
 8005454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005458:	2b00      	cmp	r3, #0
 800545a:	bf0c      	ite	eq
 800545c:	2301      	moveq	r3, #1
 800545e:	2300      	movne	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e012      	b.n	800548a <HAL_I2C_Init+0x18e>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1e58      	subs	r0, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	0099      	lsls	r1, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	fbb0 f3f3 	udiv	r3, r0, r3
 800547a:	3301      	adds	r3, #1
 800547c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Init+0x196>
 800548e:	2301      	movs	r3, #1
 8005490:	e022      	b.n	80054d8 <HAL_I2C_Init+0x1dc>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10e      	bne.n	80054b8 <HAL_I2C_Init+0x1bc>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1e58      	subs	r0, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	440b      	add	r3, r1
 80054a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ac:	3301      	adds	r3, #1
 80054ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b6:	e00f      	b.n	80054d8 <HAL_I2C_Init+0x1dc>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1e58      	subs	r0, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	0099      	lsls	r1, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	6809      	ldr	r1, [r1, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6911      	ldr	r1, [r2, #16]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68d2      	ldr	r2, [r2, #12]
 8005512:	4311      	orrs	r1, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	430b      	orrs	r3, r1
 800551a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	000186a0 	.word	0x000186a0
 8005574:	001e847f 	.word	0x001e847f
 8005578:	003d08ff 	.word	0x003d08ff
 800557c:	431bde83 	.word	0x431bde83
 8005580:	10624dd3 	.word	0x10624dd3

08005584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b20      	cmp	r3, #32
 8005598:	d129      	bne.n	80055ee <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	; 0x24
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0210 	bic.w	r2, r2, #16
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b20      	cmp	r3, #32
 8005614:	d12a      	bne.n	800566c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2224      	movs	r2, #36	; 0x24
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	f023 030f 	bic.w	r3, r3, #15
 800563c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	b29a      	uxth	r2, r3
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	4313      	orrs	r3, r2
 8005646:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	89fa      	ldrh	r2, [r7, #14]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e0bf      	b.n	800580e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fc fcc6 	bl	8002034 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b4a      	ldr	r3, [pc, #296]	; (8005818 <HAL_LTDC_Init+0x19c>)
 80056f0:	400b      	ands	r3, r1
 80056f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	041b      	lsls	r3, r3, #16
 80056fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <HAL_LTDC_Init+0x19c>)
 800571e:	400b      	ands	r3, r1
 8005720:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68d9      	ldr	r1, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b33      	ldr	r3, [pc, #204]	; (8005818 <HAL_LTDC_Init+0x19c>)
 800574c:	400b      	ands	r3, r1
 800574e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6919      	ldr	r1, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6959      	ldr	r1, [r3, #20]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b27      	ldr	r3, [pc, #156]	; (8005818 <HAL_LTDC_Init+0x19c>)
 800577a:	400b      	ands	r3, r1
 800577c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6959      	ldr	r1, [r3, #20]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80057be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0206 	orr.w	r2, r2, #6
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	f000f800 	.word	0xf000f800

0800581c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_LTDC_ConfigLayer+0x1a>
 8005832:	2302      	movs	r3, #2
 8005834:	e02c      	b.n	8005890 <HAL_LTDC_ConfigLayer+0x74>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2134      	movs	r1, #52	; 0x34
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4614      	mov	r4, r2
 800585a:	461d      	mov	r5, r3
 800585c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f83b 	bl	80058ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2201      	movs	r2, #1
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bdb0      	pop	{r4, r5, r7, pc}

08005898 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_LTDC_EnableDither+0x16>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e016      	b.n	80058dc <HAL_LTDC_EnableDither+0x44>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <HAL_LTDC_EnableDither+0x50>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	4a09      	ldr	r2, [pc, #36]	; (80058e8 <HAL_LTDC_EnableDither+0x50>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40016800 	.word	0x40016800

080058ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b089      	sub	sp, #36	; 0x24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	4413      	add	r3, r2
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	01db      	lsls	r3, r3, #7
 8005918:	4413      	add	r3, r2
 800591a:	3384      	adds	r3, #132	; 0x84
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	4611      	mov	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	01d2      	lsls	r2, r2, #7
 8005928:	440a      	add	r2, r1
 800592a:	3284      	adds	r2, #132	; 0x84
 800592c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005930:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005942:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005944:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	440b      	add	r3, r1
 8005952:	3384      	adds	r3, #132	; 0x84
 8005954:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800595a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596a:	4413      	add	r3, r2
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	01db      	lsls	r3, r3, #7
 800597a:	4413      	add	r3, r2
 800597c:	3384      	adds	r3, #132	; 0x84
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	4611      	mov	r1, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	01d2      	lsls	r2, r2, #7
 800598a:	440a      	add	r2, r1
 800598c:	3284      	adds	r2, #132	; 0x84
 800598e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005992:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059a2:	4413      	add	r3, r2
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4619      	mov	r1, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	01db      	lsls	r3, r3, #7
 80059b0:	440b      	add	r3, r1
 80059b2:	3384      	adds	r3, #132	; 0x84
 80059b4:	4619      	mov	r1, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	01db      	lsls	r3, r3, #7
 80059c6:	4413      	add	r3, r2
 80059c8:	3384      	adds	r3, #132	; 0x84
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	4611      	mov	r1, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	01d2      	lsls	r2, r2, #7
 80059d6:	440a      	add	r2, r1
 80059d8:	3284      	adds	r2, #132	; 0x84
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4413      	add	r3, r2
 80059ec:	3384      	adds	r3, #132	; 0x84
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3384      	adds	r3, #132	; 0x84
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	01db      	lsls	r3, r3, #7
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3384      	adds	r3, #132	; 0x84
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	440b      	add	r3, r1
 8005a52:	3384      	adds	r3, #132	; 0x84
 8005a54:	4619      	mov	r1, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	4413      	add	r3, r2
 8005a68:	3384      	adds	r3, #132	; 0x84
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	4611      	mov	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	01d2      	lsls	r2, r2, #7
 8005a76:	440a      	add	r2, r1
 8005a78:	3284      	adds	r2, #132	; 0x84
 8005a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3384      	adds	r3, #132	; 0x84
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	01db      	lsls	r3, r3, #7
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3384      	adds	r3, #132	; 0x84
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	01d2      	lsls	r2, r2, #7
 8005ab0:	440a      	add	r2, r1
 8005ab2:	3284      	adds	r2, #132	; 0x84
 8005ab4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ab8:	f023 0307 	bic.w	r3, r3, #7
 8005abc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	6809      	ldr	r1, [r1, #0]
 8005aca:	4608      	mov	r0, r1
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	01c9      	lsls	r1, r1, #7
 8005ad0:	4401      	add	r1, r0
 8005ad2:	3184      	adds	r1, #132	; 0x84
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	01db      	lsls	r3, r3, #7
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3384      	adds	r3, #132	; 0x84
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	4413      	add	r3, r2
 8005af4:	3384      	adds	r3, #132	; 0x84
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	01db      	lsls	r3, r3, #7
 8005b06:	4413      	add	r3, r2
 8005b08:	3384      	adds	r3, #132	; 0x84
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e01b      	b.n	8005b58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d102      	bne.n	8005b2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	e014      	b.n	8005b58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d00b      	beq.n	8005b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d007      	beq.n	8005b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d003      	beq.n	8005b4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b4a:	2b07      	cmp	r3, #7
 8005b4c:	d102      	bne.n	8005b54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	e001      	b.n	8005b58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005b54:	2301      	movs	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	01db      	lsls	r3, r3, #7
 8005b62:	4413      	add	r3, r2
 8005b64:	3384      	adds	r3, #132	; 0x84
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	01d2      	lsls	r2, r2, #7
 8005b72:	440a      	add	r2, r1
 8005b74:	3284      	adds	r2, #132	; 0x84
 8005b76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1acb      	subs	r3, r1, r3
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	6809      	ldr	r1, [r1, #0]
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	01c9      	lsls	r1, r1, #7
 8005ba4:	4401      	add	r1, r0
 8005ba6:	3184      	adds	r1, #132	; 0x84
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3384      	adds	r3, #132	; 0x84
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	01d2      	lsls	r2, r2, #7
 8005bc6:	440a      	add	r2, r1
 8005bc8:	3284      	adds	r2, #132	; 0x84
 8005bca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	01db      	lsls	r3, r3, #7
 8005bde:	4413      	add	r3, r2
 8005be0:	3384      	adds	r3, #132	; 0x84
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3384      	adds	r3, #132	; 0x84
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	01d2      	lsls	r2, r2, #7
 8005c04:	440a      	add	r2, r1
 8005c06:	3284      	adds	r2, #132	; 0x84
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6013      	str	r3, [r2, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3724      	adds	r7, #36	; 0x24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	4b20      	ldr	r3, [pc, #128]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	; 0x40
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_PWREx_EnableOverDrive+0x90>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c48:	f7fe fad6 	bl	80041f8 <HAL_GetTick>
 8005c4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c4e:	e009      	b.n	8005c64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c50:	f7fe fad2 	bl	80041f8 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c5e:	d901      	bls.n	8005c64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01f      	b.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d1ee      	bne.n	8005c50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c72:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c78:	f7fe fabe 	bl	80041f8 <HAL_GetTick>
 8005c7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c7e:	e009      	b.n	8005c94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c80:	f7fe faba 	bl	80041f8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c8e:	d901      	bls.n	8005c94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e007      	b.n	8005ca4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca0:	d1ee      	bne.n	8005c80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	420e0040 	.word	0x420e0040
 8005cb4:	40007000 	.word	0x40007000
 8005cb8:	420e0044 	.word	0x420e0044

08005cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e267      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d075      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cda:	4b88      	ldr	r3, [pc, #544]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d00c      	beq.n	8005d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d112      	bne.n	8005d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf2:	4b82      	ldr	r3, [pc, #520]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cfe:	d10b      	bne.n	8005d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d00:	4b7e      	ldr	r3, [pc, #504]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d05b      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x108>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d157      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e242      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d20:	d106      	bne.n	8005d30 <HAL_RCC_OscConfig+0x74>
 8005d22:	4b76      	ldr	r3, [pc, #472]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a75      	ldr	r2, [pc, #468]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e01d      	b.n	8005d6c <HAL_RCC_OscConfig+0xb0>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x98>
 8005d3a:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6f      	ldr	r2, [pc, #444]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6c      	ldr	r2, [pc, #432]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e00b      	b.n	8005d6c <HAL_RCC_OscConfig+0xb0>
 8005d54:	4b69      	ldr	r3, [pc, #420]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a68      	ldr	r2, [pc, #416]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	4b66      	ldr	r3, [pc, #408]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a65      	ldr	r2, [pc, #404]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d013      	beq.n	8005d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fe fa40 	bl	80041f8 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fe fa3c 	bl	80041f8 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	; 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e207      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	4b5b      	ldr	r3, [pc, #364]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f0      	beq.n	8005d7c <HAL_RCC_OscConfig+0xc0>
 8005d9a:	e014      	b.n	8005dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fe fa2c 	bl	80041f8 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da4:	f7fe fa28 	bl	80041f8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e1f3      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db6:	4b51      	ldr	r3, [pc, #324]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0xe8>
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d063      	beq.n	8005e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dd2:	4b4a      	ldr	r3, [pc, #296]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dde:	4b47      	ldr	r3, [pc, #284]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d11c      	bne.n	8005e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dea:	4b44      	ldr	r3, [pc, #272]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d116      	bne.n	8005e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df6:	4b41      	ldr	r3, [pc, #260]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_RCC_OscConfig+0x152>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d001      	beq.n	8005e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e1c7      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0e:	4b3b      	ldr	r3, [pc, #236]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4937      	ldr	r1, [pc, #220]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e22:	e03a      	b.n	8005e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d020      	beq.n	8005e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e2c:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <HAL_RCC_OscConfig+0x244>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fe f9e1 	bl	80041f8 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e3a:	f7fe f9dd 	bl	80041f8 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e1a8      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4925      	ldr	r1, [pc, #148]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]
 8005e6c:	e015      	b.n	8005e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e6e:	4b24      	ldr	r3, [pc, #144]	; (8005f00 <HAL_RCC_OscConfig+0x244>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fe f9c0 	bl	80041f8 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e7c:	f7fe f9bc 	bl	80041f8 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e187      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8e:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d036      	beq.n	8005f14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HAL_RCC_OscConfig+0x248>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb4:	f7fe f9a0 	bl	80041f8 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebc:	f7fe f99c 	bl	80041f8 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e167      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_OscConfig+0x240>)
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x200>
 8005eda:	e01b      	b.n	8005f14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RCC_OscConfig+0x248>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee2:	f7fe f989 	bl	80041f8 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee8:	e00e      	b.n	8005f08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eea:	f7fe f985 	bl	80041f8 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d907      	bls.n	8005f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e150      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
 8005efc:	40023800 	.word	0x40023800
 8005f00:	42470000 	.word	0x42470000
 8005f04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	4b88      	ldr	r3, [pc, #544]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ea      	bne.n	8005eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8097 	beq.w	8006050 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f26:	4b81      	ldr	r3, [pc, #516]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b7d      	ldr	r3, [pc, #500]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a7c      	ldr	r2, [pc, #496]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b7a      	ldr	r3, [pc, #488]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f52:	4b77      	ldr	r3, [pc, #476]	; (8006130 <HAL_RCC_OscConfig+0x474>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d118      	bne.n	8005f90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5e:	4b74      	ldr	r3, [pc, #464]	; (8006130 <HAL_RCC_OscConfig+0x474>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a73      	ldr	r2, [pc, #460]	; (8006130 <HAL_RCC_OscConfig+0x474>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fe f945 	bl	80041f8 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f72:	f7fe f941 	bl	80041f8 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e10c      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f84:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <HAL_RCC_OscConfig+0x474>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x2ea>
 8005f98:	4b64      	ldr	r3, [pc, #400]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a63      	ldr	r2, [pc, #396]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	e01c      	b.n	8005fe0 <HAL_RCC_OscConfig+0x324>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x30c>
 8005fae:	4b5f      	ldr	r3, [pc, #380]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	4a5e      	ldr	r2, [pc, #376]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fb4:	f043 0304 	orr.w	r3, r3, #4
 8005fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fba:	4b5c      	ldr	r3, [pc, #368]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4a5b      	ldr	r2, [pc, #364]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_OscConfig+0x324>
 8005fc8:	4b58      	ldr	r3, [pc, #352]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4a57      	ldr	r2, [pc, #348]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd4:	4b55      	ldr	r3, [pc, #340]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	4a54      	ldr	r2, [pc, #336]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8005fda:	f023 0304 	bic.w	r3, r3, #4
 8005fde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fe f906 	bl	80041f8 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fe f902 	bl	80041f8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e0cb      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006006:	4b49      	ldr	r3, [pc, #292]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0ee      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x334>
 8006012:	e014      	b.n	800603e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006014:	f7fe f8f0 	bl	80041f8 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601a:	e00a      	b.n	8006032 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601c:	f7fe f8ec 	bl	80041f8 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e0b5      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006032:	4b3e      	ldr	r3, [pc, #248]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1ee      	bne.n	800601c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d105      	bne.n	8006050 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006044:	4b39      	ldr	r3, [pc, #228]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	4a38      	ldr	r2, [pc, #224]	; (800612c <HAL_RCC_OscConfig+0x470>)
 800604a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a1 	beq.w	800619c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800605a:	4b34      	ldr	r3, [pc, #208]	; (800612c <HAL_RCC_OscConfig+0x470>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b08      	cmp	r3, #8
 8006064:	d05c      	beq.n	8006120 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d141      	bne.n	80060f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606e:	4b31      	ldr	r3, [pc, #196]	; (8006134 <HAL_RCC_OscConfig+0x478>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006074:	f7fe f8c0 	bl	80041f8 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607c:	f7fe f8bc 	bl	80041f8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e087      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	019b      	lsls	r3, r3, #6
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	3b01      	subs	r3, #1
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	491b      	ldr	r1, [pc, #108]	; (800612c <HAL_RCC_OscConfig+0x470>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c4:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <HAL_RCC_OscConfig+0x478>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ca:	f7fe f895 	bl	80041f8 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fe f891 	bl	80041f8 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e05c      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <HAL_RCC_OscConfig+0x470>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0x416>
 80060f0:	e054      	b.n	800619c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <HAL_RCC_OscConfig+0x478>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fe f87e 	bl	80041f8 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006100:	f7fe f87a 	bl	80041f8 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e045      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_RCC_OscConfig+0x470>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x444>
 800611e:	e03d      	b.n	800619c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e038      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
 800612c:	40023800 	.word	0x40023800
 8006130:	40007000 	.word	0x40007000
 8006134:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_RCC_OscConfig+0x4ec>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d028      	beq.n	8006198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d121      	bne.n	8006198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d11a      	bne.n	8006198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006168:	4013      	ands	r3, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800616e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006170:	4293      	cmp	r3, r2
 8006172:	d111      	bne.n	8006198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	3b01      	subs	r3, #1
 8006182:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006184:	429a      	cmp	r2, r3
 8006186:	d107      	bne.n	8006198 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d001      	beq.n	800619c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800

080061ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0cc      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061c0:	4b68      	ldr	r3, [pc, #416]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d90c      	bls.n	80061e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ce:	4b65      	ldr	r3, [pc, #404]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d6:	4b63      	ldr	r3, [pc, #396]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0b8      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006200:	4b59      	ldr	r3, [pc, #356]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4a58      	ldr	r2, [pc, #352]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800620a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006218:	4b53      	ldr	r3, [pc, #332]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4a52      	ldr	r2, [pc, #328]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006224:	4b50      	ldr	r3, [pc, #320]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	494d      	ldr	r1, [pc, #308]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d044      	beq.n	80062cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d107      	bne.n	800625a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624a:	4b47      	ldr	r3, [pc, #284]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d119      	bne.n	800628a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e07f      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d003      	beq.n	800626a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006266:	2b03      	cmp	r3, #3
 8006268:	d107      	bne.n	800627a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626a:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e06f      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627a:	4b3b      	ldr	r3, [pc, #236]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e067      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628a:	4b37      	ldr	r3, [pc, #220]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f023 0203 	bic.w	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4934      	ldr	r1, [pc, #208]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800629c:	f7fd ffac 	bl	80041f8 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a4:	f7fd ffa8 	bl	80041f8 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e04f      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ba:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 020c 	and.w	r2, r3, #12
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d1eb      	bne.n	80062a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062cc:	4b25      	ldr	r3, [pc, #148]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d20c      	bcs.n	80062f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b22      	ldr	r3, [pc, #136]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e2:	4b20      	ldr	r3, [pc, #128]	; (8006364 <HAL_RCC_ClockConfig+0x1b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e032      	b.n	800635a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	4916      	ldr	r1, [pc, #88]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	490e      	ldr	r1, [pc, #56]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006332:	f000 f821 	bl	8006378 <HAL_RCC_GetSysClockFreq>
 8006336:	4602      	mov	r2, r0
 8006338:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	490a      	ldr	r1, [pc, #40]	; (800636c <HAL_RCC_ClockConfig+0x1c0>)
 8006344:	5ccb      	ldrb	r3, [r1, r3]
 8006346:	fa22 f303 	lsr.w	r3, r2, r3
 800634a:	4a09      	ldr	r2, [pc, #36]	; (8006370 <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <HAL_RCC_ClockConfig+0x1c8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd ff0c 	bl	8004170 <HAL_InitTick>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40023c00 	.word	0x40023c00
 8006368:	40023800 	.word	0x40023800
 800636c:	0800daac 	.word	0x0800daac
 8006370:	2000000c 	.word	0x2000000c
 8006374:	20000058 	.word	0x20000058

08006378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800637c:	b090      	sub	sp, #64	; 0x40
 800637e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	2300      	movs	r3, #0
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006388:	2300      	movs	r3, #0
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006390:	4b59      	ldr	r3, [pc, #356]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b08      	cmp	r3, #8
 800639a:	d00d      	beq.n	80063b8 <HAL_RCC_GetSysClockFreq+0x40>
 800639c:	2b08      	cmp	r3, #8
 800639e:	f200 80a1 	bhi.w	80064e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x34>
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d003      	beq.n	80063b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063aa:	e09b      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063ac:	4b53      	ldr	r3, [pc, #332]	; (80064fc <HAL_RCC_GetSysClockFreq+0x184>)
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80063b0:	e09b      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063b2:	4b53      	ldr	r3, [pc, #332]	; (8006500 <HAL_RCC_GetSysClockFreq+0x188>)
 80063b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80063b6:	e098      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b8:	4b4f      	ldr	r3, [pc, #316]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063c2:	4b4d      	ldr	r3, [pc, #308]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d028      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ce:	4b4a      	ldr	r3, [pc, #296]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	2200      	movs	r2, #0
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	627a      	str	r2, [r7, #36]	; 0x24
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063e0:	2100      	movs	r1, #0
 80063e2:	4b47      	ldr	r3, [pc, #284]	; (8006500 <HAL_RCC_GetSysClockFreq+0x188>)
 80063e4:	fb03 f201 	mul.w	r2, r3, r1
 80063e8:	2300      	movs	r3, #0
 80063ea:	fb00 f303 	mul.w	r3, r0, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	4a43      	ldr	r2, [pc, #268]	; (8006500 <HAL_RCC_GetSysClockFreq+0x188>)
 80063f2:	fba0 1202 	umull	r1, r2, r0, r2
 80063f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063f8:	460a      	mov	r2, r1
 80063fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80063fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063fe:	4413      	add	r3, r2
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	2200      	movs	r2, #0
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800640e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006412:	f7fa fc49 	bl	8000ca8 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4613      	mov	r3, r2
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641e:	e053      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006420:	4b35      	ldr	r3, [pc, #212]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	2200      	movs	r2, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	617a      	str	r2, [r7, #20]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006432:	f04f 0b00 	mov.w	fp, #0
 8006436:	4652      	mov	r2, sl
 8006438:	465b      	mov	r3, fp
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	0159      	lsls	r1, r3, #5
 8006444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006448:	0150      	lsls	r0, r2, #5
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	ebb2 080a 	subs.w	r8, r2, sl
 8006452:	eb63 090b 	sbc.w	r9, r3, fp
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800646a:	ebb2 0408 	subs.w	r4, r2, r8
 800646e:	eb63 0509 	sbc.w	r5, r3, r9
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	00eb      	lsls	r3, r5, #3
 800647c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006480:	00e2      	lsls	r2, r4, #3
 8006482:	4614      	mov	r4, r2
 8006484:	461d      	mov	r5, r3
 8006486:	eb14 030a 	adds.w	r3, r4, sl
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	eb45 030b 	adc.w	r3, r5, fp
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	f04f 0200 	mov.w	r2, #0
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800649e:	4629      	mov	r1, r5
 80064a0:	028b      	lsls	r3, r1, #10
 80064a2:	4621      	mov	r1, r4
 80064a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064a8:	4621      	mov	r1, r4
 80064aa:	028a      	lsls	r2, r1, #10
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	2200      	movs	r2, #0
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	60fa      	str	r2, [r7, #12]
 80064b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064bc:	f7fa fbf4 	bl	8000ca8 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4613      	mov	r3, r2
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	3301      	adds	r3, #1
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80064d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064e2:	e002      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <HAL_RCC_GetSysClockFreq+0x184>)
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3740      	adds	r7, #64	; 0x40
 80064f0:	46bd      	mov	sp, r7
 80064f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800
 80064fc:	00f42400 	.word	0x00f42400
 8006500:	017d7840 	.word	0x017d7840

08006504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006508:	4b03      	ldr	r3, [pc, #12]	; (8006518 <HAL_RCC_GetHCLKFreq+0x14>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000000c 	.word	0x2000000c

0800651c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006520:	f7ff fff0 	bl	8006504 <HAL_RCC_GetHCLKFreq>
 8006524:	4602      	mov	r2, r0
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	0a9b      	lsrs	r3, r3, #10
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	4903      	ldr	r1, [pc, #12]	; (8006540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006532:	5ccb      	ldrb	r3, [r1, r3]
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40023800 	.word	0x40023800
 8006540:	0800dabc 	.word	0x0800dabc

08006544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006574:	2b00      	cmp	r3, #0
 8006576:	d075      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006578:	4b91      	ldr	r3, [pc, #580]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800657e:	f7fd fe3b 	bl	80041f8 <HAL_GetTick>
 8006582:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006586:	f7fd fe37 	bl	80041f8 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e189      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006598:	4b8a      	ldr	r3, [pc, #552]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1f0      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	019a      	lsls	r2, r3, #6
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	071b      	lsls	r3, r3, #28
 80065bc:	4981      	ldr	r1, [pc, #516]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01f      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065d0:	4b7c      	ldr	r3, [pc, #496]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d6:	0f1b      	lsrs	r3, r3, #28
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	019a      	lsls	r2, r3, #6
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	071b      	lsls	r3, r3, #28
 80065f0:	4974      	ldr	r1, [pc, #464]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065f8:	4b72      	ldr	r3, [pc, #456]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f023 021f 	bic.w	r2, r3, #31
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	3b01      	subs	r3, #1
 8006608:	496e      	ldr	r1, [pc, #440]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00d      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	019a      	lsls	r2, r3, #6
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	071b      	lsls	r3, r3, #28
 8006630:	4964      	ldr	r1, [pc, #400]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006638:	4b61      	ldr	r3, [pc, #388]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800663e:	f7fd fddb 	bl	80041f8 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006646:	f7fd fdd7 	bl	80041f8 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e129      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006658:	4b5a      	ldr	r3, [pc, #360]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006678:	2b00      	cmp	r3, #0
 800667a:	d079      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800667c:	4b52      	ldr	r3, [pc, #328]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006682:	f7fd fdb9 	bl	80041f8 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006688:	e008      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800668a:	f7fd fdb5 	bl	80041f8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e107      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800669c:	4b49      	ldr	r3, [pc, #292]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a8:	d0ef      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d020      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066b6:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	0f1b      	lsrs	r3, r3, #28
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	019a      	lsls	r2, r3, #6
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	061b      	lsls	r3, r3, #24
 80066d0:	431a      	orrs	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	071b      	lsls	r3, r3, #28
 80066d6:	493b      	ldr	r1, [pc, #236]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066de:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	4934      	ldr	r1, [pc, #208]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01e      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006704:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	0e1b      	lsrs	r3, r3, #24
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	019a      	lsls	r2, r3, #6
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	071b      	lsls	r3, r3, #28
 8006724:	4927      	ldr	r1, [pc, #156]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	4922      	ldr	r1, [pc, #136]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006742:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006748:	f7fd fd56 	bl	80041f8 <HAL_GetTick>
 800674c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006750:	f7fd fd52 	bl	80041f8 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e0a4      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006762:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800676a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676e:	d1ef      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 808b 	beq.w	8006894 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	4a0f      	ldr	r2, [pc, #60]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678c:	6413      	str	r3, [r2, #64]	; 0x40
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800679a:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a0b      	ldr	r2, [pc, #44]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80067a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067a6:	f7fd fd27 	bl	80041f8 <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067ac:	e010      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067ae:	f7fd fd23 	bl	80041f8 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d909      	bls.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e075      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80067c0:	42470068 	.word	0x42470068
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470070 	.word	0x42470070
 80067cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067d0:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0e8      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02f      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d028      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067fa:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006804:	4b2d      	ldr	r3, [pc, #180]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800680a:	4b2c      	ldr	r3, [pc, #176]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006810:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b01      	cmp	r3, #1
 8006820:	d114      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006822:	f7fd fce9 	bl	80041f8 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006828:	e00a      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fd fce5 	bl	80041f8 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	; 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e035      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006840:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0ee      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d10d      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800686a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686e:	4912      	ldr	r1, [pc, #72]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006870:	4313      	orrs	r3, r2
 8006872:	608b      	str	r3, [r1, #8]
 8006874:	e005      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	4a0f      	ldr	r2, [pc, #60]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800687c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006880:	6093      	str	r3, [r2, #8]
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800688e:	490a      	ldr	r1, [pc, #40]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006890:	4313      	orrs	r3, r2
 8006892:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80068a6:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80068a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40007000 	.word	0x40007000
 80068b8:	40023800 	.word	0x40023800
 80068bc:	42470e40 	.word	0x42470e40
 80068c0:	424711e0 	.word	0x424711e0

080068c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e025      	b.n	8006924 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fb fde9 	bl	80024c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f001 fad9 	bl	8007ebc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	461a      	mov	r2, r3
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	f001 fb2e 	bl	8007f76 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800693e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d101      	bne.n	800694a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006946:	2302      	movs	r3, #2
 8006948:	e021      	b.n	800698e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d002      	beq.n	8006956 <HAL_SDRAM_SendCommand+0x2a>
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d118      	bne.n	8006988 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fb6e 	bl	8008048 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d104      	bne.n	800697e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2205      	movs	r2, #5
 8006978:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800697c:	e006      	b.n	800698c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006986:	e001      	b.n	800698c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d101      	bne.n	80069b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
 80069ae:	e016      	b.n	80069de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d10f      	bne.n	80069dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fb79 	bl	80080c2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e07b      	b.n	8006af0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d108      	bne.n	8006a12 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a08:	d009      	beq.n	8006a1e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	61da      	str	r2, [r3, #28]
 8006a10:	e005      	b.n	8006a1e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fb fc23 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	ea42 0103 	orr.w	r1, r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	f003 0104 	and.w	r1, r3, #4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	f003 0210 	and.w	r2, r3, #16
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e01a      	b.n	8006b40 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb fbf6 	bl	8002314 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_SPI_Transmit+0x22>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e126      	b.n	8006db8 <HAL_SPI_Transmit+0x270>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b72:	f7fd fb41 	bl	80041f8 <HAL_GetTick>
 8006b76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b8c:	e10b      	b.n	8006da6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <HAL_SPI_Transmit+0x52>
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b9e:	e102      	b.n	8006da6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	d10f      	bne.n	8006c08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d007      	beq.n	8006c26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	d14b      	bne.n	8006cc8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_SPI_Transmit+0xf6>
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d13e      	bne.n	8006cbc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	1c9a      	adds	r2, r3, #2
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c62:	e02b      	b.n	8006cbc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d112      	bne.n	8006c98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	881a      	ldrh	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c96:	e011      	b.n	8006cbc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c98:	f7fd faae 	bl	80041f8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d803      	bhi.n	8006cb0 <HAL_SPI_Transmit+0x168>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	d102      	bne.n	8006cb6 <HAL_SPI_Transmit+0x16e>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cba:	e074      	b.n	8006da6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1ce      	bne.n	8006c64 <HAL_SPI_Transmit+0x11c>
 8006cc6:	e04c      	b.n	8006d62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_SPI_Transmit+0x18e>
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d140      	bne.n	8006d58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cfc:	e02c      	b.n	8006d58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d113      	bne.n	8006d34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d32:	e011      	b.n	8006d58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d34:	f7fd fa60 	bl	80041f8 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d803      	bhi.n	8006d4c <HAL_SPI_Transmit+0x204>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d102      	bne.n	8006d52 <HAL_SPI_Transmit+0x20a>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d102      	bne.n	8006d58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d56:	e026      	b.n	8006da6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1cd      	bne.n	8006cfe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fbda 	bl	8007520 <SPI_EndRxTxTransaction>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e000      	b.n	8006da6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ddc:	d112      	bne.n	8006e04 <HAL_SPI_Receive+0x44>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10e      	bne.n	8006e04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006dee:	88fa      	ldrh	r2, [r7, #6]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f8f1 	bl	8006fe2 <HAL_SPI_TransmitReceive>
 8006e00:	4603      	mov	r3, r0
 8006e02:	e0ea      	b.n	8006fda <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_SPI_Receive+0x52>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e0e3      	b.n	8006fda <HAL_SPI_Receive+0x21a>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e1a:	f7fd f9ed 	bl	80041f8 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e30:	e0ca      	b.n	8006fc8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_Receive+0x7e>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e42:	e0c1      	b.n	8006fc8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2204      	movs	r2, #4
 8006e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	88fa      	ldrh	r2, [r7, #6]
 8006e62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d10f      	bne.n	8006eac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d007      	beq.n	8006eca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d162      	bne.n	8006f98 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ed2:	e02e      	b.n	8006f32 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d115      	bne.n	8006f0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f103 020c 	add.w	r2, r3, #12
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f0c:	e011      	b.n	8006f32 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f0e:	f7fd f973 	bl	80041f8 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d803      	bhi.n	8006f26 <HAL_SPI_Receive+0x166>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d102      	bne.n	8006f2c <HAL_SPI_Receive+0x16c>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f30:	e04a      	b.n	8006fc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1cb      	bne.n	8006ed4 <HAL_SPI_Receive+0x114>
 8006f3c:	e031      	b.n	8006fa2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d113      	bne.n	8006f74 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	b292      	uxth	r2, r2
 8006f58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f72:	e011      	b.n	8006f98 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f74:	f7fd f940 	bl	80041f8 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d803      	bhi.n	8006f8c <HAL_SPI_Receive+0x1cc>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d102      	bne.n	8006f92 <HAL_SPI_Receive+0x1d2>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f96:	e017      	b.n	8006fc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1cd      	bne.n	8006f3e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fa54 	bl	8007454 <SPI_EndRxTransaction>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]
 8006fc4:	e000      	b.n	8006fc8 <HAL_SPI_Receive+0x208>
  }

error :
 8006fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x26>
 8007004:	2302      	movs	r3, #2
 8007006:	e18a      	b.n	800731e <HAL_SPI_TransmitReceive+0x33c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007010:	f7fd f8f2 	bl	80041f8 <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800701c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800702a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702e:	2b01      	cmp	r3, #1
 8007030:	d00f      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007038:	d107      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
 8007042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007046:	2b04      	cmp	r3, #4
 8007048:	d003      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007050:	e15b      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 800705e:	887b      	ldrh	r3, [r7, #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800706a:	e14e      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b04      	cmp	r3, #4
 8007076:	d003      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2205      	movs	r2, #5
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	887a      	ldrh	r2, [r7, #2]
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	887a      	ldrh	r2, [r7, #2]
 8007096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	887a      	ldrh	r2, [r7, #2]
 80070a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d007      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d178      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x10a>
 80070e6:	8b7b      	ldrh	r3, [r7, #26]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d166      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e053      	b.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d11b      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d016      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d113      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	1c9a      	adds	r2, r3, #2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d119      	bne.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	b292      	uxth	r2, r2
 800717c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007196:	2301      	movs	r3, #1
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800719a:	f7fd f82d 	bl	80041f8 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d807      	bhi.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d003      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071b8:	e0a7      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1a6      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1a1      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071ce:	e07c      	b.n	80072ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_TransmitReceive+0x1fc>
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d16b      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007204:	e057      	b.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d11c      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d017      	beq.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d114      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d119      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d014      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800728c:	2301      	movs	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007290:	f7fc ffb2 	bl	80041f8 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729c:	429a      	cmp	r2, r3
 800729e:	d803      	bhi.n	80072a8 <HAL_SPI_TransmitReceive+0x2c6>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d102      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x2cc>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072b4:	e029      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1a2      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d19d      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f926 	bl	8007520 <SPI_EndRxTxTransaction>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80072e6:	e010      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e000      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800731a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800731e:	4618      	mov	r0, r3
 8007320:	3730      	adds	r7, #48	; 0x30
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007334:	b2db      	uxtb	r3, r3
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007354:	f7fc ff50 	bl	80041f8 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4413      	add	r3, r2
 8007362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007364:	f7fc ff48 	bl	80041f8 <HAL_GetTick>
 8007368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800736a:	4b39      	ldr	r3, [pc, #228]	; (8007450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	015b      	lsls	r3, r3, #5
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800737a:	e054      	b.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d050      	beq.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007384:	f7fc ff38 	bl	80041f8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d902      	bls.n	800739a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13d      	bne.n	8007416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b2:	d111      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073bc:	d004      	beq.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d107      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e0:	d10f      	bne.n	8007402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e017      	b.n	8007446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3b01      	subs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d19b      	bne.n	800737c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	2000000c 	.word	0x2000000c

08007454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af02      	add	r7, sp, #8
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007468:	d111      	bne.n	800748e <SPI_EndRxTransaction+0x3a>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007472:	d004      	beq.n	800747e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800747c:	d107      	bne.n	800748e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007496:	d12a      	bne.n	80074ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a0:	d012      	beq.n	80074c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2200      	movs	r2, #0
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ff49 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d02d      	beq.n	8007514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	f043 0220 	orr.w	r2, r3, #32
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e026      	b.n	8007516 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2200      	movs	r2, #0
 80074d0:	2101      	movs	r1, #1
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff ff36 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d01a      	beq.n	8007514 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e013      	b.n	8007516 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	2101      	movs	r1, #1
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff23 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e000      	b.n	8007516 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800752c:	4b1b      	ldr	r3, [pc, #108]	; (800759c <SPI_EndRxTxTransaction+0x7c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <SPI_EndRxTxTransaction+0x80>)
 8007532:	fba2 2303 	umull	r2, r3, r2, r3
 8007536:	0d5b      	lsrs	r3, r3, #21
 8007538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754a:	d112      	bne.n	8007572 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	2180      	movs	r1, #128	; 0x80
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fef4 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d016      	beq.n	8007590 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e00f      	b.n	8007592 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007588:	2b80      	cmp	r3, #128	; 0x80
 800758a:	d0f2      	beq.n	8007572 <SPI_EndRxTxTransaction+0x52>
 800758c:	e000      	b.n	8007590 <SPI_EndRxTxTransaction+0x70>
        break;
 800758e:	bf00      	nop
  }

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000000c 	.word	0x2000000c
 80075a0:	165e9f81 	.word	0x165e9f81

080075a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e041      	b.n	800763a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fec0 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f000 faa0 	bl	8007b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d001      	beq.n	800765c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e04e      	b.n	80076fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a23      	ldr	r2, [pc, #140]	; (8007708 <HAL_TIM_Base_Start_IT+0xc4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d022      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d01d      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1f      	ldr	r2, [pc, #124]	; (800770c <HAL_TIM_Base_Start_IT+0xc8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <HAL_TIM_Base_Start_IT+0xcc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <HAL_TIM_Base_Start_IT+0xd0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a19      	ldr	r2, [pc, #100]	; (800771c <HAL_TIM_Base_Start_IT+0xd8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIM_Base_Start_IT+0x80>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a18      	ldr	r2, [pc, #96]	; (8007720 <HAL_TIM_Base_Start_IT+0xdc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d111      	bne.n	80076e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0307 	and.w	r3, r3, #7
 80076ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d010      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	e007      	b.n	80076f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40010000 	.word	0x40010000
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	40000c00 	.word	0x40000c00
 8007718:	40010400 	.word	0x40010400
 800771c:	40014000 	.word	0x40014000
 8007720:	40001800 	.word	0x40001800

08007724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d122      	bne.n	8007780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b02      	cmp	r3, #2
 8007746:	d11b      	bne.n	8007780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0202 	mvn.w	r2, #2
 8007750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9bf 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9b1 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9c2 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b04      	cmp	r3, #4
 800778c:	d122      	bne.n	80077d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b04      	cmp	r3, #4
 800779a:	d11b      	bne.n	80077d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0204 	mvn.w	r2, #4
 80077a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f995 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 80077c0:	e005      	b.n	80077ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f987 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f998 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d122      	bne.n	8007828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d11b      	bne.n	8007828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0208 	mvn.w	r2, #8
 80077f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2204      	movs	r2, #4
 80077fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f96b 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 8007814:	e005      	b.n	8007822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f95d 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f96e 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b10      	cmp	r3, #16
 8007834:	d122      	bne.n	800787c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b10      	cmp	r3, #16
 8007842:	d11b      	bne.n	800787c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0210 	mvn.w	r2, #16
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2208      	movs	r2, #8
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f941 	bl	8007aea <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f933 	bl	8007ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f944 	bl	8007afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10e      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b01      	cmp	r3, #1
 8007896:	d107      	bne.n	80078a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0201 	mvn.w	r2, #1
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f90d 	bl	8007ac2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d10e      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d107      	bne.n	80078d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 faea 	bl	8007ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d10e      	bne.n	8007900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d107      	bne.n	8007900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f909 	bl	8007b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b20      	cmp	r3, #32
 800790c:	d10e      	bne.n	800792c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b20      	cmp	r3, #32
 800791a:	d107      	bne.n	800792c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0220 	mvn.w	r2, #32
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fab4 	bl	8007e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_TIM_ConfigClockSource+0x1c>
 800794c:	2302      	movs	r3, #2
 800794e:	e0b4      	b.n	8007aba <HAL_TIM_ConfigClockSource+0x186>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800796e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007988:	d03e      	beq.n	8007a08 <HAL_TIM_ConfigClockSource+0xd4>
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798e:	f200 8087 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007996:	f000 8086 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x172>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799e:	d87f      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079a0:	2b70      	cmp	r3, #112	; 0x70
 80079a2:	d01a      	beq.n	80079da <HAL_TIM_ConfigClockSource+0xa6>
 80079a4:	2b70      	cmp	r3, #112	; 0x70
 80079a6:	d87b      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079a8:	2b60      	cmp	r3, #96	; 0x60
 80079aa:	d050      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x11a>
 80079ac:	2b60      	cmp	r3, #96	; 0x60
 80079ae:	d877      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b50      	cmp	r3, #80	; 0x50
 80079b2:	d03c      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0xfa>
 80079b4:	2b50      	cmp	r3, #80	; 0x50
 80079b6:	d873      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d058      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x13a>
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d86f      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b30      	cmp	r3, #48	; 0x30
 80079c2:	d064      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x15a>
 80079c4:	2b30      	cmp	r3, #48	; 0x30
 80079c6:	d86b      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d060      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x15a>
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d867      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d05c      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x15a>
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d05a      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x15a>
 80079d8:	e062      	b.n	8007aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6899      	ldr	r1, [r3, #8]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f000 f9b7 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	609a      	str	r2, [r3, #8]
      break;
 8007a06:	e04f      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6899      	ldr	r1, [r3, #8]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f000 f9a0 	bl	8007d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a2a:	609a      	str	r2, [r3, #8]
      break;
 8007a2c:	e03c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 f914 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2150      	movs	r1, #80	; 0x50
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f96d 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e02c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6859      	ldr	r1, [r3, #4]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f000 f933 	bl	8007cc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2160      	movs	r1, #96	; 0x60
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f95d 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007a6c:	e01c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6859      	ldr	r1, [r3, #4]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f000 f8f4 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2140      	movs	r1, #64	; 0x40
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f94d 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007a8c:	e00c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f000 f944 	bl	8007d26 <TIM_ITRx_SetConfig>
      break;
 8007a9e:	e003      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e000      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a40      	ldr	r2, [pc, #256]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b46:	d00f      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3d      	ldr	r2, [pc, #244]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3c      	ldr	r2, [pc, #240]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a3b      	ldr	r2, [pc, #236]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3a      	ldr	r2, [pc, #232]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2f      	ldr	r2, [pc, #188]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d02b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d027      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	; (8007c40 <TIM_Base_SetConfig+0x118>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d023      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <TIM_Base_SetConfig+0x11c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d01f      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <TIM_Base_SetConfig+0x120>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d017      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a28      	ldr	r2, [pc, #160]	; (8007c50 <TIM_Base_SetConfig+0x128>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d013      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a27      	ldr	r2, [pc, #156]	; (8007c54 <TIM_Base_SetConfig+0x12c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00f      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a26      	ldr	r2, [pc, #152]	; (8007c58 <TIM_Base_SetConfig+0x130>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00b      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a25      	ldr	r2, [pc, #148]	; (8007c5c <TIM_Base_SetConfig+0x134>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d007      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a24      	ldr	r2, [pc, #144]	; (8007c60 <TIM_Base_SetConfig+0x138>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <TIM_Base_SetConfig+0x13c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d108      	bne.n	8007bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <TIM_Base_SetConfig+0x114>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_Base_SetConfig+0xf8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a0c      	ldr	r2, [pc, #48]	; (8007c4c <TIM_Base_SetConfig+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d103      	bne.n	8007c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	615a      	str	r2, [r3, #20]
}
 8007c2e:	bf00      	nop
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40000400 	.word	0x40000400
 8007c44:	40000800 	.word	0x40000800
 8007c48:	40000c00 	.word	0x40000c00
 8007c4c:	40010400 	.word	0x40010400
 8007c50:	40014000 	.word	0x40014000
 8007c54:	40014400 	.word	0x40014400
 8007c58:	40014800 	.word	0x40014800
 8007c5c:	40001800 	.word	0x40001800
 8007c60:	40001c00 	.word	0x40001c00
 8007c64:	40002000 	.word	0x40002000

08007c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 030a 	bic.w	r3, r3, #10
 8007ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f023 0210 	bic.w	r2, r3, #16
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	031b      	lsls	r3, r3, #12
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f043 0307 	orr.w	r3, r3, #7
 8007d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	021a      	lsls	r2, r3, #8
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e05a      	b.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d022      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e00:	d01d      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1d      	ldr	r2, [pc, #116]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d018      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d013      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00e      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d009      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d004      	beq.n	8007e3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10c      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40000400 	.word	0x40000400
 8007e80:	40000800 	.word	0x40000800
 8007e84:	40000c00 	.word	0x40000c00
 8007e88:	40010400 	.word	0x40010400
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40001800 	.word	0x40001800

08007e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d123      	bne.n	8007f16 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ed6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	6851      	ldr	r1, [r2, #4]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	6892      	ldr	r2, [r2, #8]
 8007ee2:	4311      	orrs	r1, r2
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	68d2      	ldr	r2, [r2, #12]
 8007ee8:	4311      	orrs	r1, r2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	6912      	ldr	r2, [r2, #16]
 8007eee:	4311      	orrs	r1, r2
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	6952      	ldr	r2, [r2, #20]
 8007ef4:	4311      	orrs	r1, r2
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	6992      	ldr	r2, [r2, #24]
 8007efa:	4311      	orrs	r1, r2
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	69d2      	ldr	r2, [r2, #28]
 8007f00:	4311      	orrs	r1, r2
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	6a12      	ldr	r2, [r2, #32]
 8007f06:	4311      	orrs	r1, r2
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e028      	b.n	8007f68 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	69d9      	ldr	r1, [r3, #28]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	4319      	orrs	r1, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	6851      	ldr	r1, [r2, #4]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	6892      	ldr	r2, [r2, #8]
 8007f48:	4311      	orrs	r1, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	68d2      	ldr	r2, [r2, #12]
 8007f4e:	4311      	orrs	r1, r2
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	6912      	ldr	r2, [r2, #16]
 8007f54:	4311      	orrs	r1, r2
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	6952      	ldr	r2, [r2, #20]
 8007f5a:	4311      	orrs	r1, r2
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	6992      	ldr	r2, [r2, #24]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d128      	bne.n	8007fda <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	1e59      	subs	r1, r3, #1
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	4319      	orrs	r1, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	4319      	orrs	r1, r3
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	031b      	lsls	r3, r3, #12
 8007fb2:	4319      	orrs	r1, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	4319      	orrs	r1, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	051b      	lsls	r3, r3, #20
 8007fc6:	4319      	orrs	r1, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	061b      	lsls	r3, r3, #24
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]
 8007fd8:	e02f      	b.n	800803a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	68d2      	ldr	r2, [r2, #12]
 8007fea:	3a01      	subs	r2, #1
 8007fec:	0311      	lsls	r1, r2, #12
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	6952      	ldr	r2, [r2, #20]
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	0512      	lsls	r2, r2, #20
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	1e59      	subs	r1, r3, #1
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	3b01      	subs	r3, #1
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	4319      	orrs	r1, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	3b01      	subs	r3, #1
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	4319      	orrs	r1, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	3b01      	subs	r3, #1
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	4319      	orrs	r1, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	3b01      	subs	r3, #1
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	430b      	orrs	r3, r1
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	0d9b      	lsrs	r3, r3, #22
 800805e:	059b      	lsls	r3, r3, #22
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	6811      	ldr	r1, [r2, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	6852      	ldr	r2, [r2, #4]
 8008068:	4311      	orrs	r1, r2
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	6892      	ldr	r2, [r2, #8]
 800806e:	3a01      	subs	r2, #1
 8008070:	0152      	lsls	r2, r2, #5
 8008072:	4311      	orrs	r1, r2
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	68d2      	ldr	r2, [r2, #12]
 8008078:	0252      	lsls	r2, r2, #9
 800807a:	430a      	orrs	r2, r1
 800807c:	431a      	orrs	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008082:	f7fc f8b9 	bl	80041f8 <HAL_GetTick>
 8008086:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008088:	e010      	b.n	80080ac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d00c      	beq.n	80080ac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <FMC_SDRAM_SendCommand+0x60>
 8008098:	f7fc f8ae 	bl	80041f8 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d201      	bcs.n	80080ac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e006      	b.n	80080ba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d0e8      	beq.n	800808a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80080d4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	0052      	lsls	r2, r2, #1
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <__cvt>:
 80080f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	ec55 4b10 	vmov	r4, r5, d0
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	460e      	mov	r6, r1
 80080fc:	4619      	mov	r1, r3
 80080fe:	462b      	mov	r3, r5
 8008100:	bfbb      	ittet	lt
 8008102:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008106:	461d      	movlt	r5, r3
 8008108:	2300      	movge	r3, #0
 800810a:	232d      	movlt	r3, #45	; 0x2d
 800810c:	700b      	strb	r3, [r1, #0]
 800810e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008110:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008114:	4691      	mov	r9, r2
 8008116:	f023 0820 	bic.w	r8, r3, #32
 800811a:	bfbc      	itt	lt
 800811c:	4622      	movlt	r2, r4
 800811e:	4614      	movlt	r4, r2
 8008120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008124:	d005      	beq.n	8008132 <__cvt+0x42>
 8008126:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800812a:	d100      	bne.n	800812e <__cvt+0x3e>
 800812c:	3601      	adds	r6, #1
 800812e:	2102      	movs	r1, #2
 8008130:	e000      	b.n	8008134 <__cvt+0x44>
 8008132:	2103      	movs	r1, #3
 8008134:	ab03      	add	r3, sp, #12
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	ab02      	add	r3, sp, #8
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	ec45 4b10 	vmov	d0, r4, r5
 8008140:	4653      	mov	r3, sl
 8008142:	4632      	mov	r2, r6
 8008144:	f001 f880 	bl	8009248 <_dtoa_r>
 8008148:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800814c:	4607      	mov	r7, r0
 800814e:	d102      	bne.n	8008156 <__cvt+0x66>
 8008150:	f019 0f01 	tst.w	r9, #1
 8008154:	d022      	beq.n	800819c <__cvt+0xac>
 8008156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800815a:	eb07 0906 	add.w	r9, r7, r6
 800815e:	d110      	bne.n	8008182 <__cvt+0x92>
 8008160:	783b      	ldrb	r3, [r7, #0]
 8008162:	2b30      	cmp	r3, #48	; 0x30
 8008164:	d10a      	bne.n	800817c <__cvt+0x8c>
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 fcbb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008172:	b918      	cbnz	r0, 800817c <__cvt+0x8c>
 8008174:	f1c6 0601 	rsb	r6, r6, #1
 8008178:	f8ca 6000 	str.w	r6, [sl]
 800817c:	f8da 3000 	ldr.w	r3, [sl]
 8008180:	4499      	add	r9, r3
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800818e:	b108      	cbz	r0, 8008194 <__cvt+0xa4>
 8008190:	f8cd 900c 	str.w	r9, [sp, #12]
 8008194:	2230      	movs	r2, #48	; 0x30
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	454b      	cmp	r3, r9
 800819a:	d307      	bcc.n	80081ac <__cvt+0xbc>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081a0:	1bdb      	subs	r3, r3, r7
 80081a2:	4638      	mov	r0, r7
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	b004      	add	sp, #16
 80081a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ac:	1c59      	adds	r1, r3, #1
 80081ae:	9103      	str	r1, [sp, #12]
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e7f0      	b.n	8008196 <__cvt+0xa6>

080081b4 <__exponent>:
 80081b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b6:	4603      	mov	r3, r0
 80081b8:	2900      	cmp	r1, #0
 80081ba:	bfb8      	it	lt
 80081bc:	4249      	neglt	r1, r1
 80081be:	f803 2b02 	strb.w	r2, [r3], #2
 80081c2:	bfb4      	ite	lt
 80081c4:	222d      	movlt	r2, #45	; 0x2d
 80081c6:	222b      	movge	r2, #43	; 0x2b
 80081c8:	2909      	cmp	r1, #9
 80081ca:	7042      	strb	r2, [r0, #1]
 80081cc:	dd2a      	ble.n	8008224 <__exponent+0x70>
 80081ce:	f10d 0207 	add.w	r2, sp, #7
 80081d2:	4617      	mov	r7, r2
 80081d4:	260a      	movs	r6, #10
 80081d6:	4694      	mov	ip, r2
 80081d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80081dc:	fb06 1415 	mls	r4, r6, r5, r1
 80081e0:	3430      	adds	r4, #48	; 0x30
 80081e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80081e6:	460c      	mov	r4, r1
 80081e8:	2c63      	cmp	r4, #99	; 0x63
 80081ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80081ee:	4629      	mov	r1, r5
 80081f0:	dcf1      	bgt.n	80081d6 <__exponent+0x22>
 80081f2:	3130      	adds	r1, #48	; 0x30
 80081f4:	f1ac 0402 	sub.w	r4, ip, #2
 80081f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081fc:	1c41      	adds	r1, r0, #1
 80081fe:	4622      	mov	r2, r4
 8008200:	42ba      	cmp	r2, r7
 8008202:	d30a      	bcc.n	800821a <__exponent+0x66>
 8008204:	f10d 0209 	add.w	r2, sp, #9
 8008208:	eba2 020c 	sub.w	r2, r2, ip
 800820c:	42bc      	cmp	r4, r7
 800820e:	bf88      	it	hi
 8008210:	2200      	movhi	r2, #0
 8008212:	4413      	add	r3, r2
 8008214:	1a18      	subs	r0, r3, r0
 8008216:	b003      	add	sp, #12
 8008218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800821a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800821e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008222:	e7ed      	b.n	8008200 <__exponent+0x4c>
 8008224:	2330      	movs	r3, #48	; 0x30
 8008226:	3130      	adds	r1, #48	; 0x30
 8008228:	7083      	strb	r3, [r0, #2]
 800822a:	70c1      	strb	r1, [r0, #3]
 800822c:	1d03      	adds	r3, r0, #4
 800822e:	e7f1      	b.n	8008214 <__exponent+0x60>

08008230 <_printf_float>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	ed2d 8b02 	vpush	{d8}
 8008238:	b08d      	sub	sp, #52	; 0x34
 800823a:	460c      	mov	r4, r1
 800823c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008240:	4616      	mov	r6, r2
 8008242:	461f      	mov	r7, r3
 8008244:	4605      	mov	r5, r0
 8008246:	f000 fef7 	bl	8009038 <_localeconv_r>
 800824a:	f8d0 a000 	ldr.w	sl, [r0]
 800824e:	4650      	mov	r0, sl
 8008250:	f7f8 f81e 	bl	8000290 <strlen>
 8008254:	2300      	movs	r3, #0
 8008256:	930a      	str	r3, [sp, #40]	; 0x28
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	f8d8 3000 	ldr.w	r3, [r8]
 8008260:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008264:	3307      	adds	r3, #7
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	f103 0208 	add.w	r2, r3, #8
 800826e:	f8c8 2000 	str.w	r2, [r8]
 8008272:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008280:	ee08 0a10 	vmov	s16, r0
 8008284:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800828c:	4b9e      	ldr	r3, [pc, #632]	; (8008508 <_printf_float+0x2d8>)
 800828e:	f04f 32ff 	mov.w	r2, #4294967295
 8008292:	f7f8 fc5b 	bl	8000b4c <__aeabi_dcmpun>
 8008296:	bb88      	cbnz	r0, 80082fc <_printf_float+0xcc>
 8008298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800829c:	4b9a      	ldr	r3, [pc, #616]	; (8008508 <_printf_float+0x2d8>)
 800829e:	f04f 32ff 	mov.w	r2, #4294967295
 80082a2:	f7f8 fc35 	bl	8000b10 <__aeabi_dcmple>
 80082a6:	bb48      	cbnz	r0, 80082fc <_printf_float+0xcc>
 80082a8:	2200      	movs	r2, #0
 80082aa:	2300      	movs	r3, #0
 80082ac:	4640      	mov	r0, r8
 80082ae:	4649      	mov	r1, r9
 80082b0:	f7f8 fc24 	bl	8000afc <__aeabi_dcmplt>
 80082b4:	b110      	cbz	r0, 80082bc <_printf_float+0x8c>
 80082b6:	232d      	movs	r3, #45	; 0x2d
 80082b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082bc:	4a93      	ldr	r2, [pc, #588]	; (800850c <_printf_float+0x2dc>)
 80082be:	4b94      	ldr	r3, [pc, #592]	; (8008510 <_printf_float+0x2e0>)
 80082c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082c4:	bf94      	ite	ls
 80082c6:	4690      	movls	r8, r2
 80082c8:	4698      	movhi	r8, r3
 80082ca:	2303      	movs	r3, #3
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	f023 0304 	bic.w	r3, r3, #4
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	f04f 0900 	mov.w	r9, #0
 80082da:	9700      	str	r7, [sp, #0]
 80082dc:	4633      	mov	r3, r6
 80082de:	aa0b      	add	r2, sp, #44	; 0x2c
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f9da 	bl	800869c <_printf_common>
 80082e8:	3001      	adds	r0, #1
 80082ea:	f040 8090 	bne.w	800840e <_printf_float+0x1de>
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	b00d      	add	sp, #52	; 0x34
 80082f4:	ecbd 8b02 	vpop	{d8}
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fc22 	bl	8000b4c <__aeabi_dcmpun>
 8008308:	b140      	cbz	r0, 800831c <_printf_float+0xec>
 800830a:	464b      	mov	r3, r9
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfbc      	itt	lt
 8008310:	232d      	movlt	r3, #45	; 0x2d
 8008312:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008316:	4a7f      	ldr	r2, [pc, #508]	; (8008514 <_printf_float+0x2e4>)
 8008318:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <_printf_float+0x2e8>)
 800831a:	e7d1      	b.n	80082c0 <_printf_float+0x90>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008322:	9206      	str	r2, [sp, #24]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	d13f      	bne.n	80083a8 <_printf_float+0x178>
 8008328:	2306      	movs	r3, #6
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	6861      	ldr	r1, [r4, #4]
 8008330:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008334:	2300      	movs	r3, #0
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	ab0a      	add	r3, sp, #40	; 0x28
 800833a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800833e:	ab09      	add	r3, sp, #36	; 0x24
 8008340:	ec49 8b10 	vmov	d0, r8, r9
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800834c:	4628      	mov	r0, r5
 800834e:	f7ff fecf 	bl	80080f0 <__cvt>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008356:	2b47      	cmp	r3, #71	; 0x47
 8008358:	4680      	mov	r8, r0
 800835a:	d108      	bne.n	800836e <_printf_float+0x13e>
 800835c:	1cc8      	adds	r0, r1, #3
 800835e:	db02      	blt.n	8008366 <_printf_float+0x136>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	4299      	cmp	r1, r3
 8008364:	dd41      	ble.n	80083ea <_printf_float+0x1ba>
 8008366:	f1ab 0302 	sub.w	r3, fp, #2
 800836a:	fa5f fb83 	uxtb.w	fp, r3
 800836e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008372:	d820      	bhi.n	80083b6 <_printf_float+0x186>
 8008374:	3901      	subs	r1, #1
 8008376:	465a      	mov	r2, fp
 8008378:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800837c:	9109      	str	r1, [sp, #36]	; 0x24
 800837e:	f7ff ff19 	bl	80081b4 <__exponent>
 8008382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008384:	1813      	adds	r3, r2, r0
 8008386:	2a01      	cmp	r2, #1
 8008388:	4681      	mov	r9, r0
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	dc02      	bgt.n	8008394 <_printf_float+0x164>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d2      	lsls	r2, r2, #31
 8008392:	d501      	bpl.n	8008398 <_printf_float+0x168>
 8008394:	3301      	adds	r3, #1
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800839c:	2b00      	cmp	r3, #0
 800839e:	d09c      	beq.n	80082da <_printf_float+0xaa>
 80083a0:	232d      	movs	r3, #45	; 0x2d
 80083a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a6:	e798      	b.n	80082da <_printf_float+0xaa>
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	2a47      	cmp	r2, #71	; 0x47
 80083ac:	d1be      	bne.n	800832c <_printf_float+0xfc>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1bc      	bne.n	800832c <_printf_float+0xfc>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7b9      	b.n	800832a <_printf_float+0xfa>
 80083b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083ba:	d118      	bne.n	80083ee <_printf_float+0x1be>
 80083bc:	2900      	cmp	r1, #0
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	dd0b      	ble.n	80083da <_printf_float+0x1aa>
 80083c2:	6121      	str	r1, [r4, #16]
 80083c4:	b913      	cbnz	r3, 80083cc <_printf_float+0x19c>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	07d0      	lsls	r0, r2, #31
 80083ca:	d502      	bpl.n	80083d2 <_printf_float+0x1a2>
 80083cc:	3301      	adds	r3, #1
 80083ce:	440b      	add	r3, r1
 80083d0:	6123      	str	r3, [r4, #16]
 80083d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083d4:	f04f 0900 	mov.w	r9, #0
 80083d8:	e7de      	b.n	8008398 <_printf_float+0x168>
 80083da:	b913      	cbnz	r3, 80083e2 <_printf_float+0x1b2>
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	07d2      	lsls	r2, r2, #31
 80083e0:	d501      	bpl.n	80083e6 <_printf_float+0x1b6>
 80083e2:	3302      	adds	r3, #2
 80083e4:	e7f4      	b.n	80083d0 <_printf_float+0x1a0>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7f2      	b.n	80083d0 <_printf_float+0x1a0>
 80083ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	4299      	cmp	r1, r3
 80083f2:	db05      	blt.n	8008400 <_printf_float+0x1d0>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	6121      	str	r1, [r4, #16]
 80083f8:	07d8      	lsls	r0, r3, #31
 80083fa:	d5ea      	bpl.n	80083d2 <_printf_float+0x1a2>
 80083fc:	1c4b      	adds	r3, r1, #1
 80083fe:	e7e7      	b.n	80083d0 <_printf_float+0x1a0>
 8008400:	2900      	cmp	r1, #0
 8008402:	bfd4      	ite	le
 8008404:	f1c1 0202 	rsble	r2, r1, #2
 8008408:	2201      	movgt	r2, #1
 800840a:	4413      	add	r3, r2
 800840c:	e7e0      	b.n	80083d0 <_printf_float+0x1a0>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	055a      	lsls	r2, r3, #21
 8008412:	d407      	bmi.n	8008424 <_printf_float+0x1f4>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	4642      	mov	r2, r8
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	d12c      	bne.n	800847c <_printf_float+0x24c>
 8008422:	e764      	b.n	80082ee <_printf_float+0xbe>
 8008424:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008428:	f240 80e0 	bls.w	80085ec <_printf_float+0x3bc>
 800842c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008430:	2200      	movs	r2, #0
 8008432:	2300      	movs	r3, #0
 8008434:	f7f8 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8008438:	2800      	cmp	r0, #0
 800843a:	d034      	beq.n	80084a6 <_printf_float+0x276>
 800843c:	4a37      	ldr	r2, [pc, #220]	; (800851c <_printf_float+0x2ec>)
 800843e:	2301      	movs	r3, #1
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af51 	beq.w	80082ee <_printf_float+0xbe>
 800844c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008450:	429a      	cmp	r2, r3
 8008452:	db02      	blt.n	800845a <_printf_float+0x22a>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	07d8      	lsls	r0, r3, #31
 8008458:	d510      	bpl.n	800847c <_printf_float+0x24c>
 800845a:	ee18 3a10 	vmov	r3, s16
 800845e:	4652      	mov	r2, sl
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af41 	beq.w	80082ee <_printf_float+0xbe>
 800846c:	f04f 0800 	mov.w	r8, #0
 8008470:	f104 091a 	add.w	r9, r4, #26
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	4543      	cmp	r3, r8
 800847a:	dc09      	bgt.n	8008490 <_printf_float+0x260>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	f100 8107 	bmi.w	8008692 <_printf_float+0x462>
 8008484:	68e0      	ldr	r0, [r4, #12]
 8008486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008488:	4298      	cmp	r0, r3
 800848a:	bfb8      	it	lt
 800848c:	4618      	movlt	r0, r3
 800848e:	e730      	b.n	80082f2 <_printf_float+0xc2>
 8008490:	2301      	movs	r3, #1
 8008492:	464a      	mov	r2, r9
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af27 	beq.w	80082ee <_printf_float+0xbe>
 80084a0:	f108 0801 	add.w	r8, r8, #1
 80084a4:	e7e6      	b.n	8008474 <_printf_float+0x244>
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc39      	bgt.n	8008520 <_printf_float+0x2f0>
 80084ac:	4a1b      	ldr	r2, [pc, #108]	; (800851c <_printf_float+0x2ec>)
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af19 	beq.w	80082ee <_printf_float+0xbe>
 80084bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80084c0:	4313      	orrs	r3, r2
 80084c2:	d102      	bne.n	80084ca <_printf_float+0x29a>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07d9      	lsls	r1, r3, #31
 80084c8:	d5d8      	bpl.n	800847c <_printf_float+0x24c>
 80084ca:	ee18 3a10 	vmov	r3, s16
 80084ce:	4652      	mov	r2, sl
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af09 	beq.w	80082ee <_printf_float+0xbe>
 80084dc:	f04f 0900 	mov.w	r9, #0
 80084e0:	f104 0a1a 	add.w	sl, r4, #26
 80084e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e6:	425b      	negs	r3, r3
 80084e8:	454b      	cmp	r3, r9
 80084ea:	dc01      	bgt.n	80084f0 <_printf_float+0x2c0>
 80084ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ee:	e792      	b.n	8008416 <_printf_float+0x1e6>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f aef7 	beq.w	80082ee <_printf_float+0xbe>
 8008500:	f109 0901 	add.w	r9, r9, #1
 8008504:	e7ee      	b.n	80084e4 <_printf_float+0x2b4>
 8008506:	bf00      	nop
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	0800f584 	.word	0x0800f584
 8008510:	0800f588 	.word	0x0800f588
 8008514:	0800f58c 	.word	0x0800f58c
 8008518:	0800f590 	.word	0x0800f590
 800851c:	0800f594 	.word	0x0800f594
 8008520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008524:	429a      	cmp	r2, r3
 8008526:	bfa8      	it	ge
 8008528:	461a      	movge	r2, r3
 800852a:	2a00      	cmp	r2, #0
 800852c:	4691      	mov	r9, r2
 800852e:	dc37      	bgt.n	80085a0 <_printf_float+0x370>
 8008530:	f04f 0b00 	mov.w	fp, #0
 8008534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008538:	f104 021a 	add.w	r2, r4, #26
 800853c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	eba3 0309 	sub.w	r3, r3, r9
 8008544:	455b      	cmp	r3, fp
 8008546:	dc33      	bgt.n	80085b0 <_printf_float+0x380>
 8008548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800854c:	429a      	cmp	r2, r3
 800854e:	db3b      	blt.n	80085c8 <_printf_float+0x398>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d438      	bmi.n	80085c8 <_printf_float+0x398>
 8008556:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800855a:	eba2 0903 	sub.w	r9, r2, r3
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	4591      	cmp	r9, r2
 8008564:	bfa8      	it	ge
 8008566:	4691      	movge	r9, r2
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dc35      	bgt.n	80085da <_printf_float+0x3aa>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008576:	f104 0a1a 	add.w	sl, r4, #26
 800857a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	eba3 0309 	sub.w	r3, r3, r9
 8008584:	4543      	cmp	r3, r8
 8008586:	f77f af79 	ble.w	800847c <_printf_float+0x24c>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f aeaa 	beq.w	80082ee <_printf_float+0xbe>
 800859a:	f108 0801 	add.w	r8, r8, #1
 800859e:	e7ec      	b.n	800857a <_printf_float+0x34a>
 80085a0:	4613      	mov	r3, r2
 80085a2:	4631      	mov	r1, r6
 80085a4:	4642      	mov	r2, r8
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	d1c0      	bne.n	8008530 <_printf_float+0x300>
 80085ae:	e69e      	b.n	80082ee <_printf_float+0xbe>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	9205      	str	r2, [sp, #20]
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f ae97 	beq.w	80082ee <_printf_float+0xbe>
 80085c0:	9a05      	ldr	r2, [sp, #20]
 80085c2:	f10b 0b01 	add.w	fp, fp, #1
 80085c6:	e7b9      	b.n	800853c <_printf_float+0x30c>
 80085c8:	ee18 3a10 	vmov	r3, s16
 80085cc:	4652      	mov	r2, sl
 80085ce:	4631      	mov	r1, r6
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	d1be      	bne.n	8008556 <_printf_float+0x326>
 80085d8:	e689      	b.n	80082ee <_printf_float+0xbe>
 80085da:	9a05      	ldr	r2, [sp, #20]
 80085dc:	464b      	mov	r3, r9
 80085de:	4442      	add	r2, r8
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	d1c1      	bne.n	800856e <_printf_float+0x33e>
 80085ea:	e680      	b.n	80082ee <_printf_float+0xbe>
 80085ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ee:	2a01      	cmp	r2, #1
 80085f0:	dc01      	bgt.n	80085f6 <_printf_float+0x3c6>
 80085f2:	07db      	lsls	r3, r3, #31
 80085f4:	d53a      	bpl.n	800866c <_printf_float+0x43c>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4642      	mov	r2, r8
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	f43f ae74 	beq.w	80082ee <_printf_float+0xbe>
 8008606:	ee18 3a10 	vmov	r3, s16
 800860a:	4652      	mov	r2, sl
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f ae6b 	beq.w	80082ee <_printf_float+0xbe>
 8008618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008624:	f7f8 fa60 	bl	8000ae8 <__aeabi_dcmpeq>
 8008628:	b9d8      	cbnz	r0, 8008662 <_printf_float+0x432>
 800862a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800862e:	f108 0201 	add.w	r2, r8, #1
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d10e      	bne.n	800865a <_printf_float+0x42a>
 800863c:	e657      	b.n	80082ee <_printf_float+0xbe>
 800863e:	2301      	movs	r3, #1
 8008640:	4652      	mov	r2, sl
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae50 	beq.w	80082ee <_printf_float+0xbe>
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008654:	3b01      	subs	r3, #1
 8008656:	4543      	cmp	r3, r8
 8008658:	dcf1      	bgt.n	800863e <_printf_float+0x40e>
 800865a:	464b      	mov	r3, r9
 800865c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008660:	e6da      	b.n	8008418 <_printf_float+0x1e8>
 8008662:	f04f 0800 	mov.w	r8, #0
 8008666:	f104 0a1a 	add.w	sl, r4, #26
 800866a:	e7f2      	b.n	8008652 <_printf_float+0x422>
 800866c:	2301      	movs	r3, #1
 800866e:	4642      	mov	r2, r8
 8008670:	e7df      	b.n	8008632 <_printf_float+0x402>
 8008672:	2301      	movs	r3, #1
 8008674:	464a      	mov	r2, r9
 8008676:	4631      	mov	r1, r6
 8008678:	4628      	mov	r0, r5
 800867a:	47b8      	blx	r7
 800867c:	3001      	adds	r0, #1
 800867e:	f43f ae36 	beq.w	80082ee <_printf_float+0xbe>
 8008682:	f108 0801 	add.w	r8, r8, #1
 8008686:	68e3      	ldr	r3, [r4, #12]
 8008688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	4543      	cmp	r3, r8
 800868e:	dcf0      	bgt.n	8008672 <_printf_float+0x442>
 8008690:	e6f8      	b.n	8008484 <_printf_float+0x254>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	f104 0919 	add.w	r9, r4, #25
 800869a:	e7f4      	b.n	8008686 <_printf_float+0x456>

0800869c <_printf_common>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4616      	mov	r6, r2
 80086a2:	4699      	mov	r9, r3
 80086a4:	688a      	ldr	r2, [r1, #8]
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bfb8      	it	lt
 80086b0:	4613      	movlt	r3, r2
 80086b2:	6033      	str	r3, [r6, #0]
 80086b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b8:	4607      	mov	r7, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b10a      	cbz	r2, 80086c2 <_printf_common+0x26>
 80086be:	3301      	adds	r3, #1
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	0699      	lsls	r1, r3, #26
 80086c6:	bf42      	ittt	mi
 80086c8:	6833      	ldrmi	r3, [r6, #0]
 80086ca:	3302      	addmi	r3, #2
 80086cc:	6033      	strmi	r3, [r6, #0]
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	f015 0506 	ands.w	r5, r5, #6
 80086d4:	d106      	bne.n	80086e4 <_printf_common+0x48>
 80086d6:	f104 0a19 	add.w	sl, r4, #25
 80086da:	68e3      	ldr	r3, [r4, #12]
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	dc26      	bgt.n	8008732 <_printf_common+0x96>
 80086e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e8:	1e13      	subs	r3, r2, #0
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	0692      	lsls	r2, r2, #26
 80086f2:	d42b      	bmi.n	800874c <_printf_common+0xb0>
 80086f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f8:	4649      	mov	r1, r9
 80086fa:	4638      	mov	r0, r7
 80086fc:	47c0      	blx	r8
 80086fe:	3001      	adds	r0, #1
 8008700:	d01e      	beq.n	8008740 <_printf_common+0xa4>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	6922      	ldr	r2, [r4, #16]
 8008706:	f003 0306 	and.w	r3, r3, #6
 800870a:	2b04      	cmp	r3, #4
 800870c:	bf02      	ittt	eq
 800870e:	68e5      	ldreq	r5, [r4, #12]
 8008710:	6833      	ldreq	r3, [r6, #0]
 8008712:	1aed      	subeq	r5, r5, r3
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	bf0c      	ite	eq
 8008718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800871c:	2500      	movne	r5, #0
 800871e:	4293      	cmp	r3, r2
 8008720:	bfc4      	itt	gt
 8008722:	1a9b      	subgt	r3, r3, r2
 8008724:	18ed      	addgt	r5, r5, r3
 8008726:	2600      	movs	r6, #0
 8008728:	341a      	adds	r4, #26
 800872a:	42b5      	cmp	r5, r6
 800872c:	d11a      	bne.n	8008764 <_printf_common+0xc8>
 800872e:	2000      	movs	r0, #0
 8008730:	e008      	b.n	8008744 <_printf_common+0xa8>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4649      	mov	r1, r9
 8008738:	4638      	mov	r0, r7
 800873a:	47c0      	blx	r8
 800873c:	3001      	adds	r0, #1
 800873e:	d103      	bne.n	8008748 <_printf_common+0xac>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008748:	3501      	adds	r5, #1
 800874a:	e7c6      	b.n	80086da <_printf_common+0x3e>
 800874c:	18e1      	adds	r1, r4, r3
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	2030      	movs	r0, #48	; 0x30
 8008752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008756:	4422      	add	r2, r4
 8008758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800875c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008760:	3302      	adds	r3, #2
 8008762:	e7c7      	b.n	80086f4 <_printf_common+0x58>
 8008764:	2301      	movs	r3, #1
 8008766:	4622      	mov	r2, r4
 8008768:	4649      	mov	r1, r9
 800876a:	4638      	mov	r0, r7
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d0e6      	beq.n	8008740 <_printf_common+0xa4>
 8008772:	3601      	adds	r6, #1
 8008774:	e7d9      	b.n	800872a <_printf_common+0x8e>
	...

08008778 <_printf_i>:
 8008778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	7e0f      	ldrb	r7, [r1, #24]
 800877e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008780:	2f78      	cmp	r7, #120	; 0x78
 8008782:	4691      	mov	r9, r2
 8008784:	4680      	mov	r8, r0
 8008786:	460c      	mov	r4, r1
 8008788:	469a      	mov	sl, r3
 800878a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800878e:	d807      	bhi.n	80087a0 <_printf_i+0x28>
 8008790:	2f62      	cmp	r7, #98	; 0x62
 8008792:	d80a      	bhi.n	80087aa <_printf_i+0x32>
 8008794:	2f00      	cmp	r7, #0
 8008796:	f000 80d4 	beq.w	8008942 <_printf_i+0x1ca>
 800879a:	2f58      	cmp	r7, #88	; 0x58
 800879c:	f000 80c0 	beq.w	8008920 <_printf_i+0x1a8>
 80087a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a8:	e03a      	b.n	8008820 <_printf_i+0xa8>
 80087aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ae:	2b15      	cmp	r3, #21
 80087b0:	d8f6      	bhi.n	80087a0 <_printf_i+0x28>
 80087b2:	a101      	add	r1, pc, #4	; (adr r1, 80087b8 <_printf_i+0x40>)
 80087b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008825 	.word	0x08008825
 80087c0:	080087a1 	.word	0x080087a1
 80087c4:	080087a1 	.word	0x080087a1
 80087c8:	080087a1 	.word	0x080087a1
 80087cc:	080087a1 	.word	0x080087a1
 80087d0:	08008825 	.word	0x08008825
 80087d4:	080087a1 	.word	0x080087a1
 80087d8:	080087a1 	.word	0x080087a1
 80087dc:	080087a1 	.word	0x080087a1
 80087e0:	080087a1 	.word	0x080087a1
 80087e4:	08008929 	.word	0x08008929
 80087e8:	08008851 	.word	0x08008851
 80087ec:	080088e3 	.word	0x080088e3
 80087f0:	080087a1 	.word	0x080087a1
 80087f4:	080087a1 	.word	0x080087a1
 80087f8:	0800894b 	.word	0x0800894b
 80087fc:	080087a1 	.word	0x080087a1
 8008800:	08008851 	.word	0x08008851
 8008804:	080087a1 	.word	0x080087a1
 8008808:	080087a1 	.word	0x080087a1
 800880c:	080088eb 	.word	0x080088eb
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	602a      	str	r2, [r5, #0]
 8008818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008820:	2301      	movs	r3, #1
 8008822:	e09f      	b.n	8008964 <_printf_i+0x1ec>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	0607      	lsls	r7, r0, #24
 800882a:	f103 0104 	add.w	r1, r3, #4
 800882e:	6029      	str	r1, [r5, #0]
 8008830:	d501      	bpl.n	8008836 <_printf_i+0xbe>
 8008832:	681e      	ldr	r6, [r3, #0]
 8008834:	e003      	b.n	800883e <_printf_i+0xc6>
 8008836:	0646      	lsls	r6, r0, #25
 8008838:	d5fb      	bpl.n	8008832 <_printf_i+0xba>
 800883a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800883e:	2e00      	cmp	r6, #0
 8008840:	da03      	bge.n	800884a <_printf_i+0xd2>
 8008842:	232d      	movs	r3, #45	; 0x2d
 8008844:	4276      	negs	r6, r6
 8008846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884a:	485a      	ldr	r0, [pc, #360]	; (80089b4 <_printf_i+0x23c>)
 800884c:	230a      	movs	r3, #10
 800884e:	e012      	b.n	8008876 <_printf_i+0xfe>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	6029      	str	r1, [r5, #0]
 8008858:	0605      	lsls	r5, r0, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xe8>
 800885c:	681e      	ldr	r6, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xee>
 8008860:	0641      	lsls	r1, r0, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe4>
 8008864:	881e      	ldrh	r6, [r3, #0]
 8008866:	4853      	ldr	r0, [pc, #332]	; (80089b4 <_printf_i+0x23c>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6865      	ldr	r5, [r4, #4]
 8008878:	60a5      	str	r5, [r4, #8]
 800887a:	2d00      	cmp	r5, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90e      	cbnz	r6, 800888c <_printf_i+0x114>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d04b      	beq.n	8008924 <_printf_i+0x1ac>
 800888c:	4615      	mov	r5, r2
 800888e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008892:	fb03 6711 	mls	r7, r3, r1, r6
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800889c:	4637      	mov	r7, r6
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460e      	mov	r6, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x116>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x148>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07de      	lsls	r6, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x148>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee4 	bl	800869c <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14a      	bne.n	800896e <_printf_i+0x1f6>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f043 0320 	orr.w	r3, r3, #32
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	4833      	ldr	r0, [pc, #204]	; (80089b8 <_printf_i+0x240>)
 80088ec:	2778      	movs	r7, #120	; 0x78
 80088ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	6829      	ldr	r1, [r5, #0]
 80088f6:	061f      	lsls	r7, r3, #24
 80088f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088fc:	d402      	bmi.n	8008904 <_printf_i+0x18c>
 80088fe:	065f      	lsls	r7, r3, #25
 8008900:	bf48      	it	mi
 8008902:	b2b6      	uxthmi	r6, r6
 8008904:	07df      	lsls	r7, r3, #31
 8008906:	bf48      	it	mi
 8008908:	f043 0320 	orrmi.w	r3, r3, #32
 800890c:	6029      	str	r1, [r5, #0]
 800890e:	bf48      	it	mi
 8008910:	6023      	strmi	r3, [r4, #0]
 8008912:	b91e      	cbnz	r6, 800891c <_printf_i+0x1a4>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	f023 0320 	bic.w	r3, r3, #32
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	2310      	movs	r3, #16
 800891e:	e7a7      	b.n	8008870 <_printf_i+0xf8>
 8008920:	4824      	ldr	r0, [pc, #144]	; (80089b4 <_printf_i+0x23c>)
 8008922:	e7e4      	b.n	80088ee <_printf_i+0x176>
 8008924:	4615      	mov	r5, r2
 8008926:	e7bd      	b.n	80088a4 <_printf_i+0x12c>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6826      	ldr	r6, [r4, #0]
 800892c:	6961      	ldr	r1, [r4, #20]
 800892e:	1d18      	adds	r0, r3, #4
 8008930:	6028      	str	r0, [r5, #0]
 8008932:	0635      	lsls	r5, r6, #24
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	d501      	bpl.n	800893c <_printf_i+0x1c4>
 8008938:	6019      	str	r1, [r3, #0]
 800893a:	e002      	b.n	8008942 <_printf_i+0x1ca>
 800893c:	0670      	lsls	r0, r6, #25
 800893e:	d5fb      	bpl.n	8008938 <_printf_i+0x1c0>
 8008940:	8019      	strh	r1, [r3, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	4615      	mov	r5, r2
 8008948:	e7bc      	b.n	80088c4 <_printf_i+0x14c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	1d1a      	adds	r2, r3, #4
 800894e:	602a      	str	r2, [r5, #0]
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	6862      	ldr	r2, [r4, #4]
 8008954:	2100      	movs	r1, #0
 8008956:	4628      	mov	r0, r5
 8008958:	f7f7 fc4a 	bl	80001f0 <memchr>
 800895c:	b108      	cbz	r0, 8008962 <_printf_i+0x1ea>
 800895e:	1b40      	subs	r0, r0, r5
 8008960:	6060      	str	r0, [r4, #4]
 8008962:	6863      	ldr	r3, [r4, #4]
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	2300      	movs	r3, #0
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	e7aa      	b.n	80088c4 <_printf_i+0x14c>
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	462a      	mov	r2, r5
 8008972:	4649      	mov	r1, r9
 8008974:	4640      	mov	r0, r8
 8008976:	47d0      	blx	sl
 8008978:	3001      	adds	r0, #1
 800897a:	d0ad      	beq.n	80088d8 <_printf_i+0x160>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	079b      	lsls	r3, r3, #30
 8008980:	d413      	bmi.n	80089aa <_printf_i+0x232>
 8008982:	68e0      	ldr	r0, [r4, #12]
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	4298      	cmp	r0, r3
 8008988:	bfb8      	it	lt
 800898a:	4618      	movlt	r0, r3
 800898c:	e7a6      	b.n	80088dc <_printf_i+0x164>
 800898e:	2301      	movs	r3, #1
 8008990:	4632      	mov	r2, r6
 8008992:	4649      	mov	r1, r9
 8008994:	4640      	mov	r0, r8
 8008996:	47d0      	blx	sl
 8008998:	3001      	adds	r0, #1
 800899a:	d09d      	beq.n	80088d8 <_printf_i+0x160>
 800899c:	3501      	adds	r5, #1
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	9903      	ldr	r1, [sp, #12]
 80089a2:	1a5b      	subs	r3, r3, r1
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dcf2      	bgt.n	800898e <_printf_i+0x216>
 80089a8:	e7eb      	b.n	8008982 <_printf_i+0x20a>
 80089aa:	2500      	movs	r5, #0
 80089ac:	f104 0619 	add.w	r6, r4, #25
 80089b0:	e7f5      	b.n	800899e <_printf_i+0x226>
 80089b2:	bf00      	nop
 80089b4:	0800f596 	.word	0x0800f596
 80089b8:	0800f5a7 	.word	0x0800f5a7

080089bc <_scanf_float>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	b087      	sub	sp, #28
 80089c2:	4617      	mov	r7, r2
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	688b      	ldr	r3, [r1, #8]
 80089c8:	1e5a      	subs	r2, r3, #1
 80089ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089ce:	bf83      	ittte	hi
 80089d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089d4:	195b      	addhi	r3, r3, r5
 80089d6:	9302      	strhi	r3, [sp, #8]
 80089d8:	2300      	movls	r3, #0
 80089da:	bf86      	itte	hi
 80089dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089e0:	608b      	strhi	r3, [r1, #8]
 80089e2:	9302      	strls	r3, [sp, #8]
 80089e4:	680b      	ldr	r3, [r1, #0]
 80089e6:	468b      	mov	fp, r1
 80089e8:	2500      	movs	r5, #0
 80089ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80089f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089f6:	4680      	mov	r8, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	465e      	mov	r6, fp
 80089fc:	46aa      	mov	sl, r5
 80089fe:	46a9      	mov	r9, r5
 8008a00:	9501      	str	r5, [sp, #4]
 8008a02:	68a2      	ldr	r2, [r4, #8]
 8008a04:	b152      	cbz	r2, 8008a1c <_scanf_float+0x60>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	2b4e      	cmp	r3, #78	; 0x4e
 8008a0c:	d864      	bhi.n	8008ad8 <_scanf_float+0x11c>
 8008a0e:	2b40      	cmp	r3, #64	; 0x40
 8008a10:	d83c      	bhi.n	8008a8c <_scanf_float+0xd0>
 8008a12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008a16:	b2c8      	uxtb	r0, r1
 8008a18:	280e      	cmp	r0, #14
 8008a1a:	d93a      	bls.n	8008a92 <_scanf_float+0xd6>
 8008a1c:	f1b9 0f00 	cmp.w	r9, #0
 8008a20:	d003      	beq.n	8008a2a <_scanf_float+0x6e>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a2e:	f1ba 0f01 	cmp.w	sl, #1
 8008a32:	f200 8113 	bhi.w	8008c5c <_scanf_float+0x2a0>
 8008a36:	455e      	cmp	r6, fp
 8008a38:	f200 8105 	bhi.w	8008c46 <_scanf_float+0x28a>
 8008a3c:	2501      	movs	r5, #1
 8008a3e:	4628      	mov	r0, r5
 8008a40:	b007      	add	sp, #28
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a4a:	2a0d      	cmp	r2, #13
 8008a4c:	d8e6      	bhi.n	8008a1c <_scanf_float+0x60>
 8008a4e:	a101      	add	r1, pc, #4	; (adr r1, 8008a54 <_scanf_float+0x98>)
 8008a50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a54:	08008b93 	.word	0x08008b93
 8008a58:	08008a1d 	.word	0x08008a1d
 8008a5c:	08008a1d 	.word	0x08008a1d
 8008a60:	08008a1d 	.word	0x08008a1d
 8008a64:	08008bf3 	.word	0x08008bf3
 8008a68:	08008bcb 	.word	0x08008bcb
 8008a6c:	08008a1d 	.word	0x08008a1d
 8008a70:	08008a1d 	.word	0x08008a1d
 8008a74:	08008ba1 	.word	0x08008ba1
 8008a78:	08008a1d 	.word	0x08008a1d
 8008a7c:	08008a1d 	.word	0x08008a1d
 8008a80:	08008a1d 	.word	0x08008a1d
 8008a84:	08008a1d 	.word	0x08008a1d
 8008a88:	08008b59 	.word	0x08008b59
 8008a8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a90:	e7db      	b.n	8008a4a <_scanf_float+0x8e>
 8008a92:	290e      	cmp	r1, #14
 8008a94:	d8c2      	bhi.n	8008a1c <_scanf_float+0x60>
 8008a96:	a001      	add	r0, pc, #4	; (adr r0, 8008a9c <_scanf_float+0xe0>)
 8008a98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a9c:	08008b4b 	.word	0x08008b4b
 8008aa0:	08008a1d 	.word	0x08008a1d
 8008aa4:	08008b4b 	.word	0x08008b4b
 8008aa8:	08008bdf 	.word	0x08008bdf
 8008aac:	08008a1d 	.word	0x08008a1d
 8008ab0:	08008af9 	.word	0x08008af9
 8008ab4:	08008b35 	.word	0x08008b35
 8008ab8:	08008b35 	.word	0x08008b35
 8008abc:	08008b35 	.word	0x08008b35
 8008ac0:	08008b35 	.word	0x08008b35
 8008ac4:	08008b35 	.word	0x08008b35
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008b35 	.word	0x08008b35
 8008ad8:	2b6e      	cmp	r3, #110	; 0x6e
 8008ada:	d809      	bhi.n	8008af0 <_scanf_float+0x134>
 8008adc:	2b60      	cmp	r3, #96	; 0x60
 8008ade:	d8b2      	bhi.n	8008a46 <_scanf_float+0x8a>
 8008ae0:	2b54      	cmp	r3, #84	; 0x54
 8008ae2:	d077      	beq.n	8008bd4 <_scanf_float+0x218>
 8008ae4:	2b59      	cmp	r3, #89	; 0x59
 8008ae6:	d199      	bne.n	8008a1c <_scanf_float+0x60>
 8008ae8:	2d07      	cmp	r5, #7
 8008aea:	d197      	bne.n	8008a1c <_scanf_float+0x60>
 8008aec:	2508      	movs	r5, #8
 8008aee:	e029      	b.n	8008b44 <_scanf_float+0x188>
 8008af0:	2b74      	cmp	r3, #116	; 0x74
 8008af2:	d06f      	beq.n	8008bd4 <_scanf_float+0x218>
 8008af4:	2b79      	cmp	r3, #121	; 0x79
 8008af6:	e7f6      	b.n	8008ae6 <_scanf_float+0x12a>
 8008af8:	6821      	ldr	r1, [r4, #0]
 8008afa:	05c8      	lsls	r0, r1, #23
 8008afc:	d51a      	bpl.n	8008b34 <_scanf_float+0x178>
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b04:	6021      	str	r1, [r4, #0]
 8008b06:	f109 0901 	add.w	r9, r9, #1
 8008b0a:	b11b      	cbz	r3, 8008b14 <_scanf_float+0x158>
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	3201      	adds	r2, #1
 8008b10:	9302      	str	r3, [sp, #8]
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	68a3      	ldr	r3, [r4, #8]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	60a3      	str	r3, [r4, #8]
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	607b      	str	r3, [r7, #4]
 8008b28:	f340 8084 	ble.w	8008c34 <_scanf_float+0x278>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	603b      	str	r3, [r7, #0]
 8008b32:	e766      	b.n	8008a02 <_scanf_float+0x46>
 8008b34:	eb1a 0f05 	cmn.w	sl, r5
 8008b38:	f47f af70 	bne.w	8008a1c <_scanf_float+0x60>
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	f806 3b01 	strb.w	r3, [r6], #1
 8008b48:	e7e4      	b.n	8008b14 <_scanf_float+0x158>
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	0610      	lsls	r0, r2, #24
 8008b4e:	f57f af65 	bpl.w	8008a1c <_scanf_float+0x60>
 8008b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b56:	e7f4      	b.n	8008b42 <_scanf_float+0x186>
 8008b58:	f1ba 0f00 	cmp.w	sl, #0
 8008b5c:	d10e      	bne.n	8008b7c <_scanf_float+0x1c0>
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	d10e      	bne.n	8008b82 <_scanf_float+0x1c6>
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b6e:	d108      	bne.n	8008b82 <_scanf_float+0x1c6>
 8008b70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b74:	6022      	str	r2, [r4, #0]
 8008b76:	f04f 0a01 	mov.w	sl, #1
 8008b7a:	e7e3      	b.n	8008b44 <_scanf_float+0x188>
 8008b7c:	f1ba 0f02 	cmp.w	sl, #2
 8008b80:	d055      	beq.n	8008c2e <_scanf_float+0x272>
 8008b82:	2d01      	cmp	r5, #1
 8008b84:	d002      	beq.n	8008b8c <_scanf_float+0x1d0>
 8008b86:	2d04      	cmp	r5, #4
 8008b88:	f47f af48 	bne.w	8008a1c <_scanf_float+0x60>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	b2ed      	uxtb	r5, r5
 8008b90:	e7d8      	b.n	8008b44 <_scanf_float+0x188>
 8008b92:	f1ba 0f01 	cmp.w	sl, #1
 8008b96:	f47f af41 	bne.w	8008a1c <_scanf_float+0x60>
 8008b9a:	f04f 0a02 	mov.w	sl, #2
 8008b9e:	e7d1      	b.n	8008b44 <_scanf_float+0x188>
 8008ba0:	b97d      	cbnz	r5, 8008bc2 <_scanf_float+0x206>
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	f47f af3c 	bne.w	8008a22 <_scanf_float+0x66>
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008bb0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008bb4:	f47f af39 	bne.w	8008a2a <_scanf_float+0x6e>
 8008bb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	2501      	movs	r5, #1
 8008bc0:	e7c0      	b.n	8008b44 <_scanf_float+0x188>
 8008bc2:	2d03      	cmp	r5, #3
 8008bc4:	d0e2      	beq.n	8008b8c <_scanf_float+0x1d0>
 8008bc6:	2d05      	cmp	r5, #5
 8008bc8:	e7de      	b.n	8008b88 <_scanf_float+0x1cc>
 8008bca:	2d02      	cmp	r5, #2
 8008bcc:	f47f af26 	bne.w	8008a1c <_scanf_float+0x60>
 8008bd0:	2503      	movs	r5, #3
 8008bd2:	e7b7      	b.n	8008b44 <_scanf_float+0x188>
 8008bd4:	2d06      	cmp	r5, #6
 8008bd6:	f47f af21 	bne.w	8008a1c <_scanf_float+0x60>
 8008bda:	2507      	movs	r5, #7
 8008bdc:	e7b2      	b.n	8008b44 <_scanf_float+0x188>
 8008bde:	6822      	ldr	r2, [r4, #0]
 8008be0:	0591      	lsls	r1, r2, #22
 8008be2:	f57f af1b 	bpl.w	8008a1c <_scanf_float+0x60>
 8008be6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bf0:	e7a8      	b.n	8008b44 <_scanf_float+0x188>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bf8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008bfc:	d006      	beq.n	8008c0c <_scanf_float+0x250>
 8008bfe:	0550      	lsls	r0, r2, #21
 8008c00:	f57f af0c 	bpl.w	8008a1c <_scanf_float+0x60>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	f43f af0f 	beq.w	8008a2a <_scanf_float+0x6e>
 8008c0c:	0591      	lsls	r1, r2, #22
 8008c0e:	bf58      	it	pl
 8008c10:	9901      	ldrpl	r1, [sp, #4]
 8008c12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c16:	bf58      	it	pl
 8008c18:	eba9 0101 	subpl.w	r1, r9, r1
 8008c1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c20:	bf58      	it	pl
 8008c22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	f04f 0900 	mov.w	r9, #0
 8008c2c:	e78a      	b.n	8008b44 <_scanf_float+0x188>
 8008c2e:	f04f 0a03 	mov.w	sl, #3
 8008c32:	e787      	b.n	8008b44 <_scanf_float+0x188>
 8008c34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4798      	blx	r3
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f43f aedf 	beq.w	8008a02 <_scanf_float+0x46>
 8008c44:	e6ea      	b.n	8008a1c <_scanf_float+0x60>
 8008c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c4e:	463a      	mov	r2, r7
 8008c50:	4640      	mov	r0, r8
 8008c52:	4798      	blx	r3
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	e6ec      	b.n	8008a36 <_scanf_float+0x7a>
 8008c5c:	1e6b      	subs	r3, r5, #1
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d825      	bhi.n	8008cae <_scanf_float+0x2f2>
 8008c62:	2d02      	cmp	r5, #2
 8008c64:	d836      	bhi.n	8008cd4 <_scanf_float+0x318>
 8008c66:	455e      	cmp	r6, fp
 8008c68:	f67f aee8 	bls.w	8008a3c <_scanf_float+0x80>
 8008c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c74:	463a      	mov	r2, r7
 8008c76:	4640      	mov	r0, r8
 8008c78:	4798      	blx	r3
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	e7f1      	b.n	8008c66 <_scanf_float+0x2aa>
 8008c82:	9802      	ldr	r0, [sp, #8]
 8008c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c8c:	9002      	str	r0, [sp, #8]
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4640      	mov	r0, r8
 8008c92:	4798      	blx	r3
 8008c94:	6923      	ldr	r3, [r4, #16]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c9e:	fa5f fa8a 	uxtb.w	sl, sl
 8008ca2:	f1ba 0f02 	cmp.w	sl, #2
 8008ca6:	d1ec      	bne.n	8008c82 <_scanf_float+0x2c6>
 8008ca8:	3d03      	subs	r5, #3
 8008caa:	b2ed      	uxtb	r5, r5
 8008cac:	1b76      	subs	r6, r6, r5
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	05da      	lsls	r2, r3, #23
 8008cb2:	d52f      	bpl.n	8008d14 <_scanf_float+0x358>
 8008cb4:	055b      	lsls	r3, r3, #21
 8008cb6:	d510      	bpl.n	8008cda <_scanf_float+0x31e>
 8008cb8:	455e      	cmp	r6, fp
 8008cba:	f67f aebf 	bls.w	8008a3c <_scanf_float+0x80>
 8008cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4798      	blx	r3
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	e7f1      	b.n	8008cb8 <_scanf_float+0x2fc>
 8008cd4:	46aa      	mov	sl, r5
 8008cd6:	9602      	str	r6, [sp, #8]
 8008cd8:	e7df      	b.n	8008c9a <_scanf_float+0x2de>
 8008cda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	2965      	cmp	r1, #101	; 0x65
 8008ce2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ce6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	d00c      	beq.n	8008d08 <_scanf_float+0x34c>
 8008cee:	2945      	cmp	r1, #69	; 0x45
 8008cf0:	d00a      	beq.n	8008d08 <_scanf_float+0x34c>
 8008cf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4798      	blx	r3
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	1eb5      	subs	r5, r6, #2
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d0c:	463a      	mov	r2, r7
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4798      	blx	r3
 8008d12:	462e      	mov	r6, r5
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	f015 0510 	ands.w	r5, r5, #16
 8008d1a:	d158      	bne.n	8008dce <_scanf_float+0x412>
 8008d1c:	7035      	strb	r5, [r6, #0]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d28:	d11c      	bne.n	8008d64 <_scanf_float+0x3a8>
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	454b      	cmp	r3, r9
 8008d2e:	eba3 0209 	sub.w	r2, r3, r9
 8008d32:	d124      	bne.n	8008d7e <_scanf_float+0x3c2>
 8008d34:	2200      	movs	r2, #0
 8008d36:	4659      	mov	r1, fp
 8008d38:	4640      	mov	r0, r8
 8008d3a:	f002 fc31 	bl	800b5a0 <_strtod_r>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	6821      	ldr	r1, [r4, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f011 0f02 	tst.w	r1, #2
 8008d48:	ec57 6b10 	vmov	r6, r7, d0
 8008d4c:	f103 0204 	add.w	r2, r3, #4
 8008d50:	d020      	beq.n	8008d94 <_scanf_float+0x3d8>
 8008d52:	9903      	ldr	r1, [sp, #12]
 8008d54:	600a      	str	r2, [r1, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	e9c3 6700 	strd	r6, r7, [r3]
 8008d5c:	68e3      	ldr	r3, [r4, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60e3      	str	r3, [r4, #12]
 8008d62:	e66c      	b.n	8008a3e <_scanf_float+0x82>
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0e4      	beq.n	8008d34 <_scanf_float+0x378>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	462a      	mov	r2, r5
 8008d70:	3101      	adds	r1, #1
 8008d72:	4640      	mov	r0, r8
 8008d74:	f002 fc9c 	bl	800b6b0 <_strtol_r>
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	9e05      	ldr	r6, [sp, #20]
 8008d7c:	1ac2      	subs	r2, r0, r3
 8008d7e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d82:	429e      	cmp	r6, r3
 8008d84:	bf28      	it	cs
 8008d86:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d8a:	4912      	ldr	r1, [pc, #72]	; (8008dd4 <_scanf_float+0x418>)
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 f8e7 	bl	8008f60 <siprintf>
 8008d92:	e7cf      	b.n	8008d34 <_scanf_float+0x378>
 8008d94:	f011 0f04 	tst.w	r1, #4
 8008d98:	9903      	ldr	r1, [sp, #12]
 8008d9a:	600a      	str	r2, [r1, #0]
 8008d9c:	d1db      	bne.n	8008d56 <_scanf_float+0x39a>
 8008d9e:	f8d3 8000 	ldr.w	r8, [r3]
 8008da2:	ee10 2a10 	vmov	r2, s0
 8008da6:	ee10 0a10 	vmov	r0, s0
 8008daa:	463b      	mov	r3, r7
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fecd 	bl	8000b4c <__aeabi_dcmpun>
 8008db2:	b128      	cbz	r0, 8008dc0 <_scanf_float+0x404>
 8008db4:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <_scanf_float+0x41c>)
 8008db6:	f000 f9b7 	bl	8009128 <nanf>
 8008dba:	ed88 0a00 	vstr	s0, [r8]
 8008dbe:	e7cd      	b.n	8008d5c <_scanf_float+0x3a0>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	4639      	mov	r1, r7
 8008dc4:	f7f7 ff20 	bl	8000c08 <__aeabi_d2f>
 8008dc8:	f8c8 0000 	str.w	r0, [r8]
 8008dcc:	e7c6      	b.n	8008d5c <_scanf_float+0x3a0>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	e635      	b.n	8008a3e <_scanf_float+0x82>
 8008dd2:	bf00      	nop
 8008dd4:	0800f5b8 	.word	0x0800f5b8
 8008dd8:	0800f94d 	.word	0x0800f94d

08008ddc <std>:
 8008ddc:	2300      	movs	r3, #0
 8008dde:	b510      	push	{r4, lr}
 8008de0:	4604      	mov	r4, r0
 8008de2:	e9c0 3300 	strd	r3, r3, [r0]
 8008de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dea:	6083      	str	r3, [r0, #8]
 8008dec:	8181      	strh	r1, [r0, #12]
 8008dee:	6643      	str	r3, [r0, #100]	; 0x64
 8008df0:	81c2      	strh	r2, [r0, #14]
 8008df2:	6183      	str	r3, [r0, #24]
 8008df4:	4619      	mov	r1, r3
 8008df6:	2208      	movs	r2, #8
 8008df8:	305c      	adds	r0, #92	; 0x5c
 8008dfa:	f000 f914 	bl	8009026 <memset>
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <std+0x58>)
 8008e00:	6263      	str	r3, [r4, #36]	; 0x24
 8008e02:	4b0d      	ldr	r3, [pc, #52]	; (8008e38 <std+0x5c>)
 8008e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e06:	4b0d      	ldr	r3, [pc, #52]	; (8008e3c <std+0x60>)
 8008e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <std+0x64>)
 8008e0c:	6323      	str	r3, [r4, #48]	; 0x30
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <std+0x68>)
 8008e10:	6224      	str	r4, [r4, #32]
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d006      	beq.n	8008e24 <std+0x48>
 8008e16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008e1a:	4294      	cmp	r4, r2
 8008e1c:	d002      	beq.n	8008e24 <std+0x48>
 8008e1e:	33d0      	adds	r3, #208	; 0xd0
 8008e20:	429c      	cmp	r4, r3
 8008e22:	d105      	bne.n	8008e30 <std+0x54>
 8008e24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e2c:	f000 b978 	b.w	8009120 <__retarget_lock_init_recursive>
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	bf00      	nop
 8008e34:	08008fa1 	.word	0x08008fa1
 8008e38:	08008fc3 	.word	0x08008fc3
 8008e3c:	08008ffb 	.word	0x08008ffb
 8008e40:	0800901f 	.word	0x0800901f
 8008e44:	200008c4 	.word	0x200008c4

08008e48 <stdio_exit_handler>:
 8008e48:	4a02      	ldr	r2, [pc, #8]	; (8008e54 <stdio_exit_handler+0xc>)
 8008e4a:	4903      	ldr	r1, [pc, #12]	; (8008e58 <stdio_exit_handler+0x10>)
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <stdio_exit_handler+0x14>)
 8008e4e:	f000 b869 	b.w	8008f24 <_fwalk_sglue>
 8008e52:	bf00      	nop
 8008e54:	20000060 	.word	0x20000060
 8008e58:	0800ba71 	.word	0x0800ba71
 8008e5c:	2000006c 	.word	0x2000006c

08008e60 <cleanup_stdio>:
 8008e60:	6841      	ldr	r1, [r0, #4]
 8008e62:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <cleanup_stdio+0x34>)
 8008e64:	4299      	cmp	r1, r3
 8008e66:	b510      	push	{r4, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	d001      	beq.n	8008e70 <cleanup_stdio+0x10>
 8008e6c:	f002 fe00 	bl	800ba70 <_fflush_r>
 8008e70:	68a1      	ldr	r1, [r4, #8]
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <cleanup_stdio+0x38>)
 8008e74:	4299      	cmp	r1, r3
 8008e76:	d002      	beq.n	8008e7e <cleanup_stdio+0x1e>
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f002 fdf9 	bl	800ba70 <_fflush_r>
 8008e7e:	68e1      	ldr	r1, [r4, #12]
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <cleanup_stdio+0x3c>)
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d004      	beq.n	8008e90 <cleanup_stdio+0x30>
 8008e86:	4620      	mov	r0, r4
 8008e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e8c:	f002 bdf0 	b.w	800ba70 <_fflush_r>
 8008e90:	bd10      	pop	{r4, pc}
 8008e92:	bf00      	nop
 8008e94:	200008c4 	.word	0x200008c4
 8008e98:	2000092c 	.word	0x2000092c
 8008e9c:	20000994 	.word	0x20000994

08008ea0 <global_stdio_init.part.0>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <global_stdio_init.part.0+0x30>)
 8008ea4:	4c0b      	ldr	r4, [pc, #44]	; (8008ed4 <global_stdio_init.part.0+0x34>)
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <global_stdio_init.part.0+0x38>)
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	2200      	movs	r2, #0
 8008eae:	2104      	movs	r1, #4
 8008eb0:	f7ff ff94 	bl	8008ddc <std>
 8008eb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008eb8:	2201      	movs	r2, #1
 8008eba:	2109      	movs	r1, #9
 8008ebc:	f7ff ff8e 	bl	8008ddc <std>
 8008ec0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eca:	2112      	movs	r1, #18
 8008ecc:	f7ff bf86 	b.w	8008ddc <std>
 8008ed0:	200009fc 	.word	0x200009fc
 8008ed4:	200008c4 	.word	0x200008c4
 8008ed8:	08008e49 	.word	0x08008e49

08008edc <__sfp_lock_acquire>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__sfp_lock_acquire+0x8>)
 8008ede:	f000 b920 	b.w	8009122 <__retarget_lock_acquire_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20000a05 	.word	0x20000a05

08008ee8 <__sfp_lock_release>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__sfp_lock_release+0x8>)
 8008eea:	f000 b91b 	b.w	8009124 <__retarget_lock_release_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20000a05 	.word	0x20000a05

08008ef4 <__sinit>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	f7ff fff0 	bl	8008edc <__sfp_lock_acquire>
 8008efc:	6a23      	ldr	r3, [r4, #32]
 8008efe:	b11b      	cbz	r3, 8008f08 <__sinit+0x14>
 8008f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f04:	f7ff bff0 	b.w	8008ee8 <__sfp_lock_release>
 8008f08:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <__sinit+0x28>)
 8008f0a:	6223      	str	r3, [r4, #32]
 8008f0c:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <__sinit+0x2c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f5      	bne.n	8008f00 <__sinit+0xc>
 8008f14:	f7ff ffc4 	bl	8008ea0 <global_stdio_init.part.0>
 8008f18:	e7f2      	b.n	8008f00 <__sinit+0xc>
 8008f1a:	bf00      	nop
 8008f1c:	08008e61 	.word	0x08008e61
 8008f20:	200009fc 	.word	0x200009fc

08008f24 <_fwalk_sglue>:
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4688      	mov	r8, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	2600      	movs	r6, #0
 8008f30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f34:	f1b9 0901 	subs.w	r9, r9, #1
 8008f38:	d505      	bpl.n	8008f46 <_fwalk_sglue+0x22>
 8008f3a:	6824      	ldr	r4, [r4, #0]
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d1f7      	bne.n	8008f30 <_fwalk_sglue+0xc>
 8008f40:	4630      	mov	r0, r6
 8008f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d907      	bls.n	8008f5c <_fwalk_sglue+0x38>
 8008f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f50:	3301      	adds	r3, #1
 8008f52:	d003      	beq.n	8008f5c <_fwalk_sglue+0x38>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c0      	blx	r8
 8008f5a:	4306      	orrs	r6, r0
 8008f5c:	3568      	adds	r5, #104	; 0x68
 8008f5e:	e7e9      	b.n	8008f34 <_fwalk_sglue+0x10>

08008f60 <siprintf>:
 8008f60:	b40e      	push	{r1, r2, r3}
 8008f62:	b500      	push	{lr}
 8008f64:	b09c      	sub	sp, #112	; 0x70
 8008f66:	ab1d      	add	r3, sp, #116	; 0x74
 8008f68:	9002      	str	r0, [sp, #8]
 8008f6a:	9006      	str	r0, [sp, #24]
 8008f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f70:	4809      	ldr	r0, [pc, #36]	; (8008f98 <siprintf+0x38>)
 8008f72:	9107      	str	r1, [sp, #28]
 8008f74:	9104      	str	r1, [sp, #16]
 8008f76:	4909      	ldr	r1, [pc, #36]	; (8008f9c <siprintf+0x3c>)
 8008f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	a902      	add	r1, sp, #8
 8008f84:	f002 fbf0 	bl	800b768 <_svfiprintf_r>
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	b01c      	add	sp, #112	; 0x70
 8008f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f94:	b003      	add	sp, #12
 8008f96:	4770      	bx	lr
 8008f98:	200000b8 	.word	0x200000b8
 8008f9c:	ffff0208 	.word	0xffff0208

08008fa0 <__sread>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	f000 f86c 	bl	8009084 <_read_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bfab      	itete	ge
 8008fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb4:	181b      	addge	r3, r3, r0
 8008fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fba:	bfac      	ite	ge
 8008fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fbe:	81a3      	strhlt	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__swrite>:
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	d505      	bpl.n	8008fe0 <__swrite+0x1e>
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f840 	bl	8009060 <_lseek_r>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	f000 b857 	b.w	80090a8 <_write_r>

08008ffa <__sseek>:
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 f82d 	bl	8009060 <_lseek_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	bf15      	itete	ne
 800900c:	6560      	strne	r0, [r4, #84]	; 0x54
 800900e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009016:	81a3      	strheq	r3, [r4, #12]
 8009018:	bf18      	it	ne
 800901a:	81a3      	strhne	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__sclose>:
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 b80d 	b.w	8009040 <_close_r>

08009026 <memset>:
 8009026:	4402      	add	r2, r0
 8009028:	4603      	mov	r3, r0
 800902a:	4293      	cmp	r3, r2
 800902c:	d100      	bne.n	8009030 <memset+0xa>
 800902e:	4770      	bx	lr
 8009030:	f803 1b01 	strb.w	r1, [r3], #1
 8009034:	e7f9      	b.n	800902a <memset+0x4>
	...

08009038 <_localeconv_r>:
 8009038:	4800      	ldr	r0, [pc, #0]	; (800903c <_localeconv_r+0x4>)
 800903a:	4770      	bx	lr
 800903c:	200001ac 	.word	0x200001ac

08009040 <_close_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d06      	ldr	r5, [pc, #24]	; (800905c <_close_r+0x1c>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	602b      	str	r3, [r5, #0]
 800904c:	f7f9 faf5 	bl	800263a <_close>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d102      	bne.n	800905a <_close_r+0x1a>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	b103      	cbz	r3, 800905a <_close_r+0x1a>
 8009058:	6023      	str	r3, [r4, #0]
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000a00 	.word	0x20000a00

08009060 <_lseek_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	; (8009080 <_lseek_r+0x20>)
 8009064:	4604      	mov	r4, r0
 8009066:	4608      	mov	r0, r1
 8009068:	4611      	mov	r1, r2
 800906a:	2200      	movs	r2, #0
 800906c:	602a      	str	r2, [r5, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	f7f9 fb0a 	bl	8002688 <_lseek>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_lseek_r+0x1e>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_lseek_r+0x1e>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20000a00 	.word	0x20000a00

08009084 <_read_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	; (80090a4 <_read_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f9 fa98 	bl	80025c8 <_read>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_read_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_read_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20000a00 	.word	0x20000a00

080090a8 <_write_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d07      	ldr	r5, [pc, #28]	; (80090c8 <_write_r+0x20>)
 80090ac:	4604      	mov	r4, r0
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	2200      	movs	r2, #0
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f9 faa3 	bl	8002602 <_write>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_write_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_write_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20000a00 	.word	0x20000a00

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	200000b8 	.word	0x200000b8

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f004 fc6c 	bl	800d9c8 <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	0800fb90 	.word	0x0800fb90
 8009114:	0800fb90 	.word	0x0800fb90
 8009118:	0800fb90 	.word	0x0800fb90
 800911c:	0800fb94 	.word	0x0800fb94

08009120 <__retarget_lock_init_recursive>:
 8009120:	4770      	bx	lr

08009122 <__retarget_lock_acquire_recursive>:
 8009122:	4770      	bx	lr

08009124 <__retarget_lock_release_recursive>:
 8009124:	4770      	bx	lr
	...

08009128 <nanf>:
 8009128:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009130 <nanf+0x8>
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	7fc00000 	.word	0x7fc00000

08009134 <quorem>:
 8009134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	6903      	ldr	r3, [r0, #16]
 800913a:	690c      	ldr	r4, [r1, #16]
 800913c:	42a3      	cmp	r3, r4
 800913e:	4607      	mov	r7, r0
 8009140:	db7e      	blt.n	8009240 <quorem+0x10c>
 8009142:	3c01      	subs	r4, #1
 8009144:	f101 0814 	add.w	r8, r1, #20
 8009148:	f100 0514 	add.w	r5, r0, #20
 800914c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800915a:	3301      	adds	r3, #1
 800915c:	429a      	cmp	r2, r3
 800915e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009162:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009166:	fbb2 f6f3 	udiv	r6, r2, r3
 800916a:	d331      	bcc.n	80091d0 <quorem+0x9c>
 800916c:	f04f 0e00 	mov.w	lr, #0
 8009170:	4640      	mov	r0, r8
 8009172:	46ac      	mov	ip, r5
 8009174:	46f2      	mov	sl, lr
 8009176:	f850 2b04 	ldr.w	r2, [r0], #4
 800917a:	b293      	uxth	r3, r2
 800917c:	fb06 e303 	mla	r3, r6, r3, lr
 8009180:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009184:	0c1a      	lsrs	r2, r3, #16
 8009186:	b29b      	uxth	r3, r3
 8009188:	ebaa 0303 	sub.w	r3, sl, r3
 800918c:	f8dc a000 	ldr.w	sl, [ip]
 8009190:	fa13 f38a 	uxtah	r3, r3, sl
 8009194:	fb06 220e 	mla	r2, r6, lr, r2
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	9b00      	ldr	r3, [sp, #0]
 800919c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091a0:	b292      	uxth	r2, r2
 80091a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80091ae:	4581      	cmp	r9, r0
 80091b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091b4:	f84c 3b04 	str.w	r3, [ip], #4
 80091b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80091bc:	d2db      	bcs.n	8009176 <quorem+0x42>
 80091be:	f855 300b 	ldr.w	r3, [r5, fp]
 80091c2:	b92b      	cbnz	r3, 80091d0 <quorem+0x9c>
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	3b04      	subs	r3, #4
 80091c8:	429d      	cmp	r5, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	d32c      	bcc.n	8009228 <quorem+0xf4>
 80091ce:	613c      	str	r4, [r7, #16]
 80091d0:	4638      	mov	r0, r7
 80091d2:	f001 f9f1 	bl	800a5b8 <__mcmp>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	db22      	blt.n	8009220 <quorem+0xec>
 80091da:	3601      	adds	r6, #1
 80091dc:	4629      	mov	r1, r5
 80091de:	2000      	movs	r0, #0
 80091e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80091e4:	f8d1 c000 	ldr.w	ip, [r1]
 80091e8:	b293      	uxth	r3, r2
 80091ea:	1ac3      	subs	r3, r0, r3
 80091ec:	0c12      	lsrs	r2, r2, #16
 80091ee:	fa13 f38c 	uxtah	r3, r3, ip
 80091f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80091f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009200:	45c1      	cmp	r9, r8
 8009202:	f841 3b04 	str.w	r3, [r1], #4
 8009206:	ea4f 4022 	mov.w	r0, r2, asr #16
 800920a:	d2e9      	bcs.n	80091e0 <quorem+0xac>
 800920c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009214:	b922      	cbnz	r2, 8009220 <quorem+0xec>
 8009216:	3b04      	subs	r3, #4
 8009218:	429d      	cmp	r5, r3
 800921a:	461a      	mov	r2, r3
 800921c:	d30a      	bcc.n	8009234 <quorem+0x100>
 800921e:	613c      	str	r4, [r7, #16]
 8009220:	4630      	mov	r0, r6
 8009222:	b003      	add	sp, #12
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	3b04      	subs	r3, #4
 800922c:	2a00      	cmp	r2, #0
 800922e:	d1ce      	bne.n	80091ce <quorem+0x9a>
 8009230:	3c01      	subs	r4, #1
 8009232:	e7c9      	b.n	80091c8 <quorem+0x94>
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	3b04      	subs	r3, #4
 8009238:	2a00      	cmp	r2, #0
 800923a:	d1f0      	bne.n	800921e <quorem+0xea>
 800923c:	3c01      	subs	r4, #1
 800923e:	e7eb      	b.n	8009218 <quorem+0xe4>
 8009240:	2000      	movs	r0, #0
 8009242:	e7ee      	b.n	8009222 <quorem+0xee>
 8009244:	0000      	movs	r0, r0
	...

08009248 <_dtoa_r>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	ed2d 8b04 	vpush	{d8-d9}
 8009250:	69c5      	ldr	r5, [r0, #28]
 8009252:	b093      	sub	sp, #76	; 0x4c
 8009254:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009258:	ec57 6b10 	vmov	r6, r7, d0
 800925c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009260:	9107      	str	r1, [sp, #28]
 8009262:	4604      	mov	r4, r0
 8009264:	920a      	str	r2, [sp, #40]	; 0x28
 8009266:	930d      	str	r3, [sp, #52]	; 0x34
 8009268:	b975      	cbnz	r5, 8009288 <_dtoa_r+0x40>
 800926a:	2010      	movs	r0, #16
 800926c:	f000 fe2a 	bl	8009ec4 <malloc>
 8009270:	4602      	mov	r2, r0
 8009272:	61e0      	str	r0, [r4, #28]
 8009274:	b920      	cbnz	r0, 8009280 <_dtoa_r+0x38>
 8009276:	4bae      	ldr	r3, [pc, #696]	; (8009530 <_dtoa_r+0x2e8>)
 8009278:	21ef      	movs	r1, #239	; 0xef
 800927a:	48ae      	ldr	r0, [pc, #696]	; (8009534 <_dtoa_r+0x2ec>)
 800927c:	f002 fc74 	bl	800bb68 <__assert_func>
 8009280:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009284:	6005      	str	r5, [r0, #0]
 8009286:	60c5      	str	r5, [r0, #12]
 8009288:	69e3      	ldr	r3, [r4, #28]
 800928a:	6819      	ldr	r1, [r3, #0]
 800928c:	b151      	cbz	r1, 80092a4 <_dtoa_r+0x5c>
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	604a      	str	r2, [r1, #4]
 8009292:	2301      	movs	r3, #1
 8009294:	4093      	lsls	r3, r2
 8009296:	608b      	str	r3, [r1, #8]
 8009298:	4620      	mov	r0, r4
 800929a:	f000 ff07 	bl	800a0ac <_Bfree>
 800929e:	69e3      	ldr	r3, [r4, #28]
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	1e3b      	subs	r3, r7, #0
 80092a6:	bfbb      	ittet	lt
 80092a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092ac:	9303      	strlt	r3, [sp, #12]
 80092ae:	2300      	movge	r3, #0
 80092b0:	2201      	movlt	r2, #1
 80092b2:	bfac      	ite	ge
 80092b4:	f8c8 3000 	strge.w	r3, [r8]
 80092b8:	f8c8 2000 	strlt.w	r2, [r8]
 80092bc:	4b9e      	ldr	r3, [pc, #632]	; (8009538 <_dtoa_r+0x2f0>)
 80092be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80092c2:	ea33 0308 	bics.w	r3, r3, r8
 80092c6:	d11b      	bne.n	8009300 <_dtoa_r+0xb8>
 80092c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80092d4:	4333      	orrs	r3, r6
 80092d6:	f000 8593 	beq.w	8009e00 <_dtoa_r+0xbb8>
 80092da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092dc:	b963      	cbnz	r3, 80092f8 <_dtoa_r+0xb0>
 80092de:	4b97      	ldr	r3, [pc, #604]	; (800953c <_dtoa_r+0x2f4>)
 80092e0:	e027      	b.n	8009332 <_dtoa_r+0xea>
 80092e2:	4b97      	ldr	r3, [pc, #604]	; (8009540 <_dtoa_r+0x2f8>)
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	9800      	ldr	r0, [sp, #0]
 80092ee:	b013      	add	sp, #76	; 0x4c
 80092f0:	ecbd 8b04 	vpop	{d8-d9}
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	4b90      	ldr	r3, [pc, #576]	; (800953c <_dtoa_r+0x2f4>)
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	3303      	adds	r3, #3
 80092fe:	e7f3      	b.n	80092e8 <_dtoa_r+0xa0>
 8009300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009304:	2200      	movs	r2, #0
 8009306:	ec51 0b17 	vmov	r0, r1, d7
 800930a:	eeb0 8a47 	vmov.f32	s16, s14
 800930e:	eef0 8a67 	vmov.f32	s17, s15
 8009312:	2300      	movs	r3, #0
 8009314:	f7f7 fbe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009318:	4681      	mov	r9, r0
 800931a:	b160      	cbz	r0, 8009336 <_dtoa_r+0xee>
 800931c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800931e:	2301      	movs	r3, #1
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8568 	beq.w	8009dfa <_dtoa_r+0xbb2>
 800932a:	4b86      	ldr	r3, [pc, #536]	; (8009544 <_dtoa_r+0x2fc>)
 800932c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	3b01      	subs	r3, #1
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	e7da      	b.n	80092ec <_dtoa_r+0xa4>
 8009336:	aa10      	add	r2, sp, #64	; 0x40
 8009338:	a911      	add	r1, sp, #68	; 0x44
 800933a:	4620      	mov	r0, r4
 800933c:	eeb0 0a48 	vmov.f32	s0, s16
 8009340:	eef0 0a68 	vmov.f32	s1, s17
 8009344:	f001 fa4e 	bl	800a7e4 <__d2b>
 8009348:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800934c:	4682      	mov	sl, r0
 800934e:	2d00      	cmp	r5, #0
 8009350:	d07f      	beq.n	8009452 <_dtoa_r+0x20a>
 8009352:	ee18 3a90 	vmov	r3, s17
 8009356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800935a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800935e:	ec51 0b18 	vmov	r0, r1, d8
 8009362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800936a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800936e:	4619      	mov	r1, r3
 8009370:	2200      	movs	r2, #0
 8009372:	4b75      	ldr	r3, [pc, #468]	; (8009548 <_dtoa_r+0x300>)
 8009374:	f7f6 ff98 	bl	80002a8 <__aeabi_dsub>
 8009378:	a367      	add	r3, pc, #412	; (adr r3, 8009518 <_dtoa_r+0x2d0>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f94b 	bl	8000618 <__aeabi_dmul>
 8009382:	a367      	add	r3, pc, #412	; (adr r3, 8009520 <_dtoa_r+0x2d8>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f6 ff90 	bl	80002ac <__adddf3>
 800938c:	4606      	mov	r6, r0
 800938e:	4628      	mov	r0, r5
 8009390:	460f      	mov	r7, r1
 8009392:	f7f7 f8d7 	bl	8000544 <__aeabi_i2d>
 8009396:	a364      	add	r3, pc, #400	; (adr r3, 8009528 <_dtoa_r+0x2e0>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f7 f93c 	bl	8000618 <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4630      	mov	r0, r6
 80093a6:	4639      	mov	r1, r7
 80093a8:	f7f6 ff80 	bl	80002ac <__adddf3>
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	f7f7 fbe2 	bl	8000b78 <__aeabi_d2iz>
 80093b4:	2200      	movs	r2, #0
 80093b6:	4683      	mov	fp, r0
 80093b8:	2300      	movs	r3, #0
 80093ba:	4630      	mov	r0, r6
 80093bc:	4639      	mov	r1, r7
 80093be:	f7f7 fb9d 	bl	8000afc <__aeabi_dcmplt>
 80093c2:	b148      	cbz	r0, 80093d8 <_dtoa_r+0x190>
 80093c4:	4658      	mov	r0, fp
 80093c6:	f7f7 f8bd 	bl	8000544 <__aeabi_i2d>
 80093ca:	4632      	mov	r2, r6
 80093cc:	463b      	mov	r3, r7
 80093ce:	f7f7 fb8b 	bl	8000ae8 <__aeabi_dcmpeq>
 80093d2:	b908      	cbnz	r0, 80093d8 <_dtoa_r+0x190>
 80093d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093d8:	f1bb 0f16 	cmp.w	fp, #22
 80093dc:	d857      	bhi.n	800948e <_dtoa_r+0x246>
 80093de:	4b5b      	ldr	r3, [pc, #364]	; (800954c <_dtoa_r+0x304>)
 80093e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	ec51 0b18 	vmov	r0, r1, d8
 80093ec:	f7f7 fb86 	bl	8000afc <__aeabi_dcmplt>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d04e      	beq.n	8009492 <_dtoa_r+0x24a>
 80093f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093f8:	2300      	movs	r3, #0
 80093fa:	930c      	str	r3, [sp, #48]	; 0x30
 80093fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093fe:	1b5b      	subs	r3, r3, r5
 8009400:	1e5a      	subs	r2, r3, #1
 8009402:	bf45      	ittet	mi
 8009404:	f1c3 0301 	rsbmi	r3, r3, #1
 8009408:	9305      	strmi	r3, [sp, #20]
 800940a:	2300      	movpl	r3, #0
 800940c:	2300      	movmi	r3, #0
 800940e:	9206      	str	r2, [sp, #24]
 8009410:	bf54      	ite	pl
 8009412:	9305      	strpl	r3, [sp, #20]
 8009414:	9306      	strmi	r3, [sp, #24]
 8009416:	f1bb 0f00 	cmp.w	fp, #0
 800941a:	db3c      	blt.n	8009496 <_dtoa_r+0x24e>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009422:	445b      	add	r3, fp
 8009424:	9306      	str	r3, [sp, #24]
 8009426:	2300      	movs	r3, #0
 8009428:	9308      	str	r3, [sp, #32]
 800942a:	9b07      	ldr	r3, [sp, #28]
 800942c:	2b09      	cmp	r3, #9
 800942e:	d868      	bhi.n	8009502 <_dtoa_r+0x2ba>
 8009430:	2b05      	cmp	r3, #5
 8009432:	bfc4      	itt	gt
 8009434:	3b04      	subgt	r3, #4
 8009436:	9307      	strgt	r3, [sp, #28]
 8009438:	9b07      	ldr	r3, [sp, #28]
 800943a:	f1a3 0302 	sub.w	r3, r3, #2
 800943e:	bfcc      	ite	gt
 8009440:	2500      	movgt	r5, #0
 8009442:	2501      	movle	r5, #1
 8009444:	2b03      	cmp	r3, #3
 8009446:	f200 8085 	bhi.w	8009554 <_dtoa_r+0x30c>
 800944a:	e8df f003 	tbb	[pc, r3]
 800944e:	3b2e      	.short	0x3b2e
 8009450:	5839      	.short	0x5839
 8009452:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009456:	441d      	add	r5, r3
 8009458:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800945c:	2b20      	cmp	r3, #32
 800945e:	bfc1      	itttt	gt
 8009460:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009464:	fa08 f803 	lslgt.w	r8, r8, r3
 8009468:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800946c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009470:	bfd6      	itet	le
 8009472:	f1c3 0320 	rsble	r3, r3, #32
 8009476:	ea48 0003 	orrgt.w	r0, r8, r3
 800947a:	fa06 f003 	lslle.w	r0, r6, r3
 800947e:	f7f7 f851 	bl	8000524 <__aeabi_ui2d>
 8009482:	2201      	movs	r2, #1
 8009484:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009488:	3d01      	subs	r5, #1
 800948a:	920e      	str	r2, [sp, #56]	; 0x38
 800948c:	e76f      	b.n	800936e <_dtoa_r+0x126>
 800948e:	2301      	movs	r3, #1
 8009490:	e7b3      	b.n	80093fa <_dtoa_r+0x1b2>
 8009492:	900c      	str	r0, [sp, #48]	; 0x30
 8009494:	e7b2      	b.n	80093fc <_dtoa_r+0x1b4>
 8009496:	9b05      	ldr	r3, [sp, #20]
 8009498:	eba3 030b 	sub.w	r3, r3, fp
 800949c:	9305      	str	r3, [sp, #20]
 800949e:	f1cb 0300 	rsb	r3, fp, #0
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	2300      	movs	r3, #0
 80094a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a8:	e7bf      	b.n	800942a <_dtoa_r+0x1e2>
 80094aa:	2300      	movs	r3, #0
 80094ac:	9309      	str	r3, [sp, #36]	; 0x24
 80094ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dc52      	bgt.n	800955a <_dtoa_r+0x312>
 80094b4:	2301      	movs	r3, #1
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	461a      	mov	r2, r3
 80094bc:	920a      	str	r2, [sp, #40]	; 0x28
 80094be:	e00b      	b.n	80094d8 <_dtoa_r+0x290>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e7f3      	b.n	80094ac <_dtoa_r+0x264>
 80094c4:	2300      	movs	r3, #0
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ca:	445b      	add	r3, fp
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	3301      	adds	r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	bfb8      	it	lt
 80094d6:	2301      	movlt	r3, #1
 80094d8:	69e0      	ldr	r0, [r4, #28]
 80094da:	2100      	movs	r1, #0
 80094dc:	2204      	movs	r2, #4
 80094de:	f102 0614 	add.w	r6, r2, #20
 80094e2:	429e      	cmp	r6, r3
 80094e4:	d93d      	bls.n	8009562 <_dtoa_r+0x31a>
 80094e6:	6041      	str	r1, [r0, #4]
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fd9f 	bl	800a02c <_Balloc>
 80094ee:	9000      	str	r0, [sp, #0]
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d139      	bne.n	8009568 <_dtoa_r+0x320>
 80094f4:	4b16      	ldr	r3, [pc, #88]	; (8009550 <_dtoa_r+0x308>)
 80094f6:	4602      	mov	r2, r0
 80094f8:	f240 11af 	movw	r1, #431	; 0x1af
 80094fc:	e6bd      	b.n	800927a <_dtoa_r+0x32>
 80094fe:	2301      	movs	r3, #1
 8009500:	e7e1      	b.n	80094c6 <_dtoa_r+0x27e>
 8009502:	2501      	movs	r5, #1
 8009504:	2300      	movs	r3, #0
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	9509      	str	r5, [sp, #36]	; 0x24
 800950a:	f04f 33ff 	mov.w	r3, #4294967295
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	2200      	movs	r2, #0
 8009514:	2312      	movs	r3, #18
 8009516:	e7d1      	b.n	80094bc <_dtoa_r+0x274>
 8009518:	636f4361 	.word	0x636f4361
 800951c:	3fd287a7 	.word	0x3fd287a7
 8009520:	8b60c8b3 	.word	0x8b60c8b3
 8009524:	3fc68a28 	.word	0x3fc68a28
 8009528:	509f79fb 	.word	0x509f79fb
 800952c:	3fd34413 	.word	0x3fd34413
 8009530:	0800f5ca 	.word	0x0800f5ca
 8009534:	0800f5e1 	.word	0x0800f5e1
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	0800f5c6 	.word	0x0800f5c6
 8009540:	0800f5bd 	.word	0x0800f5bd
 8009544:	0800f595 	.word	0x0800f595
 8009548:	3ff80000 	.word	0x3ff80000
 800954c:	0800f6d0 	.word	0x0800f6d0
 8009550:	0800f639 	.word	0x0800f639
 8009554:	2301      	movs	r3, #1
 8009556:	9309      	str	r3, [sp, #36]	; 0x24
 8009558:	e7d7      	b.n	800950a <_dtoa_r+0x2c2>
 800955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	e7ba      	b.n	80094d8 <_dtoa_r+0x290>
 8009562:	3101      	adds	r1, #1
 8009564:	0052      	lsls	r2, r2, #1
 8009566:	e7ba      	b.n	80094de <_dtoa_r+0x296>
 8009568:	69e3      	ldr	r3, [r4, #28]
 800956a:	9a00      	ldr	r2, [sp, #0]
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	2b0e      	cmp	r3, #14
 8009572:	f200 80a8 	bhi.w	80096c6 <_dtoa_r+0x47e>
 8009576:	2d00      	cmp	r5, #0
 8009578:	f000 80a5 	beq.w	80096c6 <_dtoa_r+0x47e>
 800957c:	f1bb 0f00 	cmp.w	fp, #0
 8009580:	dd38      	ble.n	80095f4 <_dtoa_r+0x3ac>
 8009582:	4bc0      	ldr	r3, [pc, #768]	; (8009884 <_dtoa_r+0x63c>)
 8009584:	f00b 020f 	and.w	r2, fp, #15
 8009588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009590:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009594:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009598:	d019      	beq.n	80095ce <_dtoa_r+0x386>
 800959a:	4bbb      	ldr	r3, [pc, #748]	; (8009888 <_dtoa_r+0x640>)
 800959c:	ec51 0b18 	vmov	r0, r1, d8
 80095a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095a4:	f7f7 f962 	bl	800086c <__aeabi_ddiv>
 80095a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ac:	f008 080f 	and.w	r8, r8, #15
 80095b0:	2503      	movs	r5, #3
 80095b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009888 <_dtoa_r+0x640>
 80095b6:	f1b8 0f00 	cmp.w	r8, #0
 80095ba:	d10a      	bne.n	80095d2 <_dtoa_r+0x38a>
 80095bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095c0:	4632      	mov	r2, r6
 80095c2:	463b      	mov	r3, r7
 80095c4:	f7f7 f952 	bl	800086c <__aeabi_ddiv>
 80095c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095cc:	e02b      	b.n	8009626 <_dtoa_r+0x3de>
 80095ce:	2502      	movs	r5, #2
 80095d0:	e7ef      	b.n	80095b2 <_dtoa_r+0x36a>
 80095d2:	f018 0f01 	tst.w	r8, #1
 80095d6:	d008      	beq.n	80095ea <_dtoa_r+0x3a2>
 80095d8:	4630      	mov	r0, r6
 80095da:	4639      	mov	r1, r7
 80095dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80095e0:	f7f7 f81a 	bl	8000618 <__aeabi_dmul>
 80095e4:	3501      	adds	r5, #1
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80095ee:	f109 0908 	add.w	r9, r9, #8
 80095f2:	e7e0      	b.n	80095b6 <_dtoa_r+0x36e>
 80095f4:	f000 809f 	beq.w	8009736 <_dtoa_r+0x4ee>
 80095f8:	f1cb 0600 	rsb	r6, fp, #0
 80095fc:	4ba1      	ldr	r3, [pc, #644]	; (8009884 <_dtoa_r+0x63c>)
 80095fe:	4fa2      	ldr	r7, [pc, #648]	; (8009888 <_dtoa_r+0x640>)
 8009600:	f006 020f 	and.w	r2, r6, #15
 8009604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	ec51 0b18 	vmov	r0, r1, d8
 8009610:	f7f7 f802 	bl	8000618 <__aeabi_dmul>
 8009614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009618:	1136      	asrs	r6, r6, #4
 800961a:	2300      	movs	r3, #0
 800961c:	2502      	movs	r5, #2
 800961e:	2e00      	cmp	r6, #0
 8009620:	d17e      	bne.n	8009720 <_dtoa_r+0x4d8>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1d0      	bne.n	80095c8 <_dtoa_r+0x380>
 8009626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009628:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8084 	beq.w	800973a <_dtoa_r+0x4f2>
 8009632:	4b96      	ldr	r3, [pc, #600]	; (800988c <_dtoa_r+0x644>)
 8009634:	2200      	movs	r2, #0
 8009636:	4640      	mov	r0, r8
 8009638:	4649      	mov	r1, r9
 800963a:	f7f7 fa5f 	bl	8000afc <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	d07b      	beq.n	800973a <_dtoa_r+0x4f2>
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d078      	beq.n	800973a <_dtoa_r+0x4f2>
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	dd39      	ble.n	80096c2 <_dtoa_r+0x47a>
 800964e:	4b90      	ldr	r3, [pc, #576]	; (8009890 <_dtoa_r+0x648>)
 8009650:	2200      	movs	r2, #0
 8009652:	4640      	mov	r0, r8
 8009654:	4649      	mov	r1, r9
 8009656:	f7f6 ffdf 	bl	8000618 <__aeabi_dmul>
 800965a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965e:	9e01      	ldr	r6, [sp, #4]
 8009660:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009664:	3501      	adds	r5, #1
 8009666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800966a:	4628      	mov	r0, r5
 800966c:	f7f6 ff6a 	bl	8000544 <__aeabi_i2d>
 8009670:	4642      	mov	r2, r8
 8009672:	464b      	mov	r3, r9
 8009674:	f7f6 ffd0 	bl	8000618 <__aeabi_dmul>
 8009678:	4b86      	ldr	r3, [pc, #536]	; (8009894 <_dtoa_r+0x64c>)
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 fe16 	bl	80002ac <__adddf3>
 8009680:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009688:	9303      	str	r3, [sp, #12]
 800968a:	2e00      	cmp	r6, #0
 800968c:	d158      	bne.n	8009740 <_dtoa_r+0x4f8>
 800968e:	4b82      	ldr	r3, [pc, #520]	; (8009898 <_dtoa_r+0x650>)
 8009690:	2200      	movs	r2, #0
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 fe07 	bl	80002a8 <__aeabi_dsub>
 800969a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800969e:	4680      	mov	r8, r0
 80096a0:	4689      	mov	r9, r1
 80096a2:	f7f7 fa49 	bl	8000b38 <__aeabi_dcmpgt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f040 8296 	bne.w	8009bd8 <_dtoa_r+0x990>
 80096ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80096b0:	4640      	mov	r0, r8
 80096b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b6:	4649      	mov	r1, r9
 80096b8:	f7f7 fa20 	bl	8000afc <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f040 8289 	bne.w	8009bd4 <_dtoa_r+0x98c>
 80096c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f2c0 814e 	blt.w	800996a <_dtoa_r+0x722>
 80096ce:	f1bb 0f0e 	cmp.w	fp, #14
 80096d2:	f300 814a 	bgt.w	800996a <_dtoa_r+0x722>
 80096d6:	4b6b      	ldr	r3, [pc, #428]	; (8009884 <_dtoa_r+0x63c>)
 80096d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80096dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f280 80dc 	bge.w	80098a0 <_dtoa_r+0x658>
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f300 80d8 	bgt.w	80098a0 <_dtoa_r+0x658>
 80096f0:	f040 826f 	bne.w	8009bd2 <_dtoa_r+0x98a>
 80096f4:	4b68      	ldr	r3, [pc, #416]	; (8009898 <_dtoa_r+0x650>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	4640      	mov	r0, r8
 80096fa:	4649      	mov	r1, r9
 80096fc:	f7f6 ff8c 	bl	8000618 <__aeabi_dmul>
 8009700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009704:	f7f7 fa0e 	bl	8000b24 <__aeabi_dcmpge>
 8009708:	9e04      	ldr	r6, [sp, #16]
 800970a:	4637      	mov	r7, r6
 800970c:	2800      	cmp	r0, #0
 800970e:	f040 8245 	bne.w	8009b9c <_dtoa_r+0x954>
 8009712:	9d00      	ldr	r5, [sp, #0]
 8009714:	2331      	movs	r3, #49	; 0x31
 8009716:	f805 3b01 	strb.w	r3, [r5], #1
 800971a:	f10b 0b01 	add.w	fp, fp, #1
 800971e:	e241      	b.n	8009ba4 <_dtoa_r+0x95c>
 8009720:	07f2      	lsls	r2, r6, #31
 8009722:	d505      	bpl.n	8009730 <_dtoa_r+0x4e8>
 8009724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009728:	f7f6 ff76 	bl	8000618 <__aeabi_dmul>
 800972c:	3501      	adds	r5, #1
 800972e:	2301      	movs	r3, #1
 8009730:	1076      	asrs	r6, r6, #1
 8009732:	3708      	adds	r7, #8
 8009734:	e773      	b.n	800961e <_dtoa_r+0x3d6>
 8009736:	2502      	movs	r5, #2
 8009738:	e775      	b.n	8009626 <_dtoa_r+0x3de>
 800973a:	9e04      	ldr	r6, [sp, #16]
 800973c:	465f      	mov	r7, fp
 800973e:	e792      	b.n	8009666 <_dtoa_r+0x41e>
 8009740:	9900      	ldr	r1, [sp, #0]
 8009742:	4b50      	ldr	r3, [pc, #320]	; (8009884 <_dtoa_r+0x63c>)
 8009744:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009748:	4431      	add	r1, r6
 800974a:	9102      	str	r1, [sp, #8]
 800974c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800974e:	eeb0 9a47 	vmov.f32	s18, s14
 8009752:	eef0 9a67 	vmov.f32	s19, s15
 8009756:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800975a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800975e:	2900      	cmp	r1, #0
 8009760:	d044      	beq.n	80097ec <_dtoa_r+0x5a4>
 8009762:	494e      	ldr	r1, [pc, #312]	; (800989c <_dtoa_r+0x654>)
 8009764:	2000      	movs	r0, #0
 8009766:	f7f7 f881 	bl	800086c <__aeabi_ddiv>
 800976a:	ec53 2b19 	vmov	r2, r3, d9
 800976e:	f7f6 fd9b 	bl	80002a8 <__aeabi_dsub>
 8009772:	9d00      	ldr	r5, [sp, #0]
 8009774:	ec41 0b19 	vmov	d9, r0, r1
 8009778:	4649      	mov	r1, r9
 800977a:	4640      	mov	r0, r8
 800977c:	f7f7 f9fc 	bl	8000b78 <__aeabi_d2iz>
 8009780:	4606      	mov	r6, r0
 8009782:	f7f6 fedf 	bl	8000544 <__aeabi_i2d>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f6 fd8b 	bl	80002a8 <__aeabi_dsub>
 8009792:	3630      	adds	r6, #48	; 0x30
 8009794:	f805 6b01 	strb.w	r6, [r5], #1
 8009798:	ec53 2b19 	vmov	r2, r3, d9
 800979c:	4680      	mov	r8, r0
 800979e:	4689      	mov	r9, r1
 80097a0:	f7f7 f9ac 	bl	8000afc <__aeabi_dcmplt>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d164      	bne.n	8009872 <_dtoa_r+0x62a>
 80097a8:	4642      	mov	r2, r8
 80097aa:	464b      	mov	r3, r9
 80097ac:	4937      	ldr	r1, [pc, #220]	; (800988c <_dtoa_r+0x644>)
 80097ae:	2000      	movs	r0, #0
 80097b0:	f7f6 fd7a 	bl	80002a8 <__aeabi_dsub>
 80097b4:	ec53 2b19 	vmov	r2, r3, d9
 80097b8:	f7f7 f9a0 	bl	8000afc <__aeabi_dcmplt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f040 80b6 	bne.w	800992e <_dtoa_r+0x6e6>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	429d      	cmp	r5, r3
 80097c6:	f43f af7c 	beq.w	80096c2 <_dtoa_r+0x47a>
 80097ca:	4b31      	ldr	r3, [pc, #196]	; (8009890 <_dtoa_r+0x648>)
 80097cc:	ec51 0b19 	vmov	r0, r1, d9
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 ff21 	bl	8000618 <__aeabi_dmul>
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <_dtoa_r+0x648>)
 80097d8:	ec41 0b19 	vmov	d9, r0, r1
 80097dc:	2200      	movs	r2, #0
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f6 ff19 	bl	8000618 <__aeabi_dmul>
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	e7c5      	b.n	8009778 <_dtoa_r+0x530>
 80097ec:	ec51 0b17 	vmov	r0, r1, d7
 80097f0:	f7f6 ff12 	bl	8000618 <__aeabi_dmul>
 80097f4:	9b02      	ldr	r3, [sp, #8]
 80097f6:	9d00      	ldr	r5, [sp, #0]
 80097f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80097fa:	ec41 0b19 	vmov	d9, r0, r1
 80097fe:	4649      	mov	r1, r9
 8009800:	4640      	mov	r0, r8
 8009802:	f7f7 f9b9 	bl	8000b78 <__aeabi_d2iz>
 8009806:	4606      	mov	r6, r0
 8009808:	f7f6 fe9c 	bl	8000544 <__aeabi_i2d>
 800980c:	3630      	adds	r6, #48	; 0x30
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4640      	mov	r0, r8
 8009814:	4649      	mov	r1, r9
 8009816:	f7f6 fd47 	bl	80002a8 <__aeabi_dsub>
 800981a:	f805 6b01 	strb.w	r6, [r5], #1
 800981e:	9b02      	ldr	r3, [sp, #8]
 8009820:	429d      	cmp	r5, r3
 8009822:	4680      	mov	r8, r0
 8009824:	4689      	mov	r9, r1
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	d124      	bne.n	8009876 <_dtoa_r+0x62e>
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <_dtoa_r+0x654>)
 800982e:	ec51 0b19 	vmov	r0, r1, d9
 8009832:	f7f6 fd3b 	bl	80002ac <__adddf3>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f7 f97b 	bl	8000b38 <__aeabi_dcmpgt>
 8009842:	2800      	cmp	r0, #0
 8009844:	d173      	bne.n	800992e <_dtoa_r+0x6e6>
 8009846:	ec53 2b19 	vmov	r2, r3, d9
 800984a:	4914      	ldr	r1, [pc, #80]	; (800989c <_dtoa_r+0x654>)
 800984c:	2000      	movs	r0, #0
 800984e:	f7f6 fd2b 	bl	80002a8 <__aeabi_dsub>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4640      	mov	r0, r8
 8009858:	4649      	mov	r1, r9
 800985a:	f7f7 f94f 	bl	8000afc <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f af2f 	beq.w	80096c2 <_dtoa_r+0x47a>
 8009864:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009866:	1e6b      	subs	r3, r5, #1
 8009868:	930f      	str	r3, [sp, #60]	; 0x3c
 800986a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800986e:	2b30      	cmp	r3, #48	; 0x30
 8009870:	d0f8      	beq.n	8009864 <_dtoa_r+0x61c>
 8009872:	46bb      	mov	fp, r7
 8009874:	e04a      	b.n	800990c <_dtoa_r+0x6c4>
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <_dtoa_r+0x648>)
 8009878:	f7f6 fece 	bl	8000618 <__aeabi_dmul>
 800987c:	4680      	mov	r8, r0
 800987e:	4689      	mov	r9, r1
 8009880:	e7bd      	b.n	80097fe <_dtoa_r+0x5b6>
 8009882:	bf00      	nop
 8009884:	0800f6d0 	.word	0x0800f6d0
 8009888:	0800f6a8 	.word	0x0800f6a8
 800988c:	3ff00000 	.word	0x3ff00000
 8009890:	40240000 	.word	0x40240000
 8009894:	401c0000 	.word	0x401c0000
 8009898:	40140000 	.word	0x40140000
 800989c:	3fe00000 	.word	0x3fe00000
 80098a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098a4:	9d00      	ldr	r5, [sp, #0]
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f6 ffdd 	bl	800086c <__aeabi_ddiv>
 80098b2:	f7f7 f961 	bl	8000b78 <__aeabi_d2iz>
 80098b6:	9001      	str	r0, [sp, #4]
 80098b8:	f7f6 fe44 	bl	8000544 <__aeabi_i2d>
 80098bc:	4642      	mov	r2, r8
 80098be:	464b      	mov	r3, r9
 80098c0:	f7f6 feaa 	bl	8000618 <__aeabi_dmul>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f6 fcec 	bl	80002a8 <__aeabi_dsub>
 80098d0:	9e01      	ldr	r6, [sp, #4]
 80098d2:	9f04      	ldr	r7, [sp, #16]
 80098d4:	3630      	adds	r6, #48	; 0x30
 80098d6:	f805 6b01 	strb.w	r6, [r5], #1
 80098da:	9e00      	ldr	r6, [sp, #0]
 80098dc:	1bae      	subs	r6, r5, r6
 80098de:	42b7      	cmp	r7, r6
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	d134      	bne.n	8009950 <_dtoa_r+0x708>
 80098e6:	f7f6 fce1 	bl	80002ac <__adddf3>
 80098ea:	4642      	mov	r2, r8
 80098ec:	464b      	mov	r3, r9
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	f7f7 f921 	bl	8000b38 <__aeabi_dcmpgt>
 80098f6:	b9c8      	cbnz	r0, 800992c <_dtoa_r+0x6e4>
 80098f8:	4642      	mov	r2, r8
 80098fa:	464b      	mov	r3, r9
 80098fc:	4630      	mov	r0, r6
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f7 f8f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009904:	b110      	cbz	r0, 800990c <_dtoa_r+0x6c4>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	07db      	lsls	r3, r3, #31
 800990a:	d40f      	bmi.n	800992c <_dtoa_r+0x6e4>
 800990c:	4651      	mov	r1, sl
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fbcc 	bl	800a0ac <_Bfree>
 8009914:	2300      	movs	r3, #0
 8009916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009918:	702b      	strb	r3, [r5, #0]
 800991a:	f10b 0301 	add.w	r3, fp, #1
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009922:	2b00      	cmp	r3, #0
 8009924:	f43f ace2 	beq.w	80092ec <_dtoa_r+0xa4>
 8009928:	601d      	str	r5, [r3, #0]
 800992a:	e4df      	b.n	80092ec <_dtoa_r+0xa4>
 800992c:	465f      	mov	r7, fp
 800992e:	462b      	mov	r3, r5
 8009930:	461d      	mov	r5, r3
 8009932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009936:	2a39      	cmp	r2, #57	; 0x39
 8009938:	d106      	bne.n	8009948 <_dtoa_r+0x700>
 800993a:	9a00      	ldr	r2, [sp, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d1f7      	bne.n	8009930 <_dtoa_r+0x6e8>
 8009940:	9900      	ldr	r1, [sp, #0]
 8009942:	2230      	movs	r2, #48	; 0x30
 8009944:	3701      	adds	r7, #1
 8009946:	700a      	strb	r2, [r1, #0]
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	3201      	adds	r2, #1
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e790      	b.n	8009872 <_dtoa_r+0x62a>
 8009950:	4ba3      	ldr	r3, [pc, #652]	; (8009be0 <_dtoa_r+0x998>)
 8009952:	2200      	movs	r2, #0
 8009954:	f7f6 fe60 	bl	8000618 <__aeabi_dmul>
 8009958:	2200      	movs	r2, #0
 800995a:	2300      	movs	r3, #0
 800995c:	4606      	mov	r6, r0
 800995e:	460f      	mov	r7, r1
 8009960:	f7f7 f8c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009964:	2800      	cmp	r0, #0
 8009966:	d09e      	beq.n	80098a6 <_dtoa_r+0x65e>
 8009968:	e7d0      	b.n	800990c <_dtoa_r+0x6c4>
 800996a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996c:	2a00      	cmp	r2, #0
 800996e:	f000 80ca 	beq.w	8009b06 <_dtoa_r+0x8be>
 8009972:	9a07      	ldr	r2, [sp, #28]
 8009974:	2a01      	cmp	r2, #1
 8009976:	f300 80ad 	bgt.w	8009ad4 <_dtoa_r+0x88c>
 800997a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800997c:	2a00      	cmp	r2, #0
 800997e:	f000 80a5 	beq.w	8009acc <_dtoa_r+0x884>
 8009982:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009986:	9e08      	ldr	r6, [sp, #32]
 8009988:	9d05      	ldr	r5, [sp, #20]
 800998a:	9a05      	ldr	r2, [sp, #20]
 800998c:	441a      	add	r2, r3
 800998e:	9205      	str	r2, [sp, #20]
 8009990:	9a06      	ldr	r2, [sp, #24]
 8009992:	2101      	movs	r1, #1
 8009994:	441a      	add	r2, r3
 8009996:	4620      	mov	r0, r4
 8009998:	9206      	str	r2, [sp, #24]
 800999a:	f000 fc87 	bl	800a2ac <__i2b>
 800999e:	4607      	mov	r7, r0
 80099a0:	b165      	cbz	r5, 80099bc <_dtoa_r+0x774>
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd09      	ble.n	80099bc <_dtoa_r+0x774>
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	9a05      	ldr	r2, [sp, #20]
 80099ac:	bfa8      	it	ge
 80099ae:	462b      	movge	r3, r5
 80099b0:	1ad2      	subs	r2, r2, r3
 80099b2:	9205      	str	r2, [sp, #20]
 80099b4:	9a06      	ldr	r2, [sp, #24]
 80099b6:	1aed      	subs	r5, r5, r3
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	b1f3      	cbz	r3, 80099fe <_dtoa_r+0x7b6>
 80099c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 80a3 	beq.w	8009b0e <_dtoa_r+0x8c6>
 80099c8:	2e00      	cmp	r6, #0
 80099ca:	dd10      	ble.n	80099ee <_dtoa_r+0x7a6>
 80099cc:	4639      	mov	r1, r7
 80099ce:	4632      	mov	r2, r6
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 fd2b 	bl	800a42c <__pow5mult>
 80099d6:	4652      	mov	r2, sl
 80099d8:	4601      	mov	r1, r0
 80099da:	4607      	mov	r7, r0
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fc7b 	bl	800a2d8 <__multiply>
 80099e2:	4651      	mov	r1, sl
 80099e4:	4680      	mov	r8, r0
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 fb60 	bl	800a0ac <_Bfree>
 80099ec:	46c2      	mov	sl, r8
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	1b9a      	subs	r2, r3, r6
 80099f2:	d004      	beq.n	80099fe <_dtoa_r+0x7b6>
 80099f4:	4651      	mov	r1, sl
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 fd18 	bl	800a42c <__pow5mult>
 80099fc:	4682      	mov	sl, r0
 80099fe:	2101      	movs	r1, #1
 8009a00:	4620      	mov	r0, r4
 8009a02:	f000 fc53 	bl	800a2ac <__i2b>
 8009a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	f340 8081 	ble.w	8009b12 <_dtoa_r+0x8ca>
 8009a10:	461a      	mov	r2, r3
 8009a12:	4601      	mov	r1, r0
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fd09 	bl	800a42c <__pow5mult>
 8009a1a:	9b07      	ldr	r3, [sp, #28]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	4606      	mov	r6, r0
 8009a20:	dd7a      	ble.n	8009b18 <_dtoa_r+0x8d0>
 8009a22:	f04f 0800 	mov.w	r8, #0
 8009a26:	6933      	ldr	r3, [r6, #16]
 8009a28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a2c:	6918      	ldr	r0, [r3, #16]
 8009a2e:	f000 fbef 	bl	800a210 <__hi0bits>
 8009a32:	f1c0 0020 	rsb	r0, r0, #32
 8009a36:	9b06      	ldr	r3, [sp, #24]
 8009a38:	4418      	add	r0, r3
 8009a3a:	f010 001f 	ands.w	r0, r0, #31
 8009a3e:	f000 8094 	beq.w	8009b6a <_dtoa_r+0x922>
 8009a42:	f1c0 0320 	rsb	r3, r0, #32
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	f340 8085 	ble.w	8009b56 <_dtoa_r+0x90e>
 8009a4c:	9b05      	ldr	r3, [sp, #20]
 8009a4e:	f1c0 001c 	rsb	r0, r0, #28
 8009a52:	4403      	add	r3, r0
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	4403      	add	r3, r0
 8009a5a:	4405      	add	r5, r0
 8009a5c:	9306      	str	r3, [sp, #24]
 8009a5e:	9b05      	ldr	r3, [sp, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	dd05      	ble.n	8009a70 <_dtoa_r+0x828>
 8009a64:	4651      	mov	r1, sl
 8009a66:	461a      	mov	r2, r3
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fd39 	bl	800a4e0 <__lshift>
 8009a6e:	4682      	mov	sl, r0
 8009a70:	9b06      	ldr	r3, [sp, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	dd05      	ble.n	8009a82 <_dtoa_r+0x83a>
 8009a76:	4631      	mov	r1, r6
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fd30 	bl	800a4e0 <__lshift>
 8009a80:	4606      	mov	r6, r0
 8009a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d072      	beq.n	8009b6e <_dtoa_r+0x926>
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	f000 fd94 	bl	800a5b8 <__mcmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	da6c      	bge.n	8009b6e <_dtoa_r+0x926>
 8009a94:	2300      	movs	r3, #0
 8009a96:	4651      	mov	r1, sl
 8009a98:	220a      	movs	r2, #10
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fb28 	bl	800a0f0 <__multadd>
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009aa6:	4682      	mov	sl, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 81b0 	beq.w	8009e0e <_dtoa_r+0xbc6>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 fb1b 	bl	800a0f0 <__multadd>
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	4607      	mov	r7, r0
 8009ac0:	f300 8096 	bgt.w	8009bf0 <_dtoa_r+0x9a8>
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	dc59      	bgt.n	8009b7e <_dtoa_r+0x936>
 8009aca:	e091      	b.n	8009bf0 <_dtoa_r+0x9a8>
 8009acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ad2:	e758      	b.n	8009986 <_dtoa_r+0x73e>
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	1e5e      	subs	r6, r3, #1
 8009ad8:	9b08      	ldr	r3, [sp, #32]
 8009ada:	42b3      	cmp	r3, r6
 8009adc:	bfbf      	itttt	lt
 8009ade:	9b08      	ldrlt	r3, [sp, #32]
 8009ae0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009ae2:	9608      	strlt	r6, [sp, #32]
 8009ae4:	1af3      	sublt	r3, r6, r3
 8009ae6:	bfb4      	ite	lt
 8009ae8:	18d2      	addlt	r2, r2, r3
 8009aea:	1b9e      	subge	r6, r3, r6
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	bfbc      	itt	lt
 8009af0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009af2:	2600      	movlt	r6, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bfb7      	itett	lt
 8009af8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009afc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009b00:	1a9d      	sublt	r5, r3, r2
 8009b02:	2300      	movlt	r3, #0
 8009b04:	e741      	b.n	800998a <_dtoa_r+0x742>
 8009b06:	9e08      	ldr	r6, [sp, #32]
 8009b08:	9d05      	ldr	r5, [sp, #20]
 8009b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b0c:	e748      	b.n	80099a0 <_dtoa_r+0x758>
 8009b0e:	9a08      	ldr	r2, [sp, #32]
 8009b10:	e770      	b.n	80099f4 <_dtoa_r+0x7ac>
 8009b12:	9b07      	ldr	r3, [sp, #28]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	dc19      	bgt.n	8009b4c <_dtoa_r+0x904>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	b9bb      	cbnz	r3, 8009b4c <_dtoa_r+0x904>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b22:	b99b      	cbnz	r3, 8009b4c <_dtoa_r+0x904>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b2a:	0d1b      	lsrs	r3, r3, #20
 8009b2c:	051b      	lsls	r3, r3, #20
 8009b2e:	b183      	cbz	r3, 8009b52 <_dtoa_r+0x90a>
 8009b30:	9b05      	ldr	r3, [sp, #20]
 8009b32:	3301      	adds	r3, #1
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	9b06      	ldr	r3, [sp, #24]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	9306      	str	r3, [sp, #24]
 8009b3c:	f04f 0801 	mov.w	r8, #1
 8009b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f47f af6f 	bne.w	8009a26 <_dtoa_r+0x7de>
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e774      	b.n	8009a36 <_dtoa_r+0x7ee>
 8009b4c:	f04f 0800 	mov.w	r8, #0
 8009b50:	e7f6      	b.n	8009b40 <_dtoa_r+0x8f8>
 8009b52:	4698      	mov	r8, r3
 8009b54:	e7f4      	b.n	8009b40 <_dtoa_r+0x8f8>
 8009b56:	d082      	beq.n	8009a5e <_dtoa_r+0x816>
 8009b58:	9a05      	ldr	r2, [sp, #20]
 8009b5a:	331c      	adds	r3, #28
 8009b5c:	441a      	add	r2, r3
 8009b5e:	9205      	str	r2, [sp, #20]
 8009b60:	9a06      	ldr	r2, [sp, #24]
 8009b62:	441a      	add	r2, r3
 8009b64:	441d      	add	r5, r3
 8009b66:	9206      	str	r2, [sp, #24]
 8009b68:	e779      	b.n	8009a5e <_dtoa_r+0x816>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	e7f4      	b.n	8009b58 <_dtoa_r+0x910>
 8009b6e:	9b04      	ldr	r3, [sp, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dc37      	bgt.n	8009be4 <_dtoa_r+0x99c>
 8009b74:	9b07      	ldr	r3, [sp, #28]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	dd34      	ble.n	8009be4 <_dtoa_r+0x99c>
 8009b7a:	9b04      	ldr	r3, [sp, #16]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	b963      	cbnz	r3, 8009b9c <_dtoa_r+0x954>
 8009b82:	4631      	mov	r1, r6
 8009b84:	2205      	movs	r2, #5
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 fab2 	bl	800a0f0 <__multadd>
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	4606      	mov	r6, r0
 8009b90:	4650      	mov	r0, sl
 8009b92:	f000 fd11 	bl	800a5b8 <__mcmp>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f73f adbb 	bgt.w	8009712 <_dtoa_r+0x4ca>
 8009b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b9e:	9d00      	ldr	r5, [sp, #0]
 8009ba0:	ea6f 0b03 	mvn.w	fp, r3
 8009ba4:	f04f 0800 	mov.w	r8, #0
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fa7e 	bl	800a0ac <_Bfree>
 8009bb0:	2f00      	cmp	r7, #0
 8009bb2:	f43f aeab 	beq.w	800990c <_dtoa_r+0x6c4>
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	d005      	beq.n	8009bc8 <_dtoa_r+0x980>
 8009bbc:	45b8      	cmp	r8, r7
 8009bbe:	d003      	beq.n	8009bc8 <_dtoa_r+0x980>
 8009bc0:	4641      	mov	r1, r8
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fa72 	bl	800a0ac <_Bfree>
 8009bc8:	4639      	mov	r1, r7
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fa6e 	bl	800a0ac <_Bfree>
 8009bd0:	e69c      	b.n	800990c <_dtoa_r+0x6c4>
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	4637      	mov	r7, r6
 8009bd6:	e7e1      	b.n	8009b9c <_dtoa_r+0x954>
 8009bd8:	46bb      	mov	fp, r7
 8009bda:	4637      	mov	r7, r6
 8009bdc:	e599      	b.n	8009712 <_dtoa_r+0x4ca>
 8009bde:	bf00      	nop
 8009be0:	40240000 	.word	0x40240000
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 80c8 	beq.w	8009d7c <_dtoa_r+0xb34>
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	dd05      	ble.n	8009c00 <_dtoa_r+0x9b8>
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 fc71 	bl	800a4e0 <__lshift>
 8009bfe:	4607      	mov	r7, r0
 8009c00:	f1b8 0f00 	cmp.w	r8, #0
 8009c04:	d05b      	beq.n	8009cbe <_dtoa_r+0xa76>
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fa0f 	bl	800a02c <_Balloc>
 8009c0e:	4605      	mov	r5, r0
 8009c10:	b928      	cbnz	r0, 8009c1e <_dtoa_r+0x9d6>
 8009c12:	4b83      	ldr	r3, [pc, #524]	; (8009e20 <_dtoa_r+0xbd8>)
 8009c14:	4602      	mov	r2, r0
 8009c16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009c1a:	f7ff bb2e 	b.w	800927a <_dtoa_r+0x32>
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	3202      	adds	r2, #2
 8009c22:	0092      	lsls	r2, r2, #2
 8009c24:	f107 010c 	add.w	r1, r7, #12
 8009c28:	300c      	adds	r0, #12
 8009c2a:	f001 ff85 	bl	800bb38 <memcpy>
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4629      	mov	r1, r5
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 fc54 	bl	800a4e0 <__lshift>
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c42:	4413      	add	r3, r2
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	46b8      	mov	r8, r7
 8009c4e:	9306      	str	r3, [sp, #24]
 8009c50:	4607      	mov	r7, r0
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	4631      	mov	r1, r6
 8009c56:	3b01      	subs	r3, #1
 8009c58:	4650      	mov	r0, sl
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	f7ff fa6a 	bl	8009134 <quorem>
 8009c60:	4641      	mov	r1, r8
 8009c62:	9002      	str	r0, [sp, #8]
 8009c64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c68:	4650      	mov	r0, sl
 8009c6a:	f000 fca5 	bl	800a5b8 <__mcmp>
 8009c6e:	463a      	mov	r2, r7
 8009c70:	9005      	str	r0, [sp, #20]
 8009c72:	4631      	mov	r1, r6
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fcbb 	bl	800a5f0 <__mdiff>
 8009c7a:	68c2      	ldr	r2, [r0, #12]
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	bb02      	cbnz	r2, 8009cc2 <_dtoa_r+0xa7a>
 8009c80:	4601      	mov	r1, r0
 8009c82:	4650      	mov	r0, sl
 8009c84:	f000 fc98 	bl	800a5b8 <__mcmp>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c90:	f000 fa0c 	bl	800a0ac <_Bfree>
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c98:	9d04      	ldr	r5, [sp, #16]
 8009c9a:	ea43 0102 	orr.w	r1, r3, r2
 8009c9e:	9b06      	ldr	r3, [sp, #24]
 8009ca0:	4319      	orrs	r1, r3
 8009ca2:	d110      	bne.n	8009cc6 <_dtoa_r+0xa7e>
 8009ca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ca8:	d029      	beq.n	8009cfe <_dtoa_r+0xab6>
 8009caa:	9b05      	ldr	r3, [sp, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd02      	ble.n	8009cb6 <_dtoa_r+0xa6e>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009cb6:	9b01      	ldr	r3, [sp, #4]
 8009cb8:	f883 9000 	strb.w	r9, [r3]
 8009cbc:	e774      	b.n	8009ba8 <_dtoa_r+0x960>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	e7ba      	b.n	8009c38 <_dtoa_r+0x9f0>
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	e7e1      	b.n	8009c8a <_dtoa_r+0xa42>
 8009cc6:	9b05      	ldr	r3, [sp, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	db04      	blt.n	8009cd6 <_dtoa_r+0xa8e>
 8009ccc:	9907      	ldr	r1, [sp, #28]
 8009cce:	430b      	orrs	r3, r1
 8009cd0:	9906      	ldr	r1, [sp, #24]
 8009cd2:	430b      	orrs	r3, r1
 8009cd4:	d120      	bne.n	8009d18 <_dtoa_r+0xad0>
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	dded      	ble.n	8009cb6 <_dtoa_r+0xa6e>
 8009cda:	4651      	mov	r1, sl
 8009cdc:	2201      	movs	r2, #1
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 fbfe 	bl	800a4e0 <__lshift>
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	f000 fc66 	bl	800a5b8 <__mcmp>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	dc03      	bgt.n	8009cf8 <_dtoa_r+0xab0>
 8009cf0:	d1e1      	bne.n	8009cb6 <_dtoa_r+0xa6e>
 8009cf2:	f019 0f01 	tst.w	r9, #1
 8009cf6:	d0de      	beq.n	8009cb6 <_dtoa_r+0xa6e>
 8009cf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cfc:	d1d8      	bne.n	8009cb0 <_dtoa_r+0xa68>
 8009cfe:	9a01      	ldr	r2, [sp, #4]
 8009d00:	2339      	movs	r3, #57	; 0x39
 8009d02:	7013      	strb	r3, [r2, #0]
 8009d04:	462b      	mov	r3, r5
 8009d06:	461d      	mov	r5, r3
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d0e:	2a39      	cmp	r2, #57	; 0x39
 8009d10:	d06c      	beq.n	8009dec <_dtoa_r+0xba4>
 8009d12:	3201      	adds	r2, #1
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e747      	b.n	8009ba8 <_dtoa_r+0x960>
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	dd07      	ble.n	8009d2c <_dtoa_r+0xae4>
 8009d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d20:	d0ed      	beq.n	8009cfe <_dtoa_r+0xab6>
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	f109 0301 	add.w	r3, r9, #1
 8009d28:	7013      	strb	r3, [r2, #0]
 8009d2a:	e73d      	b.n	8009ba8 <_dtoa_r+0x960>
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	9a08      	ldr	r2, [sp, #32]
 8009d30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d043      	beq.n	8009dc0 <_dtoa_r+0xb78>
 8009d38:	4651      	mov	r1, sl
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 f9d6 	bl	800a0f0 <__multadd>
 8009d44:	45b8      	cmp	r8, r7
 8009d46:	4682      	mov	sl, r0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	f04f 020a 	mov.w	r2, #10
 8009d50:	4641      	mov	r1, r8
 8009d52:	4620      	mov	r0, r4
 8009d54:	d107      	bne.n	8009d66 <_dtoa_r+0xb1e>
 8009d56:	f000 f9cb 	bl	800a0f0 <__multadd>
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	3301      	adds	r3, #1
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	e775      	b.n	8009c52 <_dtoa_r+0xa0a>
 8009d66:	f000 f9c3 	bl	800a0f0 <__multadd>
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	220a      	movs	r2, #10
 8009d72:	4620      	mov	r0, r4
 8009d74:	f000 f9bc 	bl	800a0f0 <__multadd>
 8009d78:	4607      	mov	r7, r0
 8009d7a:	e7f0      	b.n	8009d5e <_dtoa_r+0xb16>
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	9d00      	ldr	r5, [sp, #0]
 8009d82:	4631      	mov	r1, r6
 8009d84:	4650      	mov	r0, sl
 8009d86:	f7ff f9d5 	bl	8009134 <quorem>
 8009d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	f805 9b01 	strb.w	r9, [r5], #1
 8009d94:	1aea      	subs	r2, r5, r3
 8009d96:	9b01      	ldr	r3, [sp, #4]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	dd07      	ble.n	8009dac <_dtoa_r+0xb64>
 8009d9c:	4651      	mov	r1, sl
 8009d9e:	2300      	movs	r3, #0
 8009da0:	220a      	movs	r2, #10
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f9a4 	bl	800a0f0 <__multadd>
 8009da8:	4682      	mov	sl, r0
 8009daa:	e7ea      	b.n	8009d82 <_dtoa_r+0xb3a>
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfc8      	it	gt
 8009db2:	461d      	movgt	r5, r3
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	bfd8      	it	le
 8009db8:	2501      	movle	r5, #1
 8009dba:	441d      	add	r5, r3
 8009dbc:	f04f 0800 	mov.w	r8, #0
 8009dc0:	4651      	mov	r1, sl
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fb8b 	bl	800a4e0 <__lshift>
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4682      	mov	sl, r0
 8009dce:	f000 fbf3 	bl	800a5b8 <__mcmp>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	dc96      	bgt.n	8009d04 <_dtoa_r+0xabc>
 8009dd6:	d102      	bne.n	8009dde <_dtoa_r+0xb96>
 8009dd8:	f019 0f01 	tst.w	r9, #1
 8009ddc:	d192      	bne.n	8009d04 <_dtoa_r+0xabc>
 8009dde:	462b      	mov	r3, r5
 8009de0:	461d      	mov	r5, r3
 8009de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009de6:	2a30      	cmp	r2, #48	; 0x30
 8009de8:	d0fa      	beq.n	8009de0 <_dtoa_r+0xb98>
 8009dea:	e6dd      	b.n	8009ba8 <_dtoa_r+0x960>
 8009dec:	9a00      	ldr	r2, [sp, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d189      	bne.n	8009d06 <_dtoa_r+0xabe>
 8009df2:	f10b 0b01 	add.w	fp, fp, #1
 8009df6:	2331      	movs	r3, #49	; 0x31
 8009df8:	e796      	b.n	8009d28 <_dtoa_r+0xae0>
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <_dtoa_r+0xbdc>)
 8009dfc:	f7ff ba99 	b.w	8009332 <_dtoa_r+0xea>
 8009e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f47f aa6d 	bne.w	80092e2 <_dtoa_r+0x9a>
 8009e08:	4b07      	ldr	r3, [pc, #28]	; (8009e28 <_dtoa_r+0xbe0>)
 8009e0a:	f7ff ba92 	b.w	8009332 <_dtoa_r+0xea>
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dcb5      	bgt.n	8009d80 <_dtoa_r+0xb38>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	f73f aeb1 	bgt.w	8009b7e <_dtoa_r+0x936>
 8009e1c:	e7b0      	b.n	8009d80 <_dtoa_r+0xb38>
 8009e1e:	bf00      	nop
 8009e20:	0800f639 	.word	0x0800f639
 8009e24:	0800f594 	.word	0x0800f594
 8009e28:	0800f5bd 	.word	0x0800f5bd

08009e2c <_free_r>:
 8009e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e2e:	2900      	cmp	r1, #0
 8009e30:	d044      	beq.n	8009ebc <_free_r+0x90>
 8009e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e36:	9001      	str	r0, [sp, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009e3e:	bfb8      	it	lt
 8009e40:	18e4      	addlt	r4, r4, r3
 8009e42:	f000 f8e7 	bl	800a014 <__malloc_lock>
 8009e46:	4a1e      	ldr	r2, [pc, #120]	; (8009ec0 <_free_r+0x94>)
 8009e48:	9801      	ldr	r0, [sp, #4]
 8009e4a:	6813      	ldr	r3, [r2, #0]
 8009e4c:	b933      	cbnz	r3, 8009e5c <_free_r+0x30>
 8009e4e:	6063      	str	r3, [r4, #4]
 8009e50:	6014      	str	r4, [r2, #0]
 8009e52:	b003      	add	sp, #12
 8009e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e58:	f000 b8e2 	b.w	800a020 <__malloc_unlock>
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d908      	bls.n	8009e72 <_free_r+0x46>
 8009e60:	6825      	ldr	r5, [r4, #0]
 8009e62:	1961      	adds	r1, r4, r5
 8009e64:	428b      	cmp	r3, r1
 8009e66:	bf01      	itttt	eq
 8009e68:	6819      	ldreq	r1, [r3, #0]
 8009e6a:	685b      	ldreq	r3, [r3, #4]
 8009e6c:	1949      	addeq	r1, r1, r5
 8009e6e:	6021      	streq	r1, [r4, #0]
 8009e70:	e7ed      	b.n	8009e4e <_free_r+0x22>
 8009e72:	461a      	mov	r2, r3
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	b10b      	cbz	r3, 8009e7c <_free_r+0x50>
 8009e78:	42a3      	cmp	r3, r4
 8009e7a:	d9fa      	bls.n	8009e72 <_free_r+0x46>
 8009e7c:	6811      	ldr	r1, [r2, #0]
 8009e7e:	1855      	adds	r5, r2, r1
 8009e80:	42a5      	cmp	r5, r4
 8009e82:	d10b      	bne.n	8009e9c <_free_r+0x70>
 8009e84:	6824      	ldr	r4, [r4, #0]
 8009e86:	4421      	add	r1, r4
 8009e88:	1854      	adds	r4, r2, r1
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	6011      	str	r1, [r2, #0]
 8009e8e:	d1e0      	bne.n	8009e52 <_free_r+0x26>
 8009e90:	681c      	ldr	r4, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	6053      	str	r3, [r2, #4]
 8009e96:	440c      	add	r4, r1
 8009e98:	6014      	str	r4, [r2, #0]
 8009e9a:	e7da      	b.n	8009e52 <_free_r+0x26>
 8009e9c:	d902      	bls.n	8009ea4 <_free_r+0x78>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	e7d6      	b.n	8009e52 <_free_r+0x26>
 8009ea4:	6825      	ldr	r5, [r4, #0]
 8009ea6:	1961      	adds	r1, r4, r5
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf04      	itt	eq
 8009eac:	6819      	ldreq	r1, [r3, #0]
 8009eae:	685b      	ldreq	r3, [r3, #4]
 8009eb0:	6063      	str	r3, [r4, #4]
 8009eb2:	bf04      	itt	eq
 8009eb4:	1949      	addeq	r1, r1, r5
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	6054      	str	r4, [r2, #4]
 8009eba:	e7ca      	b.n	8009e52 <_free_r+0x26>
 8009ebc:	b003      	add	sp, #12
 8009ebe:	bd30      	pop	{r4, r5, pc}
 8009ec0:	20000a08 	.word	0x20000a08

08009ec4 <malloc>:
 8009ec4:	4b02      	ldr	r3, [pc, #8]	; (8009ed0 <malloc+0xc>)
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	f000 b823 	b.w	8009f14 <_malloc_r>
 8009ece:	bf00      	nop
 8009ed0:	200000b8 	.word	0x200000b8

08009ed4 <sbrk_aligned>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	4e0e      	ldr	r6, [pc, #56]	; (8009f10 <sbrk_aligned+0x3c>)
 8009ed8:	460c      	mov	r4, r1
 8009eda:	6831      	ldr	r1, [r6, #0]
 8009edc:	4605      	mov	r5, r0
 8009ede:	b911      	cbnz	r1, 8009ee6 <sbrk_aligned+0x12>
 8009ee0:	f001 fe1a 	bl	800bb18 <_sbrk_r>
 8009ee4:	6030      	str	r0, [r6, #0]
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f001 fe15 	bl	800bb18 <_sbrk_r>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d00a      	beq.n	8009f08 <sbrk_aligned+0x34>
 8009ef2:	1cc4      	adds	r4, r0, #3
 8009ef4:	f024 0403 	bic.w	r4, r4, #3
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d007      	beq.n	8009f0c <sbrk_aligned+0x38>
 8009efc:	1a21      	subs	r1, r4, r0
 8009efe:	4628      	mov	r0, r5
 8009f00:	f001 fe0a 	bl	800bb18 <_sbrk_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d101      	bne.n	8009f0c <sbrk_aligned+0x38>
 8009f08:	f04f 34ff 	mov.w	r4, #4294967295
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	20000a0c 	.word	0x20000a0c

08009f14 <_malloc_r>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	1ccd      	adds	r5, r1, #3
 8009f1a:	f025 0503 	bic.w	r5, r5, #3
 8009f1e:	3508      	adds	r5, #8
 8009f20:	2d0c      	cmp	r5, #12
 8009f22:	bf38      	it	cc
 8009f24:	250c      	movcc	r5, #12
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	4607      	mov	r7, r0
 8009f2a:	db01      	blt.n	8009f30 <_malloc_r+0x1c>
 8009f2c:	42a9      	cmp	r1, r5
 8009f2e:	d905      	bls.n	8009f3c <_malloc_r+0x28>
 8009f30:	230c      	movs	r3, #12
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	2600      	movs	r6, #0
 8009f36:	4630      	mov	r0, r6
 8009f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a010 <_malloc_r+0xfc>
 8009f40:	f000 f868 	bl	800a014 <__malloc_lock>
 8009f44:	f8d8 3000 	ldr.w	r3, [r8]
 8009f48:	461c      	mov	r4, r3
 8009f4a:	bb5c      	cbnz	r4, 8009fa4 <_malloc_r+0x90>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f7ff ffc0 	bl	8009ed4 <sbrk_aligned>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	4604      	mov	r4, r0
 8009f58:	d155      	bne.n	800a006 <_malloc_r+0xf2>
 8009f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8009f5e:	4626      	mov	r6, r4
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	d145      	bne.n	8009ff0 <_malloc_r+0xdc>
 8009f64:	2c00      	cmp	r4, #0
 8009f66:	d048      	beq.n	8009ffa <_malloc_r+0xe6>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	eb04 0903 	add.w	r9, r4, r3
 8009f72:	f001 fdd1 	bl	800bb18 <_sbrk_r>
 8009f76:	4581      	cmp	r9, r0
 8009f78:	d13f      	bne.n	8009ffa <_malloc_r+0xe6>
 8009f7a:	6821      	ldr	r1, [r4, #0]
 8009f7c:	1a6d      	subs	r5, r5, r1
 8009f7e:	4629      	mov	r1, r5
 8009f80:	4638      	mov	r0, r7
 8009f82:	f7ff ffa7 	bl	8009ed4 <sbrk_aligned>
 8009f86:	3001      	adds	r0, #1
 8009f88:	d037      	beq.n	8009ffa <_malloc_r+0xe6>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	442b      	add	r3, r5
 8009f8e:	6023      	str	r3, [r4, #0]
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d038      	beq.n	800a00a <_malloc_r+0xf6>
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	42a2      	cmp	r2, r4
 8009f9c:	d12b      	bne.n	8009ff6 <_malloc_r+0xe2>
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	e00f      	b.n	8009fc4 <_malloc_r+0xb0>
 8009fa4:	6822      	ldr	r2, [r4, #0]
 8009fa6:	1b52      	subs	r2, r2, r5
 8009fa8:	d41f      	bmi.n	8009fea <_malloc_r+0xd6>
 8009faa:	2a0b      	cmp	r2, #11
 8009fac:	d917      	bls.n	8009fde <_malloc_r+0xca>
 8009fae:	1961      	adds	r1, r4, r5
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	6025      	str	r5, [r4, #0]
 8009fb4:	bf18      	it	ne
 8009fb6:	6059      	strne	r1, [r3, #4]
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	bf08      	it	eq
 8009fbc:	f8c8 1000 	streq.w	r1, [r8]
 8009fc0:	5162      	str	r2, [r4, r5]
 8009fc2:	604b      	str	r3, [r1, #4]
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	f104 060b 	add.w	r6, r4, #11
 8009fca:	f000 f829 	bl	800a020 <__malloc_unlock>
 8009fce:	f026 0607 	bic.w	r6, r6, #7
 8009fd2:	1d23      	adds	r3, r4, #4
 8009fd4:	1af2      	subs	r2, r6, r3
 8009fd6:	d0ae      	beq.n	8009f36 <_malloc_r+0x22>
 8009fd8:	1b9b      	subs	r3, r3, r6
 8009fda:	50a3      	str	r3, [r4, r2]
 8009fdc:	e7ab      	b.n	8009f36 <_malloc_r+0x22>
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	6862      	ldr	r2, [r4, #4]
 8009fe2:	d1dd      	bne.n	8009fa0 <_malloc_r+0x8c>
 8009fe4:	f8c8 2000 	str.w	r2, [r8]
 8009fe8:	e7ec      	b.n	8009fc4 <_malloc_r+0xb0>
 8009fea:	4623      	mov	r3, r4
 8009fec:	6864      	ldr	r4, [r4, #4]
 8009fee:	e7ac      	b.n	8009f4a <_malloc_r+0x36>
 8009ff0:	4634      	mov	r4, r6
 8009ff2:	6876      	ldr	r6, [r6, #4]
 8009ff4:	e7b4      	b.n	8009f60 <_malloc_r+0x4c>
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	e7cc      	b.n	8009f94 <_malloc_r+0x80>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	603b      	str	r3, [r7, #0]
 8009ffe:	4638      	mov	r0, r7
 800a000:	f000 f80e 	bl	800a020 <__malloc_unlock>
 800a004:	e797      	b.n	8009f36 <_malloc_r+0x22>
 800a006:	6025      	str	r5, [r4, #0]
 800a008:	e7dc      	b.n	8009fc4 <_malloc_r+0xb0>
 800a00a:	605b      	str	r3, [r3, #4]
 800a00c:	deff      	udf	#255	; 0xff
 800a00e:	bf00      	nop
 800a010:	20000a08 	.word	0x20000a08

0800a014 <__malloc_lock>:
 800a014:	4801      	ldr	r0, [pc, #4]	; (800a01c <__malloc_lock+0x8>)
 800a016:	f7ff b884 	b.w	8009122 <__retarget_lock_acquire_recursive>
 800a01a:	bf00      	nop
 800a01c:	20000a04 	.word	0x20000a04

0800a020 <__malloc_unlock>:
 800a020:	4801      	ldr	r0, [pc, #4]	; (800a028 <__malloc_unlock+0x8>)
 800a022:	f7ff b87f 	b.w	8009124 <__retarget_lock_release_recursive>
 800a026:	bf00      	nop
 800a028:	20000a04 	.word	0x20000a04

0800a02c <_Balloc>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	69c6      	ldr	r6, [r0, #28]
 800a030:	4604      	mov	r4, r0
 800a032:	460d      	mov	r5, r1
 800a034:	b976      	cbnz	r6, 800a054 <_Balloc+0x28>
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff ff44 	bl	8009ec4 <malloc>
 800a03c:	4602      	mov	r2, r0
 800a03e:	61e0      	str	r0, [r4, #28]
 800a040:	b920      	cbnz	r0, 800a04c <_Balloc+0x20>
 800a042:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <_Balloc+0x78>)
 800a044:	4818      	ldr	r0, [pc, #96]	; (800a0a8 <_Balloc+0x7c>)
 800a046:	216b      	movs	r1, #107	; 0x6b
 800a048:	f001 fd8e 	bl	800bb68 <__assert_func>
 800a04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a050:	6006      	str	r6, [r0, #0]
 800a052:	60c6      	str	r6, [r0, #12]
 800a054:	69e6      	ldr	r6, [r4, #28]
 800a056:	68f3      	ldr	r3, [r6, #12]
 800a058:	b183      	cbz	r3, 800a07c <_Balloc+0x50>
 800a05a:	69e3      	ldr	r3, [r4, #28]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a062:	b9b8      	cbnz	r0, 800a094 <_Balloc+0x68>
 800a064:	2101      	movs	r1, #1
 800a066:	fa01 f605 	lsl.w	r6, r1, r5
 800a06a:	1d72      	adds	r2, r6, #5
 800a06c:	0092      	lsls	r2, r2, #2
 800a06e:	4620      	mov	r0, r4
 800a070:	f001 fd98 	bl	800bba4 <_calloc_r>
 800a074:	b160      	cbz	r0, 800a090 <_Balloc+0x64>
 800a076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a07a:	e00e      	b.n	800a09a <_Balloc+0x6e>
 800a07c:	2221      	movs	r2, #33	; 0x21
 800a07e:	2104      	movs	r1, #4
 800a080:	4620      	mov	r0, r4
 800a082:	f001 fd8f 	bl	800bba4 <_calloc_r>
 800a086:	69e3      	ldr	r3, [r4, #28]
 800a088:	60f0      	str	r0, [r6, #12]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e4      	bne.n	800a05a <_Balloc+0x2e>
 800a090:	2000      	movs	r0, #0
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	6802      	ldr	r2, [r0, #0]
 800a096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a09a:	2300      	movs	r3, #0
 800a09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a0:	e7f7      	b.n	800a092 <_Balloc+0x66>
 800a0a2:	bf00      	nop
 800a0a4:	0800f5ca 	.word	0x0800f5ca
 800a0a8:	0800f64a 	.word	0x0800f64a

0800a0ac <_Bfree>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	69c6      	ldr	r6, [r0, #28]
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b976      	cbnz	r6, 800a0d4 <_Bfree+0x28>
 800a0b6:	2010      	movs	r0, #16
 800a0b8:	f7ff ff04 	bl	8009ec4 <malloc>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	61e8      	str	r0, [r5, #28]
 800a0c0:	b920      	cbnz	r0, 800a0cc <_Bfree+0x20>
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <_Bfree+0x3c>)
 800a0c4:	4809      	ldr	r0, [pc, #36]	; (800a0ec <_Bfree+0x40>)
 800a0c6:	218f      	movs	r1, #143	; 0x8f
 800a0c8:	f001 fd4e 	bl	800bb68 <__assert_func>
 800a0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d0:	6006      	str	r6, [r0, #0]
 800a0d2:	60c6      	str	r6, [r0, #12]
 800a0d4:	b13c      	cbz	r4, 800a0e6 <_Bfree+0x3a>
 800a0d6:	69eb      	ldr	r3, [r5, #28]
 800a0d8:	6862      	ldr	r2, [r4, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0e0:	6021      	str	r1, [r4, #0]
 800a0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	0800f5ca 	.word	0x0800f5ca
 800a0ec:	0800f64a 	.word	0x0800f64a

0800a0f0 <__multadd>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	690d      	ldr	r5, [r1, #16]
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	461e      	mov	r6, r3
 800a0fc:	f101 0c14 	add.w	ip, r1, #20
 800a100:	2000      	movs	r0, #0
 800a102:	f8dc 3000 	ldr.w	r3, [ip]
 800a106:	b299      	uxth	r1, r3
 800a108:	fb02 6101 	mla	r1, r2, r1, r6
 800a10c:	0c1e      	lsrs	r6, r3, #16
 800a10e:	0c0b      	lsrs	r3, r1, #16
 800a110:	fb02 3306 	mla	r3, r2, r6, r3
 800a114:	b289      	uxth	r1, r1
 800a116:	3001      	adds	r0, #1
 800a118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a11c:	4285      	cmp	r5, r0
 800a11e:	f84c 1b04 	str.w	r1, [ip], #4
 800a122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a126:	dcec      	bgt.n	800a102 <__multadd+0x12>
 800a128:	b30e      	cbz	r6, 800a16e <__multadd+0x7e>
 800a12a:	68a3      	ldr	r3, [r4, #8]
 800a12c:	42ab      	cmp	r3, r5
 800a12e:	dc19      	bgt.n	800a164 <__multadd+0x74>
 800a130:	6861      	ldr	r1, [r4, #4]
 800a132:	4638      	mov	r0, r7
 800a134:	3101      	adds	r1, #1
 800a136:	f7ff ff79 	bl	800a02c <_Balloc>
 800a13a:	4680      	mov	r8, r0
 800a13c:	b928      	cbnz	r0, 800a14a <__multadd+0x5a>
 800a13e:	4602      	mov	r2, r0
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <__multadd+0x84>)
 800a142:	480d      	ldr	r0, [pc, #52]	; (800a178 <__multadd+0x88>)
 800a144:	21ba      	movs	r1, #186	; 0xba
 800a146:	f001 fd0f 	bl	800bb68 <__assert_func>
 800a14a:	6922      	ldr	r2, [r4, #16]
 800a14c:	3202      	adds	r2, #2
 800a14e:	f104 010c 	add.w	r1, r4, #12
 800a152:	0092      	lsls	r2, r2, #2
 800a154:	300c      	adds	r0, #12
 800a156:	f001 fcef 	bl	800bb38 <memcpy>
 800a15a:	4621      	mov	r1, r4
 800a15c:	4638      	mov	r0, r7
 800a15e:	f7ff ffa5 	bl	800a0ac <_Bfree>
 800a162:	4644      	mov	r4, r8
 800a164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a168:	3501      	adds	r5, #1
 800a16a:	615e      	str	r6, [r3, #20]
 800a16c:	6125      	str	r5, [r4, #16]
 800a16e:	4620      	mov	r0, r4
 800a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a174:	0800f639 	.word	0x0800f639
 800a178:	0800f64a 	.word	0x0800f64a

0800a17c <__s2b>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	460c      	mov	r4, r1
 800a182:	4615      	mov	r5, r2
 800a184:	461f      	mov	r7, r3
 800a186:	2209      	movs	r2, #9
 800a188:	3308      	adds	r3, #8
 800a18a:	4606      	mov	r6, r0
 800a18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a190:	2100      	movs	r1, #0
 800a192:	2201      	movs	r2, #1
 800a194:	429a      	cmp	r2, r3
 800a196:	db09      	blt.n	800a1ac <__s2b+0x30>
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff ff47 	bl	800a02c <_Balloc>
 800a19e:	b940      	cbnz	r0, 800a1b2 <__s2b+0x36>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	4b19      	ldr	r3, [pc, #100]	; (800a208 <__s2b+0x8c>)
 800a1a4:	4819      	ldr	r0, [pc, #100]	; (800a20c <__s2b+0x90>)
 800a1a6:	21d3      	movs	r1, #211	; 0xd3
 800a1a8:	f001 fcde 	bl	800bb68 <__assert_func>
 800a1ac:	0052      	lsls	r2, r2, #1
 800a1ae:	3101      	adds	r1, #1
 800a1b0:	e7f0      	b.n	800a194 <__s2b+0x18>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	6143      	str	r3, [r0, #20]
 800a1b6:	2d09      	cmp	r5, #9
 800a1b8:	f04f 0301 	mov.w	r3, #1
 800a1bc:	6103      	str	r3, [r0, #16]
 800a1be:	dd16      	ble.n	800a1ee <__s2b+0x72>
 800a1c0:	f104 0909 	add.w	r9, r4, #9
 800a1c4:	46c8      	mov	r8, r9
 800a1c6:	442c      	add	r4, r5
 800a1c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	3b30      	subs	r3, #48	; 0x30
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff ff8c 	bl	800a0f0 <__multadd>
 800a1d8:	45a0      	cmp	r8, r4
 800a1da:	d1f5      	bne.n	800a1c8 <__s2b+0x4c>
 800a1dc:	f1a5 0408 	sub.w	r4, r5, #8
 800a1e0:	444c      	add	r4, r9
 800a1e2:	1b2d      	subs	r5, r5, r4
 800a1e4:	1963      	adds	r3, r4, r5
 800a1e6:	42bb      	cmp	r3, r7
 800a1e8:	db04      	blt.n	800a1f4 <__s2b+0x78>
 800a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ee:	340a      	adds	r4, #10
 800a1f0:	2509      	movs	r5, #9
 800a1f2:	e7f6      	b.n	800a1e2 <__s2b+0x66>
 800a1f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	3b30      	subs	r3, #48	; 0x30
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7ff ff76 	bl	800a0f0 <__multadd>
 800a204:	e7ee      	b.n	800a1e4 <__s2b+0x68>
 800a206:	bf00      	nop
 800a208:	0800f639 	.word	0x0800f639
 800a20c:	0800f64a 	.word	0x0800f64a

0800a210 <__hi0bits>:
 800a210:	0c03      	lsrs	r3, r0, #16
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	b9d3      	cbnz	r3, 800a24c <__hi0bits+0x3c>
 800a216:	0400      	lsls	r0, r0, #16
 800a218:	2310      	movs	r3, #16
 800a21a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a21e:	bf04      	itt	eq
 800a220:	0200      	lsleq	r0, r0, #8
 800a222:	3308      	addeq	r3, #8
 800a224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a228:	bf04      	itt	eq
 800a22a:	0100      	lsleq	r0, r0, #4
 800a22c:	3304      	addeq	r3, #4
 800a22e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a232:	bf04      	itt	eq
 800a234:	0080      	lsleq	r0, r0, #2
 800a236:	3302      	addeq	r3, #2
 800a238:	2800      	cmp	r0, #0
 800a23a:	db05      	blt.n	800a248 <__hi0bits+0x38>
 800a23c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a240:	f103 0301 	add.w	r3, r3, #1
 800a244:	bf08      	it	eq
 800a246:	2320      	moveq	r3, #32
 800a248:	4618      	mov	r0, r3
 800a24a:	4770      	bx	lr
 800a24c:	2300      	movs	r3, #0
 800a24e:	e7e4      	b.n	800a21a <__hi0bits+0xa>

0800a250 <__lo0bits>:
 800a250:	6803      	ldr	r3, [r0, #0]
 800a252:	f013 0207 	ands.w	r2, r3, #7
 800a256:	d00c      	beq.n	800a272 <__lo0bits+0x22>
 800a258:	07d9      	lsls	r1, r3, #31
 800a25a:	d422      	bmi.n	800a2a2 <__lo0bits+0x52>
 800a25c:	079a      	lsls	r2, r3, #30
 800a25e:	bf49      	itett	mi
 800a260:	085b      	lsrmi	r3, r3, #1
 800a262:	089b      	lsrpl	r3, r3, #2
 800a264:	6003      	strmi	r3, [r0, #0]
 800a266:	2201      	movmi	r2, #1
 800a268:	bf5c      	itt	pl
 800a26a:	6003      	strpl	r3, [r0, #0]
 800a26c:	2202      	movpl	r2, #2
 800a26e:	4610      	mov	r0, r2
 800a270:	4770      	bx	lr
 800a272:	b299      	uxth	r1, r3
 800a274:	b909      	cbnz	r1, 800a27a <__lo0bits+0x2a>
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	2210      	movs	r2, #16
 800a27a:	b2d9      	uxtb	r1, r3
 800a27c:	b909      	cbnz	r1, 800a282 <__lo0bits+0x32>
 800a27e:	3208      	adds	r2, #8
 800a280:	0a1b      	lsrs	r3, r3, #8
 800a282:	0719      	lsls	r1, r3, #28
 800a284:	bf04      	itt	eq
 800a286:	091b      	lsreq	r3, r3, #4
 800a288:	3204      	addeq	r2, #4
 800a28a:	0799      	lsls	r1, r3, #30
 800a28c:	bf04      	itt	eq
 800a28e:	089b      	lsreq	r3, r3, #2
 800a290:	3202      	addeq	r2, #2
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d403      	bmi.n	800a29e <__lo0bits+0x4e>
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	f102 0201 	add.w	r2, r2, #1
 800a29c:	d003      	beq.n	800a2a6 <__lo0bits+0x56>
 800a29e:	6003      	str	r3, [r0, #0]
 800a2a0:	e7e5      	b.n	800a26e <__lo0bits+0x1e>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	e7e3      	b.n	800a26e <__lo0bits+0x1e>
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	e7e1      	b.n	800a26e <__lo0bits+0x1e>
	...

0800a2ac <__i2b>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	f7ff febb 	bl	800a02c <_Balloc>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	b928      	cbnz	r0, 800a2c6 <__i2b+0x1a>
 800a2ba:	4b05      	ldr	r3, [pc, #20]	; (800a2d0 <__i2b+0x24>)
 800a2bc:	4805      	ldr	r0, [pc, #20]	; (800a2d4 <__i2b+0x28>)
 800a2be:	f240 1145 	movw	r1, #325	; 0x145
 800a2c2:	f001 fc51 	bl	800bb68 <__assert_func>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	6144      	str	r4, [r0, #20]
 800a2ca:	6103      	str	r3, [r0, #16]
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800f639 	.word	0x0800f639
 800a2d4:	0800f64a 	.word	0x0800f64a

0800a2d8 <__multiply>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4691      	mov	r9, r2
 800a2de:	690a      	ldr	r2, [r1, #16]
 800a2e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	bfb8      	it	lt
 800a2e8:	460b      	movlt	r3, r1
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	bfbc      	itt	lt
 800a2ee:	464c      	movlt	r4, r9
 800a2f0:	4699      	movlt	r9, r3
 800a2f2:	6927      	ldr	r7, [r4, #16]
 800a2f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	6861      	ldr	r1, [r4, #4]
 800a2fc:	eb07 060a 	add.w	r6, r7, sl
 800a300:	42b3      	cmp	r3, r6
 800a302:	b085      	sub	sp, #20
 800a304:	bfb8      	it	lt
 800a306:	3101      	addlt	r1, #1
 800a308:	f7ff fe90 	bl	800a02c <_Balloc>
 800a30c:	b930      	cbnz	r0, 800a31c <__multiply+0x44>
 800a30e:	4602      	mov	r2, r0
 800a310:	4b44      	ldr	r3, [pc, #272]	; (800a424 <__multiply+0x14c>)
 800a312:	4845      	ldr	r0, [pc, #276]	; (800a428 <__multiply+0x150>)
 800a314:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a318:	f001 fc26 	bl	800bb68 <__assert_func>
 800a31c:	f100 0514 	add.w	r5, r0, #20
 800a320:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a324:	462b      	mov	r3, r5
 800a326:	2200      	movs	r2, #0
 800a328:	4543      	cmp	r3, r8
 800a32a:	d321      	bcc.n	800a370 <__multiply+0x98>
 800a32c:	f104 0314 	add.w	r3, r4, #20
 800a330:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a334:	f109 0314 	add.w	r3, r9, #20
 800a338:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a33c:	9202      	str	r2, [sp, #8]
 800a33e:	1b3a      	subs	r2, r7, r4
 800a340:	3a15      	subs	r2, #21
 800a342:	f022 0203 	bic.w	r2, r2, #3
 800a346:	3204      	adds	r2, #4
 800a348:	f104 0115 	add.w	r1, r4, #21
 800a34c:	428f      	cmp	r7, r1
 800a34e:	bf38      	it	cc
 800a350:	2204      	movcc	r2, #4
 800a352:	9201      	str	r2, [sp, #4]
 800a354:	9a02      	ldr	r2, [sp, #8]
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d80c      	bhi.n	800a376 <__multiply+0x9e>
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	dd03      	ble.n	800a368 <__multiply+0x90>
 800a360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a364:	2b00      	cmp	r3, #0
 800a366:	d05b      	beq.n	800a420 <__multiply+0x148>
 800a368:	6106      	str	r6, [r0, #16]
 800a36a:	b005      	add	sp, #20
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	f843 2b04 	str.w	r2, [r3], #4
 800a374:	e7d8      	b.n	800a328 <__multiply+0x50>
 800a376:	f8b3 a000 	ldrh.w	sl, [r3]
 800a37a:	f1ba 0f00 	cmp.w	sl, #0
 800a37e:	d024      	beq.n	800a3ca <__multiply+0xf2>
 800a380:	f104 0e14 	add.w	lr, r4, #20
 800a384:	46a9      	mov	r9, r5
 800a386:	f04f 0c00 	mov.w	ip, #0
 800a38a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a38e:	f8d9 1000 	ldr.w	r1, [r9]
 800a392:	fa1f fb82 	uxth.w	fp, r2
 800a396:	b289      	uxth	r1, r1
 800a398:	fb0a 110b 	mla	r1, sl, fp, r1
 800a39c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3a0:	f8d9 2000 	ldr.w	r2, [r9]
 800a3a4:	4461      	add	r1, ip
 800a3a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3aa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3b8:	4577      	cmp	r7, lr
 800a3ba:	f849 1b04 	str.w	r1, [r9], #4
 800a3be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3c2:	d8e2      	bhi.n	800a38a <__multiply+0xb2>
 800a3c4:	9a01      	ldr	r2, [sp, #4]
 800a3c6:	f845 c002 	str.w	ip, [r5, r2]
 800a3ca:	9a03      	ldr	r2, [sp, #12]
 800a3cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	f1b9 0f00 	cmp.w	r9, #0
 800a3d6:	d021      	beq.n	800a41c <__multiply+0x144>
 800a3d8:	6829      	ldr	r1, [r5, #0]
 800a3da:	f104 0c14 	add.w	ip, r4, #20
 800a3de:	46ae      	mov	lr, r5
 800a3e0:	f04f 0a00 	mov.w	sl, #0
 800a3e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a3e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a3f0:	4452      	add	r2, sl
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3f8:	f84e 1b04 	str.w	r1, [lr], #4
 800a3fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a400:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a404:	f8be 1000 	ldrh.w	r1, [lr]
 800a408:	fb09 110a 	mla	r1, r9, sl, r1
 800a40c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a410:	4567      	cmp	r7, ip
 800a412:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a416:	d8e5      	bhi.n	800a3e4 <__multiply+0x10c>
 800a418:	9a01      	ldr	r2, [sp, #4]
 800a41a:	50a9      	str	r1, [r5, r2]
 800a41c:	3504      	adds	r5, #4
 800a41e:	e799      	b.n	800a354 <__multiply+0x7c>
 800a420:	3e01      	subs	r6, #1
 800a422:	e79b      	b.n	800a35c <__multiply+0x84>
 800a424:	0800f639 	.word	0x0800f639
 800a428:	0800f64a 	.word	0x0800f64a

0800a42c <__pow5mult>:
 800a42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a430:	4615      	mov	r5, r2
 800a432:	f012 0203 	ands.w	r2, r2, #3
 800a436:	4606      	mov	r6, r0
 800a438:	460f      	mov	r7, r1
 800a43a:	d007      	beq.n	800a44c <__pow5mult+0x20>
 800a43c:	4c25      	ldr	r4, [pc, #148]	; (800a4d4 <__pow5mult+0xa8>)
 800a43e:	3a01      	subs	r2, #1
 800a440:	2300      	movs	r3, #0
 800a442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a446:	f7ff fe53 	bl	800a0f0 <__multadd>
 800a44a:	4607      	mov	r7, r0
 800a44c:	10ad      	asrs	r5, r5, #2
 800a44e:	d03d      	beq.n	800a4cc <__pow5mult+0xa0>
 800a450:	69f4      	ldr	r4, [r6, #28]
 800a452:	b97c      	cbnz	r4, 800a474 <__pow5mult+0x48>
 800a454:	2010      	movs	r0, #16
 800a456:	f7ff fd35 	bl	8009ec4 <malloc>
 800a45a:	4602      	mov	r2, r0
 800a45c:	61f0      	str	r0, [r6, #28]
 800a45e:	b928      	cbnz	r0, 800a46c <__pow5mult+0x40>
 800a460:	4b1d      	ldr	r3, [pc, #116]	; (800a4d8 <__pow5mult+0xac>)
 800a462:	481e      	ldr	r0, [pc, #120]	; (800a4dc <__pow5mult+0xb0>)
 800a464:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a468:	f001 fb7e 	bl	800bb68 <__assert_func>
 800a46c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a470:	6004      	str	r4, [r0, #0]
 800a472:	60c4      	str	r4, [r0, #12]
 800a474:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a47c:	b94c      	cbnz	r4, 800a492 <__pow5mult+0x66>
 800a47e:	f240 2171 	movw	r1, #625	; 0x271
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff ff12 	bl	800a2ac <__i2b>
 800a488:	2300      	movs	r3, #0
 800a48a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a48e:	4604      	mov	r4, r0
 800a490:	6003      	str	r3, [r0, #0]
 800a492:	f04f 0900 	mov.w	r9, #0
 800a496:	07eb      	lsls	r3, r5, #31
 800a498:	d50a      	bpl.n	800a4b0 <__pow5mult+0x84>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4622      	mov	r2, r4
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff1a 	bl	800a2d8 <__multiply>
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7ff fdff 	bl	800a0ac <_Bfree>
 800a4ae:	4647      	mov	r7, r8
 800a4b0:	106d      	asrs	r5, r5, #1
 800a4b2:	d00b      	beq.n	800a4cc <__pow5mult+0xa0>
 800a4b4:	6820      	ldr	r0, [r4, #0]
 800a4b6:	b938      	cbnz	r0, 800a4c8 <__pow5mult+0x9c>
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7ff ff0b 	bl	800a2d8 <__multiply>
 800a4c2:	6020      	str	r0, [r4, #0]
 800a4c4:	f8c0 9000 	str.w	r9, [r0]
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	e7e4      	b.n	800a496 <__pow5mult+0x6a>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800f798 	.word	0x0800f798
 800a4d8:	0800f5ca 	.word	0x0800f5ca
 800a4dc:	0800f64a 	.word	0x0800f64a

0800a4e0 <__lshift>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	6849      	ldr	r1, [r1, #4]
 800a4e8:	6923      	ldr	r3, [r4, #16]
 800a4ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	4691      	mov	r9, r2
 800a4f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4f8:	f108 0601 	add.w	r6, r8, #1
 800a4fc:	42b3      	cmp	r3, r6
 800a4fe:	db0b      	blt.n	800a518 <__lshift+0x38>
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff fd93 	bl	800a02c <_Balloc>
 800a506:	4605      	mov	r5, r0
 800a508:	b948      	cbnz	r0, 800a51e <__lshift+0x3e>
 800a50a:	4602      	mov	r2, r0
 800a50c:	4b28      	ldr	r3, [pc, #160]	; (800a5b0 <__lshift+0xd0>)
 800a50e:	4829      	ldr	r0, [pc, #164]	; (800a5b4 <__lshift+0xd4>)
 800a510:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a514:	f001 fb28 	bl	800bb68 <__assert_func>
 800a518:	3101      	adds	r1, #1
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	e7ee      	b.n	800a4fc <__lshift+0x1c>
 800a51e:	2300      	movs	r3, #0
 800a520:	f100 0114 	add.w	r1, r0, #20
 800a524:	f100 0210 	add.w	r2, r0, #16
 800a528:	4618      	mov	r0, r3
 800a52a:	4553      	cmp	r3, sl
 800a52c:	db33      	blt.n	800a596 <__lshift+0xb6>
 800a52e:	6920      	ldr	r0, [r4, #16]
 800a530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a534:	f104 0314 	add.w	r3, r4, #20
 800a538:	f019 091f 	ands.w	r9, r9, #31
 800a53c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a544:	d02b      	beq.n	800a59e <__lshift+0xbe>
 800a546:	f1c9 0e20 	rsb	lr, r9, #32
 800a54a:	468a      	mov	sl, r1
 800a54c:	2200      	movs	r2, #0
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	fa00 f009 	lsl.w	r0, r0, r9
 800a554:	4310      	orrs	r0, r2
 800a556:	f84a 0b04 	str.w	r0, [sl], #4
 800a55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55e:	459c      	cmp	ip, r3
 800a560:	fa22 f20e 	lsr.w	r2, r2, lr
 800a564:	d8f3      	bhi.n	800a54e <__lshift+0x6e>
 800a566:	ebac 0304 	sub.w	r3, ip, r4
 800a56a:	3b15      	subs	r3, #21
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	3304      	adds	r3, #4
 800a572:	f104 0015 	add.w	r0, r4, #21
 800a576:	4584      	cmp	ip, r0
 800a578:	bf38      	it	cc
 800a57a:	2304      	movcc	r3, #4
 800a57c:	50ca      	str	r2, [r1, r3]
 800a57e:	b10a      	cbz	r2, 800a584 <__lshift+0xa4>
 800a580:	f108 0602 	add.w	r6, r8, #2
 800a584:	3e01      	subs	r6, #1
 800a586:	4638      	mov	r0, r7
 800a588:	612e      	str	r6, [r5, #16]
 800a58a:	4621      	mov	r1, r4
 800a58c:	f7ff fd8e 	bl	800a0ac <_Bfree>
 800a590:	4628      	mov	r0, r5
 800a592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a596:	f842 0f04 	str.w	r0, [r2, #4]!
 800a59a:	3301      	adds	r3, #1
 800a59c:	e7c5      	b.n	800a52a <__lshift+0x4a>
 800a59e:	3904      	subs	r1, #4
 800a5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5a8:	459c      	cmp	ip, r3
 800a5aa:	d8f9      	bhi.n	800a5a0 <__lshift+0xc0>
 800a5ac:	e7ea      	b.n	800a584 <__lshift+0xa4>
 800a5ae:	bf00      	nop
 800a5b0:	0800f639 	.word	0x0800f639
 800a5b4:	0800f64a 	.word	0x0800f64a

0800a5b8 <__mcmp>:
 800a5b8:	b530      	push	{r4, r5, lr}
 800a5ba:	6902      	ldr	r2, [r0, #16]
 800a5bc:	690c      	ldr	r4, [r1, #16]
 800a5be:	1b12      	subs	r2, r2, r4
 800a5c0:	d10e      	bne.n	800a5e0 <__mcmp+0x28>
 800a5c2:	f100 0314 	add.w	r3, r0, #20
 800a5c6:	3114      	adds	r1, #20
 800a5c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5d8:	42a5      	cmp	r5, r4
 800a5da:	d003      	beq.n	800a5e4 <__mcmp+0x2c>
 800a5dc:	d305      	bcc.n	800a5ea <__mcmp+0x32>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	bd30      	pop	{r4, r5, pc}
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d3f3      	bcc.n	800a5d0 <__mcmp+0x18>
 800a5e8:	e7fa      	b.n	800a5e0 <__mcmp+0x28>
 800a5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ee:	e7f7      	b.n	800a5e0 <__mcmp+0x28>

0800a5f0 <__mdiff>:
 800a5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4690      	mov	r8, r2
 800a5fe:	f7ff ffdb 	bl	800a5b8 <__mcmp>
 800a602:	1e05      	subs	r5, r0, #0
 800a604:	d110      	bne.n	800a628 <__mdiff+0x38>
 800a606:	4629      	mov	r1, r5
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff fd0f 	bl	800a02c <_Balloc>
 800a60e:	b930      	cbnz	r0, 800a61e <__mdiff+0x2e>
 800a610:	4b3a      	ldr	r3, [pc, #232]	; (800a6fc <__mdiff+0x10c>)
 800a612:	4602      	mov	r2, r0
 800a614:	f240 2137 	movw	r1, #567	; 0x237
 800a618:	4839      	ldr	r0, [pc, #228]	; (800a700 <__mdiff+0x110>)
 800a61a:	f001 faa5 	bl	800bb68 <__assert_func>
 800a61e:	2301      	movs	r3, #1
 800a620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	bfa4      	itt	ge
 800a62a:	4643      	movge	r3, r8
 800a62c:	46a0      	movge	r8, r4
 800a62e:	4630      	mov	r0, r6
 800a630:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a634:	bfa6      	itte	ge
 800a636:	461c      	movge	r4, r3
 800a638:	2500      	movge	r5, #0
 800a63a:	2501      	movlt	r5, #1
 800a63c:	f7ff fcf6 	bl	800a02c <_Balloc>
 800a640:	b920      	cbnz	r0, 800a64c <__mdiff+0x5c>
 800a642:	4b2e      	ldr	r3, [pc, #184]	; (800a6fc <__mdiff+0x10c>)
 800a644:	4602      	mov	r2, r0
 800a646:	f240 2145 	movw	r1, #581	; 0x245
 800a64a:	e7e5      	b.n	800a618 <__mdiff+0x28>
 800a64c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a650:	6926      	ldr	r6, [r4, #16]
 800a652:	60c5      	str	r5, [r0, #12]
 800a654:	f104 0914 	add.w	r9, r4, #20
 800a658:	f108 0514 	add.w	r5, r8, #20
 800a65c:	f100 0e14 	add.w	lr, r0, #20
 800a660:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a668:	f108 0210 	add.w	r2, r8, #16
 800a66c:	46f2      	mov	sl, lr
 800a66e:	2100      	movs	r1, #0
 800a670:	f859 3b04 	ldr.w	r3, [r9], #4
 800a674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a678:	fa11 f88b 	uxtah	r8, r1, fp
 800a67c:	b299      	uxth	r1, r3
 800a67e:	0c1b      	lsrs	r3, r3, #16
 800a680:	eba8 0801 	sub.w	r8, r8, r1
 800a684:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a688:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a68c:	fa1f f888 	uxth.w	r8, r8
 800a690:	1419      	asrs	r1, r3, #16
 800a692:	454e      	cmp	r6, r9
 800a694:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a698:	f84a 3b04 	str.w	r3, [sl], #4
 800a69c:	d8e8      	bhi.n	800a670 <__mdiff+0x80>
 800a69e:	1b33      	subs	r3, r6, r4
 800a6a0:	3b15      	subs	r3, #21
 800a6a2:	f023 0303 	bic.w	r3, r3, #3
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	3415      	adds	r4, #21
 800a6aa:	42a6      	cmp	r6, r4
 800a6ac:	bf38      	it	cc
 800a6ae:	2304      	movcc	r3, #4
 800a6b0:	441d      	add	r5, r3
 800a6b2:	4473      	add	r3, lr
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	462e      	mov	r6, r5
 800a6b8:	4566      	cmp	r6, ip
 800a6ba:	d30e      	bcc.n	800a6da <__mdiff+0xea>
 800a6bc:	f10c 0203 	add.w	r2, ip, #3
 800a6c0:	1b52      	subs	r2, r2, r5
 800a6c2:	f022 0203 	bic.w	r2, r2, #3
 800a6c6:	3d03      	subs	r5, #3
 800a6c8:	45ac      	cmp	ip, r5
 800a6ca:	bf38      	it	cc
 800a6cc:	2200      	movcc	r2, #0
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a6d4:	b17a      	cbz	r2, 800a6f6 <__mdiff+0x106>
 800a6d6:	6107      	str	r7, [r0, #16]
 800a6d8:	e7a4      	b.n	800a624 <__mdiff+0x34>
 800a6da:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6de:	fa11 f288 	uxtah	r2, r1, r8
 800a6e2:	1414      	asrs	r4, r2, #16
 800a6e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6e8:	b292      	uxth	r2, r2
 800a6ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a6f2:	1421      	asrs	r1, r4, #16
 800a6f4:	e7e0      	b.n	800a6b8 <__mdiff+0xc8>
 800a6f6:	3f01      	subs	r7, #1
 800a6f8:	e7ea      	b.n	800a6d0 <__mdiff+0xe0>
 800a6fa:	bf00      	nop
 800a6fc:	0800f639 	.word	0x0800f639
 800a700:	0800f64a 	.word	0x0800f64a

0800a704 <__ulp>:
 800a704:	b082      	sub	sp, #8
 800a706:	ed8d 0b00 	vstr	d0, [sp]
 800a70a:	9a01      	ldr	r2, [sp, #4]
 800a70c:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <__ulp+0x48>)
 800a70e:	4013      	ands	r3, r2
 800a710:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc08      	bgt.n	800a72a <__ulp+0x26>
 800a718:	425b      	negs	r3, r3
 800a71a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a71e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a722:	da04      	bge.n	800a72e <__ulp+0x2a>
 800a724:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a728:	4113      	asrs	r3, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	e008      	b.n	800a740 <__ulp+0x3c>
 800a72e:	f1a2 0314 	sub.w	r3, r2, #20
 800a732:	2b1e      	cmp	r3, #30
 800a734:	bfda      	itte	le
 800a736:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a73a:	40da      	lsrle	r2, r3
 800a73c:	2201      	movgt	r2, #1
 800a73e:	2300      	movs	r3, #0
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	ec41 0b10 	vmov	d0, r0, r1
 800a748:	b002      	add	sp, #8
 800a74a:	4770      	bx	lr
 800a74c:	7ff00000 	.word	0x7ff00000

0800a750 <__b2d>:
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	6906      	ldr	r6, [r0, #16]
 800a756:	f100 0814 	add.w	r8, r0, #20
 800a75a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a75e:	1f37      	subs	r7, r6, #4
 800a760:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a764:	4610      	mov	r0, r2
 800a766:	f7ff fd53 	bl	800a210 <__hi0bits>
 800a76a:	f1c0 0320 	rsb	r3, r0, #32
 800a76e:	280a      	cmp	r0, #10
 800a770:	600b      	str	r3, [r1, #0]
 800a772:	491b      	ldr	r1, [pc, #108]	; (800a7e0 <__b2d+0x90>)
 800a774:	dc15      	bgt.n	800a7a2 <__b2d+0x52>
 800a776:	f1c0 0c0b 	rsb	ip, r0, #11
 800a77a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a77e:	45b8      	cmp	r8, r7
 800a780:	ea43 0501 	orr.w	r5, r3, r1
 800a784:	bf34      	ite	cc
 800a786:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a78a:	2300      	movcs	r3, #0
 800a78c:	3015      	adds	r0, #21
 800a78e:	fa02 f000 	lsl.w	r0, r2, r0
 800a792:	fa23 f30c 	lsr.w	r3, r3, ip
 800a796:	4303      	orrs	r3, r0
 800a798:	461c      	mov	r4, r3
 800a79a:	ec45 4b10 	vmov	d0, r4, r5
 800a79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a2:	45b8      	cmp	r8, r7
 800a7a4:	bf3a      	itte	cc
 800a7a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800a7ae:	2300      	movcs	r3, #0
 800a7b0:	380b      	subs	r0, #11
 800a7b2:	d012      	beq.n	800a7da <__b2d+0x8a>
 800a7b4:	f1c0 0120 	rsb	r1, r0, #32
 800a7b8:	fa23 f401 	lsr.w	r4, r3, r1
 800a7bc:	4082      	lsls	r2, r0
 800a7be:	4322      	orrs	r2, r4
 800a7c0:	4547      	cmp	r7, r8
 800a7c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a7c6:	bf8c      	ite	hi
 800a7c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a7cc:	2200      	movls	r2, #0
 800a7ce:	4083      	lsls	r3, r0
 800a7d0:	40ca      	lsrs	r2, r1
 800a7d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	e7de      	b.n	800a798 <__b2d+0x48>
 800a7da:	ea42 0501 	orr.w	r5, r2, r1
 800a7de:	e7db      	b.n	800a798 <__b2d+0x48>
 800a7e0:	3ff00000 	.word	0x3ff00000

0800a7e4 <__d2b>:
 800a7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	ec59 8b10 	vmov	r8, r9, d0
 800a7f0:	4616      	mov	r6, r2
 800a7f2:	f7ff fc1b 	bl	800a02c <_Balloc>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	b930      	cbnz	r0, 800a808 <__d2b+0x24>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	4b24      	ldr	r3, [pc, #144]	; (800a890 <__d2b+0xac>)
 800a7fe:	4825      	ldr	r0, [pc, #148]	; (800a894 <__d2b+0xb0>)
 800a800:	f240 310f 	movw	r1, #783	; 0x30f
 800a804:	f001 f9b0 	bl	800bb68 <__assert_func>
 800a808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a80c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a810:	bb2d      	cbnz	r5, 800a85e <__d2b+0x7a>
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	f1b8 0300 	subs.w	r3, r8, #0
 800a818:	d026      	beq.n	800a868 <__d2b+0x84>
 800a81a:	4668      	mov	r0, sp
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	f7ff fd17 	bl	800a250 <__lo0bits>
 800a822:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a826:	b1e8      	cbz	r0, 800a864 <__d2b+0x80>
 800a828:	f1c0 0320 	rsb	r3, r0, #32
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	430b      	orrs	r3, r1
 800a832:	40c2      	lsrs	r2, r0
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	9201      	str	r2, [sp, #4]
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	61a3      	str	r3, [r4, #24]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bf14      	ite	ne
 800a840:	2202      	movne	r2, #2
 800a842:	2201      	moveq	r2, #1
 800a844:	6122      	str	r2, [r4, #16]
 800a846:	b1bd      	cbz	r5, 800a878 <__d2b+0x94>
 800a848:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a84c:	4405      	add	r5, r0
 800a84e:	603d      	str	r5, [r7, #0]
 800a850:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a854:	6030      	str	r0, [r6, #0]
 800a856:	4620      	mov	r0, r4
 800a858:	b003      	add	sp, #12
 800a85a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a85e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a862:	e7d6      	b.n	800a812 <__d2b+0x2e>
 800a864:	6161      	str	r1, [r4, #20]
 800a866:	e7e7      	b.n	800a838 <__d2b+0x54>
 800a868:	a801      	add	r0, sp, #4
 800a86a:	f7ff fcf1 	bl	800a250 <__lo0bits>
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	6163      	str	r3, [r4, #20]
 800a872:	3020      	adds	r0, #32
 800a874:	2201      	movs	r2, #1
 800a876:	e7e5      	b.n	800a844 <__d2b+0x60>
 800a878:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a87c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a880:	6038      	str	r0, [r7, #0]
 800a882:	6918      	ldr	r0, [r3, #16]
 800a884:	f7ff fcc4 	bl	800a210 <__hi0bits>
 800a888:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a88c:	e7e2      	b.n	800a854 <__d2b+0x70>
 800a88e:	bf00      	nop
 800a890:	0800f639 	.word	0x0800f639
 800a894:	0800f64a 	.word	0x0800f64a

0800a898 <__ratio>:
 800a898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	4688      	mov	r8, r1
 800a89e:	4669      	mov	r1, sp
 800a8a0:	4681      	mov	r9, r0
 800a8a2:	f7ff ff55 	bl	800a750 <__b2d>
 800a8a6:	a901      	add	r1, sp, #4
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	ec55 4b10 	vmov	r4, r5, d0
 800a8ae:	f7ff ff4f 	bl	800a750 <__b2d>
 800a8b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8ba:	eba3 0c02 	sub.w	ip, r3, r2
 800a8be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8c2:	1a9b      	subs	r3, r3, r2
 800a8c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8c8:	ec51 0b10 	vmov	r0, r1, d0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	bfd6      	itet	le
 800a8d0:	460a      	movle	r2, r1
 800a8d2:	462a      	movgt	r2, r5
 800a8d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8d8:	468b      	mov	fp, r1
 800a8da:	462f      	mov	r7, r5
 800a8dc:	bfd4      	ite	le
 800a8de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	ee10 2a10 	vmov	r2, s0
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	f7f5 ffbc 	bl	800086c <__aeabi_ddiv>
 800a8f4:	ec41 0b10 	vmov	d0, r0, r1
 800a8f8:	b003      	add	sp, #12
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8fe <__copybits>:
 800a8fe:	3901      	subs	r1, #1
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	1149      	asrs	r1, r1, #5
 800a904:	6914      	ldr	r4, [r2, #16]
 800a906:	3101      	adds	r1, #1
 800a908:	f102 0314 	add.w	r3, r2, #20
 800a90c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a910:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a914:	1f05      	subs	r5, r0, #4
 800a916:	42a3      	cmp	r3, r4
 800a918:	d30c      	bcc.n	800a934 <__copybits+0x36>
 800a91a:	1aa3      	subs	r3, r4, r2
 800a91c:	3b11      	subs	r3, #17
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	3211      	adds	r2, #17
 800a924:	42a2      	cmp	r2, r4
 800a926:	bf88      	it	hi
 800a928:	2300      	movhi	r3, #0
 800a92a:	4418      	add	r0, r3
 800a92c:	2300      	movs	r3, #0
 800a92e:	4288      	cmp	r0, r1
 800a930:	d305      	bcc.n	800a93e <__copybits+0x40>
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	f853 6b04 	ldr.w	r6, [r3], #4
 800a938:	f845 6f04 	str.w	r6, [r5, #4]!
 800a93c:	e7eb      	b.n	800a916 <__copybits+0x18>
 800a93e:	f840 3b04 	str.w	r3, [r0], #4
 800a942:	e7f4      	b.n	800a92e <__copybits+0x30>

0800a944 <__any_on>:
 800a944:	f100 0214 	add.w	r2, r0, #20
 800a948:	6900      	ldr	r0, [r0, #16]
 800a94a:	114b      	asrs	r3, r1, #5
 800a94c:	4298      	cmp	r0, r3
 800a94e:	b510      	push	{r4, lr}
 800a950:	db11      	blt.n	800a976 <__any_on+0x32>
 800a952:	dd0a      	ble.n	800a96a <__any_on+0x26>
 800a954:	f011 011f 	ands.w	r1, r1, #31
 800a958:	d007      	beq.n	800a96a <__any_on+0x26>
 800a95a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a95e:	fa24 f001 	lsr.w	r0, r4, r1
 800a962:	fa00 f101 	lsl.w	r1, r0, r1
 800a966:	428c      	cmp	r4, r1
 800a968:	d10b      	bne.n	800a982 <__any_on+0x3e>
 800a96a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a96e:	4293      	cmp	r3, r2
 800a970:	d803      	bhi.n	800a97a <__any_on+0x36>
 800a972:	2000      	movs	r0, #0
 800a974:	bd10      	pop	{r4, pc}
 800a976:	4603      	mov	r3, r0
 800a978:	e7f7      	b.n	800a96a <__any_on+0x26>
 800a97a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a97e:	2900      	cmp	r1, #0
 800a980:	d0f5      	beq.n	800a96e <__any_on+0x2a>
 800a982:	2001      	movs	r0, #1
 800a984:	e7f6      	b.n	800a974 <__any_on+0x30>

0800a986 <sulp>:
 800a986:	b570      	push	{r4, r5, r6, lr}
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	ec45 4b10 	vmov	d0, r4, r5
 800a990:	4616      	mov	r6, r2
 800a992:	f7ff feb7 	bl	800a704 <__ulp>
 800a996:	ec51 0b10 	vmov	r0, r1, d0
 800a99a:	b17e      	cbz	r6, 800a9bc <sulp+0x36>
 800a99c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dd09      	ble.n	800a9bc <sulp+0x36>
 800a9a8:	051b      	lsls	r3, r3, #20
 800a9aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a9ae:	2400      	movs	r4, #0
 800a9b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	f7f5 fe2e 	bl	8000618 <__aeabi_dmul>
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9c0 <_strtod_l>:
 800a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c4:	ed2d 8b02 	vpush	{d8}
 800a9c8:	b09b      	sub	sp, #108	; 0x6c
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	9213      	str	r2, [sp, #76]	; 0x4c
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	9216      	str	r2, [sp, #88]	; 0x58
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	f04f 0800 	mov.w	r8, #0
 800a9d8:	f04f 0900 	mov.w	r9, #0
 800a9dc:	460a      	mov	r2, r1
 800a9de:	9215      	str	r2, [sp, #84]	; 0x54
 800a9e0:	7811      	ldrb	r1, [r2, #0]
 800a9e2:	292b      	cmp	r1, #43	; 0x2b
 800a9e4:	d04c      	beq.n	800aa80 <_strtod_l+0xc0>
 800a9e6:	d83a      	bhi.n	800aa5e <_strtod_l+0x9e>
 800a9e8:	290d      	cmp	r1, #13
 800a9ea:	d834      	bhi.n	800aa56 <_strtod_l+0x96>
 800a9ec:	2908      	cmp	r1, #8
 800a9ee:	d834      	bhi.n	800aa5a <_strtod_l+0x9a>
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	d03d      	beq.n	800aa70 <_strtod_l+0xb0>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a9f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a9fa:	7832      	ldrb	r2, [r6, #0]
 800a9fc:	2a30      	cmp	r2, #48	; 0x30
 800a9fe:	f040 80b4 	bne.w	800ab6a <_strtod_l+0x1aa>
 800aa02:	7872      	ldrb	r2, [r6, #1]
 800aa04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aa08:	2a58      	cmp	r2, #88	; 0x58
 800aa0a:	d170      	bne.n	800aaee <_strtod_l+0x12e>
 800aa0c:	9302      	str	r3, [sp, #8]
 800aa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	ab16      	add	r3, sp, #88	; 0x58
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	4a8e      	ldr	r2, [pc, #568]	; (800ac50 <_strtod_l+0x290>)
 800aa18:	ab17      	add	r3, sp, #92	; 0x5c
 800aa1a:	a915      	add	r1, sp, #84	; 0x54
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f001 f93f 	bl	800bca0 <__gethex>
 800aa22:	f010 070f 	ands.w	r7, r0, #15
 800aa26:	4605      	mov	r5, r0
 800aa28:	d005      	beq.n	800aa36 <_strtod_l+0x76>
 800aa2a:	2f06      	cmp	r7, #6
 800aa2c:	d12a      	bne.n	800aa84 <_strtod_l+0xc4>
 800aa2e:	3601      	adds	r6, #1
 800aa30:	2300      	movs	r3, #0
 800aa32:	9615      	str	r6, [sp, #84]	; 0x54
 800aa34:	930a      	str	r3, [sp, #40]	; 0x28
 800aa36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f040 857f 	bne.w	800b53c <_strtod_l+0xb7c>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	b1db      	cbz	r3, 800aa7a <_strtod_l+0xba>
 800aa42:	4642      	mov	r2, r8
 800aa44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa48:	ec43 2b10 	vmov	d0, r2, r3
 800aa4c:	b01b      	add	sp, #108	; 0x6c
 800aa4e:	ecbd 8b02 	vpop	{d8}
 800aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa56:	2920      	cmp	r1, #32
 800aa58:	d1cc      	bne.n	800a9f4 <_strtod_l+0x34>
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	e7bf      	b.n	800a9de <_strtod_l+0x1e>
 800aa5e:	292d      	cmp	r1, #45	; 0x2d
 800aa60:	d1c8      	bne.n	800a9f4 <_strtod_l+0x34>
 800aa62:	2101      	movs	r1, #1
 800aa64:	910a      	str	r1, [sp, #40]	; 0x28
 800aa66:	1c51      	adds	r1, r2, #1
 800aa68:	9115      	str	r1, [sp, #84]	; 0x54
 800aa6a:	7852      	ldrb	r2, [r2, #1]
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1c3      	bne.n	800a9f8 <_strtod_l+0x38>
 800aa70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa72:	9515      	str	r5, [sp, #84]	; 0x54
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f040 855f 	bne.w	800b538 <_strtod_l+0xb78>
 800aa7a:	4642      	mov	r2, r8
 800aa7c:	464b      	mov	r3, r9
 800aa7e:	e7e3      	b.n	800aa48 <_strtod_l+0x88>
 800aa80:	2100      	movs	r1, #0
 800aa82:	e7ef      	b.n	800aa64 <_strtod_l+0xa4>
 800aa84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa86:	b13a      	cbz	r2, 800aa98 <_strtod_l+0xd8>
 800aa88:	2135      	movs	r1, #53	; 0x35
 800aa8a:	a818      	add	r0, sp, #96	; 0x60
 800aa8c:	f7ff ff37 	bl	800a8fe <__copybits>
 800aa90:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff fb0a 	bl	800a0ac <_Bfree>
 800aa98:	3f01      	subs	r7, #1
 800aa9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa9c:	2f04      	cmp	r7, #4
 800aa9e:	d806      	bhi.n	800aaae <_strtod_l+0xee>
 800aaa0:	e8df f007 	tbb	[pc, r7]
 800aaa4:	201d0314 	.word	0x201d0314
 800aaa8:	14          	.byte	0x14
 800aaa9:	00          	.byte	0x00
 800aaaa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800aaae:	05e9      	lsls	r1, r5, #23
 800aab0:	bf48      	it	mi
 800aab2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800aab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaba:	0d1b      	lsrs	r3, r3, #20
 800aabc:	051b      	lsls	r3, r3, #20
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1b9      	bne.n	800aa36 <_strtod_l+0x76>
 800aac2:	f7fe fb03 	bl	80090cc <__errno>
 800aac6:	2322      	movs	r3, #34	; 0x22
 800aac8:	6003      	str	r3, [r0, #0]
 800aaca:	e7b4      	b.n	800aa36 <_strtod_l+0x76>
 800aacc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800aad0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aad4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aad8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aadc:	e7e7      	b.n	800aaae <_strtod_l+0xee>
 800aade:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ac58 <_strtod_l+0x298>
 800aae2:	e7e4      	b.n	800aaae <_strtod_l+0xee>
 800aae4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aae8:	f04f 38ff 	mov.w	r8, #4294967295
 800aaec:	e7df      	b.n	800aaae <_strtod_l+0xee>
 800aaee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	9215      	str	r2, [sp, #84]	; 0x54
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b30      	cmp	r3, #48	; 0x30
 800aaf8:	d0f9      	beq.n	800aaee <_strtod_l+0x12e>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d09b      	beq.n	800aa36 <_strtod_l+0x76>
 800aafe:	2301      	movs	r3, #1
 800ab00:	f04f 0a00 	mov.w	sl, #0
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab0e:	46d3      	mov	fp, sl
 800ab10:	220a      	movs	r2, #10
 800ab12:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ab14:	7806      	ldrb	r6, [r0, #0]
 800ab16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ab1a:	b2d9      	uxtb	r1, r3
 800ab1c:	2909      	cmp	r1, #9
 800ab1e:	d926      	bls.n	800ab6e <_strtod_l+0x1ae>
 800ab20:	494c      	ldr	r1, [pc, #304]	; (800ac54 <_strtod_l+0x294>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	f000 ffe6 	bl	800baf4 <strncmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d030      	beq.n	800ab8e <_strtod_l+0x1ce>
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4632      	mov	r2, r6
 800ab30:	9005      	str	r0, [sp, #20]
 800ab32:	465e      	mov	r6, fp
 800ab34:	4603      	mov	r3, r0
 800ab36:	2a65      	cmp	r2, #101	; 0x65
 800ab38:	d001      	beq.n	800ab3e <_strtod_l+0x17e>
 800ab3a:	2a45      	cmp	r2, #69	; 0x45
 800ab3c:	d113      	bne.n	800ab66 <_strtod_l+0x1a6>
 800ab3e:	b91e      	cbnz	r6, 800ab48 <_strtod_l+0x188>
 800ab40:	9a04      	ldr	r2, [sp, #16]
 800ab42:	4302      	orrs	r2, r0
 800ab44:	d094      	beq.n	800aa70 <_strtod_l+0xb0>
 800ab46:	2600      	movs	r6, #0
 800ab48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ab4a:	1c6a      	adds	r2, r5, #1
 800ab4c:	9215      	str	r2, [sp, #84]	; 0x54
 800ab4e:	786a      	ldrb	r2, [r5, #1]
 800ab50:	2a2b      	cmp	r2, #43	; 0x2b
 800ab52:	d074      	beq.n	800ac3e <_strtod_l+0x27e>
 800ab54:	2a2d      	cmp	r2, #45	; 0x2d
 800ab56:	d078      	beq.n	800ac4a <_strtod_l+0x28a>
 800ab58:	f04f 0c00 	mov.w	ip, #0
 800ab5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ab60:	2909      	cmp	r1, #9
 800ab62:	d97f      	bls.n	800ac64 <_strtod_l+0x2a4>
 800ab64:	9515      	str	r5, [sp, #84]	; 0x54
 800ab66:	2700      	movs	r7, #0
 800ab68:	e09e      	b.n	800aca8 <_strtod_l+0x2e8>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e7c8      	b.n	800ab00 <_strtod_l+0x140>
 800ab6e:	f1bb 0f08 	cmp.w	fp, #8
 800ab72:	bfd8      	it	le
 800ab74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ab76:	f100 0001 	add.w	r0, r0, #1
 800ab7a:	bfda      	itte	le
 800ab7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab80:	9309      	strle	r3, [sp, #36]	; 0x24
 800ab82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ab86:	f10b 0b01 	add.w	fp, fp, #1
 800ab8a:	9015      	str	r0, [sp, #84]	; 0x54
 800ab8c:	e7c1      	b.n	800ab12 <_strtod_l+0x152>
 800ab8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	9215      	str	r2, [sp, #84]	; 0x54
 800ab94:	785a      	ldrb	r2, [r3, #1]
 800ab96:	f1bb 0f00 	cmp.w	fp, #0
 800ab9a:	d037      	beq.n	800ac0c <_strtod_l+0x24c>
 800ab9c:	9005      	str	r0, [sp, #20]
 800ab9e:	465e      	mov	r6, fp
 800aba0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aba4:	2b09      	cmp	r3, #9
 800aba6:	d912      	bls.n	800abce <_strtod_l+0x20e>
 800aba8:	2301      	movs	r3, #1
 800abaa:	e7c4      	b.n	800ab36 <_strtod_l+0x176>
 800abac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	9215      	str	r2, [sp, #84]	; 0x54
 800abb2:	785a      	ldrb	r2, [r3, #1]
 800abb4:	3001      	adds	r0, #1
 800abb6:	2a30      	cmp	r2, #48	; 0x30
 800abb8:	d0f8      	beq.n	800abac <_strtod_l+0x1ec>
 800abba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800abbe:	2b08      	cmp	r3, #8
 800abc0:	f200 84c1 	bhi.w	800b546 <_strtod_l+0xb86>
 800abc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abc6:	9005      	str	r0, [sp, #20]
 800abc8:	2000      	movs	r0, #0
 800abca:	930b      	str	r3, [sp, #44]	; 0x2c
 800abcc:	4606      	mov	r6, r0
 800abce:	3a30      	subs	r2, #48	; 0x30
 800abd0:	f100 0301 	add.w	r3, r0, #1
 800abd4:	d014      	beq.n	800ac00 <_strtod_l+0x240>
 800abd6:	9905      	ldr	r1, [sp, #20]
 800abd8:	4419      	add	r1, r3
 800abda:	9105      	str	r1, [sp, #20]
 800abdc:	4633      	mov	r3, r6
 800abde:	eb00 0c06 	add.w	ip, r0, r6
 800abe2:	210a      	movs	r1, #10
 800abe4:	4563      	cmp	r3, ip
 800abe6:	d113      	bne.n	800ac10 <_strtod_l+0x250>
 800abe8:	1833      	adds	r3, r6, r0
 800abea:	2b08      	cmp	r3, #8
 800abec:	f106 0601 	add.w	r6, r6, #1
 800abf0:	4406      	add	r6, r0
 800abf2:	dc1a      	bgt.n	800ac2a <_strtod_l+0x26a>
 800abf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abf6:	230a      	movs	r3, #10
 800abf8:	fb03 2301 	mla	r3, r3, r1, r2
 800abfc:	9309      	str	r3, [sp, #36]	; 0x24
 800abfe:	2300      	movs	r3, #0
 800ac00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac02:	1c51      	adds	r1, r2, #1
 800ac04:	9115      	str	r1, [sp, #84]	; 0x54
 800ac06:	7852      	ldrb	r2, [r2, #1]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	e7c9      	b.n	800aba0 <_strtod_l+0x1e0>
 800ac0c:	4658      	mov	r0, fp
 800ac0e:	e7d2      	b.n	800abb6 <_strtod_l+0x1f6>
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	f103 0301 	add.w	r3, r3, #1
 800ac16:	dc03      	bgt.n	800ac20 <_strtod_l+0x260>
 800ac18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ac1a:	434f      	muls	r7, r1
 800ac1c:	9709      	str	r7, [sp, #36]	; 0x24
 800ac1e:	e7e1      	b.n	800abe4 <_strtod_l+0x224>
 800ac20:	2b10      	cmp	r3, #16
 800ac22:	bfd8      	it	le
 800ac24:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ac28:	e7dc      	b.n	800abe4 <_strtod_l+0x224>
 800ac2a:	2e10      	cmp	r6, #16
 800ac2c:	bfdc      	itt	le
 800ac2e:	230a      	movle	r3, #10
 800ac30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ac34:	e7e3      	b.n	800abfe <_strtod_l+0x23e>
 800ac36:	2300      	movs	r3, #0
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e780      	b.n	800ab40 <_strtod_l+0x180>
 800ac3e:	f04f 0c00 	mov.w	ip, #0
 800ac42:	1caa      	adds	r2, r5, #2
 800ac44:	9215      	str	r2, [sp, #84]	; 0x54
 800ac46:	78aa      	ldrb	r2, [r5, #2]
 800ac48:	e788      	b.n	800ab5c <_strtod_l+0x19c>
 800ac4a:	f04f 0c01 	mov.w	ip, #1
 800ac4e:	e7f8      	b.n	800ac42 <_strtod_l+0x282>
 800ac50:	0800f7a8 	.word	0x0800f7a8
 800ac54:	0800f7a4 	.word	0x0800f7a4
 800ac58:	7ff00000 	.word	0x7ff00000
 800ac5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac5e:	1c51      	adds	r1, r2, #1
 800ac60:	9115      	str	r1, [sp, #84]	; 0x54
 800ac62:	7852      	ldrb	r2, [r2, #1]
 800ac64:	2a30      	cmp	r2, #48	; 0x30
 800ac66:	d0f9      	beq.n	800ac5c <_strtod_l+0x29c>
 800ac68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ac6c:	2908      	cmp	r1, #8
 800ac6e:	f63f af7a 	bhi.w	800ab66 <_strtod_l+0x1a6>
 800ac72:	3a30      	subs	r2, #48	; 0x30
 800ac74:	9208      	str	r2, [sp, #32]
 800ac76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac78:	920c      	str	r2, [sp, #48]	; 0x30
 800ac7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac7c:	1c57      	adds	r7, r2, #1
 800ac7e:	9715      	str	r7, [sp, #84]	; 0x54
 800ac80:	7852      	ldrb	r2, [r2, #1]
 800ac82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ac86:	f1be 0f09 	cmp.w	lr, #9
 800ac8a:	d938      	bls.n	800acfe <_strtod_l+0x33e>
 800ac8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac8e:	1a7f      	subs	r7, r7, r1
 800ac90:	2f08      	cmp	r7, #8
 800ac92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ac96:	dc03      	bgt.n	800aca0 <_strtod_l+0x2e0>
 800ac98:	9908      	ldr	r1, [sp, #32]
 800ac9a:	428f      	cmp	r7, r1
 800ac9c:	bfa8      	it	ge
 800ac9e:	460f      	movge	r7, r1
 800aca0:	f1bc 0f00 	cmp.w	ip, #0
 800aca4:	d000      	beq.n	800aca8 <_strtod_l+0x2e8>
 800aca6:	427f      	negs	r7, r7
 800aca8:	2e00      	cmp	r6, #0
 800acaa:	d14f      	bne.n	800ad4c <_strtod_l+0x38c>
 800acac:	9904      	ldr	r1, [sp, #16]
 800acae:	4301      	orrs	r1, r0
 800acb0:	f47f aec1 	bne.w	800aa36 <_strtod_l+0x76>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f47f aedb 	bne.w	800aa70 <_strtod_l+0xb0>
 800acba:	2a69      	cmp	r2, #105	; 0x69
 800acbc:	d029      	beq.n	800ad12 <_strtod_l+0x352>
 800acbe:	dc26      	bgt.n	800ad0e <_strtod_l+0x34e>
 800acc0:	2a49      	cmp	r2, #73	; 0x49
 800acc2:	d026      	beq.n	800ad12 <_strtod_l+0x352>
 800acc4:	2a4e      	cmp	r2, #78	; 0x4e
 800acc6:	f47f aed3 	bne.w	800aa70 <_strtod_l+0xb0>
 800acca:	499b      	ldr	r1, [pc, #620]	; (800af38 <_strtod_l+0x578>)
 800accc:	a815      	add	r0, sp, #84	; 0x54
 800acce:	f001 fa27 	bl	800c120 <__match>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f43f aecc 	beq.w	800aa70 <_strtod_l+0xb0>
 800acd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b28      	cmp	r3, #40	; 0x28
 800acde:	d12f      	bne.n	800ad40 <_strtod_l+0x380>
 800ace0:	4996      	ldr	r1, [pc, #600]	; (800af3c <_strtod_l+0x57c>)
 800ace2:	aa18      	add	r2, sp, #96	; 0x60
 800ace4:	a815      	add	r0, sp, #84	; 0x54
 800ace6:	f001 fa2f 	bl	800c148 <__hexnan>
 800acea:	2805      	cmp	r0, #5
 800acec:	d128      	bne.n	800ad40 <_strtod_l+0x380>
 800acee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800acf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800acf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800acfc:	e69b      	b.n	800aa36 <_strtod_l+0x76>
 800acfe:	9f08      	ldr	r7, [sp, #32]
 800ad00:	210a      	movs	r1, #10
 800ad02:	fb01 2107 	mla	r1, r1, r7, r2
 800ad06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ad0a:	9208      	str	r2, [sp, #32]
 800ad0c:	e7b5      	b.n	800ac7a <_strtod_l+0x2ba>
 800ad0e:	2a6e      	cmp	r2, #110	; 0x6e
 800ad10:	e7d9      	b.n	800acc6 <_strtod_l+0x306>
 800ad12:	498b      	ldr	r1, [pc, #556]	; (800af40 <_strtod_l+0x580>)
 800ad14:	a815      	add	r0, sp, #84	; 0x54
 800ad16:	f001 fa03 	bl	800c120 <__match>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f43f aea8 	beq.w	800aa70 <_strtod_l+0xb0>
 800ad20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad22:	4988      	ldr	r1, [pc, #544]	; (800af44 <_strtod_l+0x584>)
 800ad24:	3b01      	subs	r3, #1
 800ad26:	a815      	add	r0, sp, #84	; 0x54
 800ad28:	9315      	str	r3, [sp, #84]	; 0x54
 800ad2a:	f001 f9f9 	bl	800c120 <__match>
 800ad2e:	b910      	cbnz	r0, 800ad36 <_strtod_l+0x376>
 800ad30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad32:	3301      	adds	r3, #1
 800ad34:	9315      	str	r3, [sp, #84]	; 0x54
 800ad36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800af54 <_strtod_l+0x594>
 800ad3a:	f04f 0800 	mov.w	r8, #0
 800ad3e:	e67a      	b.n	800aa36 <_strtod_l+0x76>
 800ad40:	4881      	ldr	r0, [pc, #516]	; (800af48 <_strtod_l+0x588>)
 800ad42:	f000 ff09 	bl	800bb58 <nan>
 800ad46:	ec59 8b10 	vmov	r8, r9, d0
 800ad4a:	e674      	b.n	800aa36 <_strtod_l+0x76>
 800ad4c:	9b05      	ldr	r3, [sp, #20]
 800ad4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad50:	1afb      	subs	r3, r7, r3
 800ad52:	f1bb 0f00 	cmp.w	fp, #0
 800ad56:	bf08      	it	eq
 800ad58:	46b3      	moveq	fp, r6
 800ad5a:	2e10      	cmp	r6, #16
 800ad5c:	9308      	str	r3, [sp, #32]
 800ad5e:	4635      	mov	r5, r6
 800ad60:	bfa8      	it	ge
 800ad62:	2510      	movge	r5, #16
 800ad64:	f7f5 fbde 	bl	8000524 <__aeabi_ui2d>
 800ad68:	2e09      	cmp	r6, #9
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	4689      	mov	r9, r1
 800ad6e:	dd13      	ble.n	800ad98 <_strtod_l+0x3d8>
 800ad70:	4b76      	ldr	r3, [pc, #472]	; (800af4c <_strtod_l+0x58c>)
 800ad72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ad76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad7a:	f7f5 fc4d 	bl	8000618 <__aeabi_dmul>
 800ad7e:	4680      	mov	r8, r0
 800ad80:	4650      	mov	r0, sl
 800ad82:	4689      	mov	r9, r1
 800ad84:	f7f5 fbce 	bl	8000524 <__aeabi_ui2d>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	f7f5 fa8c 	bl	80002ac <__adddf3>
 800ad94:	4680      	mov	r8, r0
 800ad96:	4689      	mov	r9, r1
 800ad98:	2e0f      	cmp	r6, #15
 800ad9a:	dc38      	bgt.n	800ae0e <_strtod_l+0x44e>
 800ad9c:	9b08      	ldr	r3, [sp, #32]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f43f ae49 	beq.w	800aa36 <_strtod_l+0x76>
 800ada4:	dd24      	ble.n	800adf0 <_strtod_l+0x430>
 800ada6:	2b16      	cmp	r3, #22
 800ada8:	dc0b      	bgt.n	800adc2 <_strtod_l+0x402>
 800adaa:	4968      	ldr	r1, [pc, #416]	; (800af4c <_strtod_l+0x58c>)
 800adac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb4:	4642      	mov	r2, r8
 800adb6:	464b      	mov	r3, r9
 800adb8:	f7f5 fc2e 	bl	8000618 <__aeabi_dmul>
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	e639      	b.n	800aa36 <_strtod_l+0x76>
 800adc2:	9a08      	ldr	r2, [sp, #32]
 800adc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800adc8:	4293      	cmp	r3, r2
 800adca:	db20      	blt.n	800ae0e <_strtod_l+0x44e>
 800adcc:	4c5f      	ldr	r4, [pc, #380]	; (800af4c <_strtod_l+0x58c>)
 800adce:	f1c6 060f 	rsb	r6, r6, #15
 800add2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800add6:	4642      	mov	r2, r8
 800add8:	464b      	mov	r3, r9
 800adda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adde:	f7f5 fc1b 	bl	8000618 <__aeabi_dmul>
 800ade2:	9b08      	ldr	r3, [sp, #32]
 800ade4:	1b9e      	subs	r6, r3, r6
 800ade6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800adea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adee:	e7e3      	b.n	800adb8 <_strtod_l+0x3f8>
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	3316      	adds	r3, #22
 800adf4:	db0b      	blt.n	800ae0e <_strtod_l+0x44e>
 800adf6:	9b05      	ldr	r3, [sp, #20]
 800adf8:	1bdf      	subs	r7, r3, r7
 800adfa:	4b54      	ldr	r3, [pc, #336]	; (800af4c <_strtod_l+0x58c>)
 800adfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ae00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae04:	4640      	mov	r0, r8
 800ae06:	4649      	mov	r1, r9
 800ae08:	f7f5 fd30 	bl	800086c <__aeabi_ddiv>
 800ae0c:	e7d6      	b.n	800adbc <_strtod_l+0x3fc>
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	1b75      	subs	r5, r6, r5
 800ae12:	441d      	add	r5, r3
 800ae14:	2d00      	cmp	r5, #0
 800ae16:	dd70      	ble.n	800aefa <_strtod_l+0x53a>
 800ae18:	f015 030f 	ands.w	r3, r5, #15
 800ae1c:	d00a      	beq.n	800ae34 <_strtod_l+0x474>
 800ae1e:	494b      	ldr	r1, [pc, #300]	; (800af4c <_strtod_l+0x58c>)
 800ae20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae24:	4642      	mov	r2, r8
 800ae26:	464b      	mov	r3, r9
 800ae28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2c:	f7f5 fbf4 	bl	8000618 <__aeabi_dmul>
 800ae30:	4680      	mov	r8, r0
 800ae32:	4689      	mov	r9, r1
 800ae34:	f035 050f 	bics.w	r5, r5, #15
 800ae38:	d04d      	beq.n	800aed6 <_strtod_l+0x516>
 800ae3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ae3e:	dd22      	ble.n	800ae86 <_strtod_l+0x4c6>
 800ae40:	2500      	movs	r5, #0
 800ae42:	46ab      	mov	fp, r5
 800ae44:	9509      	str	r5, [sp, #36]	; 0x24
 800ae46:	9505      	str	r5, [sp, #20]
 800ae48:	2322      	movs	r3, #34	; 0x22
 800ae4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800af54 <_strtod_l+0x594>
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	f04f 0800 	mov.w	r8, #0
 800ae54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f43f aded 	beq.w	800aa36 <_strtod_l+0x76>
 800ae5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f7ff f924 	bl	800a0ac <_Bfree>
 800ae64:	9905      	ldr	r1, [sp, #20]
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7ff f920 	bl	800a0ac <_Bfree>
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7ff f91c 	bl	800a0ac <_Bfree>
 800ae74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff f918 	bl	800a0ac <_Bfree>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7ff f914 	bl	800a0ac <_Bfree>
 800ae84:	e5d7      	b.n	800aa36 <_strtod_l+0x76>
 800ae86:	4b32      	ldr	r3, [pc, #200]	; (800af50 <_strtod_l+0x590>)
 800ae88:	9304      	str	r3, [sp, #16]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	112d      	asrs	r5, r5, #4
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4649      	mov	r1, r9
 800ae92:	469a      	mov	sl, r3
 800ae94:	2d01      	cmp	r5, #1
 800ae96:	dc21      	bgt.n	800aedc <_strtod_l+0x51c>
 800ae98:	b10b      	cbz	r3, 800ae9e <_strtod_l+0x4de>
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4689      	mov	r9, r1
 800ae9e:	492c      	ldr	r1, [pc, #176]	; (800af50 <_strtod_l+0x590>)
 800aea0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aea4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aea8:	4642      	mov	r2, r8
 800aeaa:	464b      	mov	r3, r9
 800aeac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb0:	f7f5 fbb2 	bl	8000618 <__aeabi_dmul>
 800aeb4:	4b27      	ldr	r3, [pc, #156]	; (800af54 <_strtod_l+0x594>)
 800aeb6:	460a      	mov	r2, r1
 800aeb8:	400b      	ands	r3, r1
 800aeba:	4927      	ldr	r1, [pc, #156]	; (800af58 <_strtod_l+0x598>)
 800aebc:	428b      	cmp	r3, r1
 800aebe:	4680      	mov	r8, r0
 800aec0:	d8be      	bhi.n	800ae40 <_strtod_l+0x480>
 800aec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aec6:	428b      	cmp	r3, r1
 800aec8:	bf86      	itte	hi
 800aeca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800af5c <_strtod_l+0x59c>
 800aece:	f04f 38ff 	movhi.w	r8, #4294967295
 800aed2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aed6:	2300      	movs	r3, #0
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	e07b      	b.n	800afd4 <_strtod_l+0x614>
 800aedc:	07ea      	lsls	r2, r5, #31
 800aede:	d505      	bpl.n	800aeec <_strtod_l+0x52c>
 800aee0:	9b04      	ldr	r3, [sp, #16]
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f7f5 fb97 	bl	8000618 <__aeabi_dmul>
 800aeea:	2301      	movs	r3, #1
 800aeec:	9a04      	ldr	r2, [sp, #16]
 800aeee:	3208      	adds	r2, #8
 800aef0:	f10a 0a01 	add.w	sl, sl, #1
 800aef4:	106d      	asrs	r5, r5, #1
 800aef6:	9204      	str	r2, [sp, #16]
 800aef8:	e7cc      	b.n	800ae94 <_strtod_l+0x4d4>
 800aefa:	d0ec      	beq.n	800aed6 <_strtod_l+0x516>
 800aefc:	426d      	negs	r5, r5
 800aefe:	f015 020f 	ands.w	r2, r5, #15
 800af02:	d00a      	beq.n	800af1a <_strtod_l+0x55a>
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <_strtod_l+0x58c>)
 800af06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af0a:	4640      	mov	r0, r8
 800af0c:	4649      	mov	r1, r9
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 fcab 	bl	800086c <__aeabi_ddiv>
 800af16:	4680      	mov	r8, r0
 800af18:	4689      	mov	r9, r1
 800af1a:	112d      	asrs	r5, r5, #4
 800af1c:	d0db      	beq.n	800aed6 <_strtod_l+0x516>
 800af1e:	2d1f      	cmp	r5, #31
 800af20:	dd1e      	ble.n	800af60 <_strtod_l+0x5a0>
 800af22:	2500      	movs	r5, #0
 800af24:	46ab      	mov	fp, r5
 800af26:	9509      	str	r5, [sp, #36]	; 0x24
 800af28:	9505      	str	r5, [sp, #20]
 800af2a:	2322      	movs	r3, #34	; 0x22
 800af2c:	f04f 0800 	mov.w	r8, #0
 800af30:	f04f 0900 	mov.w	r9, #0
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	e78d      	b.n	800ae54 <_strtod_l+0x494>
 800af38:	0800f591 	.word	0x0800f591
 800af3c:	0800f7bc 	.word	0x0800f7bc
 800af40:	0800f589 	.word	0x0800f589
 800af44:	0800f5c0 	.word	0x0800f5c0
 800af48:	0800f94d 	.word	0x0800f94d
 800af4c:	0800f6d0 	.word	0x0800f6d0
 800af50:	0800f6a8 	.word	0x0800f6a8
 800af54:	7ff00000 	.word	0x7ff00000
 800af58:	7ca00000 	.word	0x7ca00000
 800af5c:	7fefffff 	.word	0x7fefffff
 800af60:	f015 0310 	ands.w	r3, r5, #16
 800af64:	bf18      	it	ne
 800af66:	236a      	movne	r3, #106	; 0x6a
 800af68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b30c <_strtod_l+0x94c>
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	4640      	mov	r0, r8
 800af70:	4649      	mov	r1, r9
 800af72:	2300      	movs	r3, #0
 800af74:	07ea      	lsls	r2, r5, #31
 800af76:	d504      	bpl.n	800af82 <_strtod_l+0x5c2>
 800af78:	e9da 2300 	ldrd	r2, r3, [sl]
 800af7c:	f7f5 fb4c 	bl	8000618 <__aeabi_dmul>
 800af80:	2301      	movs	r3, #1
 800af82:	106d      	asrs	r5, r5, #1
 800af84:	f10a 0a08 	add.w	sl, sl, #8
 800af88:	d1f4      	bne.n	800af74 <_strtod_l+0x5b4>
 800af8a:	b10b      	cbz	r3, 800af90 <_strtod_l+0x5d0>
 800af8c:	4680      	mov	r8, r0
 800af8e:	4689      	mov	r9, r1
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	b1bb      	cbz	r3, 800afc4 <_strtod_l+0x604>
 800af94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800af98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	4649      	mov	r1, r9
 800afa0:	dd10      	ble.n	800afc4 <_strtod_l+0x604>
 800afa2:	2b1f      	cmp	r3, #31
 800afa4:	f340 811e 	ble.w	800b1e4 <_strtod_l+0x824>
 800afa8:	2b34      	cmp	r3, #52	; 0x34
 800afaa:	bfde      	ittt	le
 800afac:	f04f 33ff 	movle.w	r3, #4294967295
 800afb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800afb4:	4093      	lslle	r3, r2
 800afb6:	f04f 0800 	mov.w	r8, #0
 800afba:	bfcc      	ite	gt
 800afbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800afc0:	ea03 0901 	andle.w	r9, r3, r1
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 fd8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1a6      	bne.n	800af22 <_strtod_l+0x562>
 800afd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afda:	4633      	mov	r3, r6
 800afdc:	465a      	mov	r2, fp
 800afde:	4620      	mov	r0, r4
 800afe0:	f7ff f8cc 	bl	800a17c <__s2b>
 800afe4:	9009      	str	r0, [sp, #36]	; 0x24
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f af2a 	beq.w	800ae40 <_strtod_l+0x480>
 800afec:	9a08      	ldr	r2, [sp, #32]
 800afee:	9b05      	ldr	r3, [sp, #20]
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	eba3 0307 	sub.w	r3, r3, r7
 800aff6:	bfa8      	it	ge
 800aff8:	2300      	movge	r3, #0
 800affa:	930c      	str	r3, [sp, #48]	; 0x30
 800affc:	2500      	movs	r5, #0
 800affe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b002:	9312      	str	r3, [sp, #72]	; 0x48
 800b004:	46ab      	mov	fp, r5
 800b006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b008:	4620      	mov	r0, r4
 800b00a:	6859      	ldr	r1, [r3, #4]
 800b00c:	f7ff f80e 	bl	800a02c <_Balloc>
 800b010:	9005      	str	r0, [sp, #20]
 800b012:	2800      	cmp	r0, #0
 800b014:	f43f af18 	beq.w	800ae48 <_strtod_l+0x488>
 800b018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	3202      	adds	r2, #2
 800b01e:	f103 010c 	add.w	r1, r3, #12
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	300c      	adds	r0, #12
 800b026:	f000 fd87 	bl	800bb38 <memcpy>
 800b02a:	ec49 8b10 	vmov	d0, r8, r9
 800b02e:	aa18      	add	r2, sp, #96	; 0x60
 800b030:	a917      	add	r1, sp, #92	; 0x5c
 800b032:	4620      	mov	r0, r4
 800b034:	f7ff fbd6 	bl	800a7e4 <__d2b>
 800b038:	ec49 8b18 	vmov	d8, r8, r9
 800b03c:	9016      	str	r0, [sp, #88]	; 0x58
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f af02 	beq.w	800ae48 <_strtod_l+0x488>
 800b044:	2101      	movs	r1, #1
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff f930 	bl	800a2ac <__i2b>
 800b04c:	4683      	mov	fp, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f aefa 	beq.w	800ae48 <_strtod_l+0x488>
 800b054:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b056:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b058:	2e00      	cmp	r6, #0
 800b05a:	bfab      	itete	ge
 800b05c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b05e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b060:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b062:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b066:	bfac      	ite	ge
 800b068:	eb06 0a03 	addge.w	sl, r6, r3
 800b06c:	1b9f      	sublt	r7, r3, r6
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	1af6      	subs	r6, r6, r3
 800b072:	4416      	add	r6, r2
 800b074:	4ba0      	ldr	r3, [pc, #640]	; (800b2f8 <_strtod_l+0x938>)
 800b076:	3e01      	subs	r6, #1
 800b078:	429e      	cmp	r6, r3
 800b07a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b07e:	f280 80c4 	bge.w	800b20a <_strtod_l+0x84a>
 800b082:	1b9b      	subs	r3, r3, r6
 800b084:	2b1f      	cmp	r3, #31
 800b086:	eba2 0203 	sub.w	r2, r2, r3
 800b08a:	f04f 0101 	mov.w	r1, #1
 800b08e:	f300 80b0 	bgt.w	800b1f2 <_strtod_l+0x832>
 800b092:	fa01 f303 	lsl.w	r3, r1, r3
 800b096:	930e      	str	r3, [sp, #56]	; 0x38
 800b098:	2300      	movs	r3, #0
 800b09a:	930d      	str	r3, [sp, #52]	; 0x34
 800b09c:	eb0a 0602 	add.w	r6, sl, r2
 800b0a0:	9b04      	ldr	r3, [sp, #16]
 800b0a2:	45b2      	cmp	sl, r6
 800b0a4:	4417      	add	r7, r2
 800b0a6:	441f      	add	r7, r3
 800b0a8:	4653      	mov	r3, sl
 800b0aa:	bfa8      	it	ge
 800b0ac:	4633      	movge	r3, r6
 800b0ae:	42bb      	cmp	r3, r7
 800b0b0:	bfa8      	it	ge
 800b0b2:	463b      	movge	r3, r7
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfc2      	ittt	gt
 800b0b8:	1af6      	subgt	r6, r6, r3
 800b0ba:	1aff      	subgt	r7, r7, r3
 800b0bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b0c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dd17      	ble.n	800b0f6 <_strtod_l+0x736>
 800b0c6:	4659      	mov	r1, fp
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7ff f9ae 	bl	800a42c <__pow5mult>
 800b0d0:	4683      	mov	fp, r0
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f43f aeb8 	beq.w	800ae48 <_strtod_l+0x488>
 800b0d8:	4601      	mov	r1, r0
 800b0da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7ff f8fb 	bl	800a2d8 <__multiply>
 800b0e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f43f aeaf 	beq.w	800ae48 <_strtod_l+0x488>
 800b0ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7fe ffdd 	bl	800a0ac <_Bfree>
 800b0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f4:	9316      	str	r3, [sp, #88]	; 0x58
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	f300 808c 	bgt.w	800b214 <_strtod_l+0x854>
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dd08      	ble.n	800b114 <_strtod_l+0x754>
 800b102:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b104:	9905      	ldr	r1, [sp, #20]
 800b106:	4620      	mov	r0, r4
 800b108:	f7ff f990 	bl	800a42c <__pow5mult>
 800b10c:	9005      	str	r0, [sp, #20]
 800b10e:	2800      	cmp	r0, #0
 800b110:	f43f ae9a 	beq.w	800ae48 <_strtod_l+0x488>
 800b114:	2f00      	cmp	r7, #0
 800b116:	dd08      	ble.n	800b12a <_strtod_l+0x76a>
 800b118:	9905      	ldr	r1, [sp, #20]
 800b11a:	463a      	mov	r2, r7
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff f9df 	bl	800a4e0 <__lshift>
 800b122:	9005      	str	r0, [sp, #20]
 800b124:	2800      	cmp	r0, #0
 800b126:	f43f ae8f 	beq.w	800ae48 <_strtod_l+0x488>
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	dd08      	ble.n	800b142 <_strtod_l+0x782>
 800b130:	4659      	mov	r1, fp
 800b132:	4652      	mov	r2, sl
 800b134:	4620      	mov	r0, r4
 800b136:	f7ff f9d3 	bl	800a4e0 <__lshift>
 800b13a:	4683      	mov	fp, r0
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f43f ae83 	beq.w	800ae48 <_strtod_l+0x488>
 800b142:	9a05      	ldr	r2, [sp, #20]
 800b144:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b146:	4620      	mov	r0, r4
 800b148:	f7ff fa52 	bl	800a5f0 <__mdiff>
 800b14c:	4605      	mov	r5, r0
 800b14e:	2800      	cmp	r0, #0
 800b150:	f43f ae7a 	beq.w	800ae48 <_strtod_l+0x488>
 800b154:	68c3      	ldr	r3, [r0, #12]
 800b156:	930b      	str	r3, [sp, #44]	; 0x2c
 800b158:	2300      	movs	r3, #0
 800b15a:	60c3      	str	r3, [r0, #12]
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7ff fa2b 	bl	800a5b8 <__mcmp>
 800b162:	2800      	cmp	r0, #0
 800b164:	da60      	bge.n	800b228 <_strtod_l+0x868>
 800b166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b168:	ea53 0308 	orrs.w	r3, r3, r8
 800b16c:	f040 8084 	bne.w	800b278 <_strtod_l+0x8b8>
 800b170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b174:	2b00      	cmp	r3, #0
 800b176:	d17f      	bne.n	800b278 <_strtod_l+0x8b8>
 800b178:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b17c:	0d1b      	lsrs	r3, r3, #20
 800b17e:	051b      	lsls	r3, r3, #20
 800b180:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b184:	d978      	bls.n	800b278 <_strtod_l+0x8b8>
 800b186:	696b      	ldr	r3, [r5, #20]
 800b188:	b913      	cbnz	r3, 800b190 <_strtod_l+0x7d0>
 800b18a:	692b      	ldr	r3, [r5, #16]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	dd73      	ble.n	800b278 <_strtod_l+0x8b8>
 800b190:	4629      	mov	r1, r5
 800b192:	2201      	movs	r2, #1
 800b194:	4620      	mov	r0, r4
 800b196:	f7ff f9a3 	bl	800a4e0 <__lshift>
 800b19a:	4659      	mov	r1, fp
 800b19c:	4605      	mov	r5, r0
 800b19e:	f7ff fa0b 	bl	800a5b8 <__mcmp>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	dd68      	ble.n	800b278 <_strtod_l+0x8b8>
 800b1a6:	9904      	ldr	r1, [sp, #16]
 800b1a8:	4a54      	ldr	r2, [pc, #336]	; (800b2fc <_strtod_l+0x93c>)
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	f000 8084 	beq.w	800b2ba <_strtod_l+0x8fa>
 800b1b2:	ea02 0109 	and.w	r1, r2, r9
 800b1b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1ba:	dc7e      	bgt.n	800b2ba <_strtod_l+0x8fa>
 800b1bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b1c0:	f77f aeb3 	ble.w	800af2a <_strtod_l+0x56a>
 800b1c4:	4b4e      	ldr	r3, [pc, #312]	; (800b300 <_strtod_l+0x940>)
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f7f5 fa24 	bl	8000618 <__aeabi_dmul>
 800b1d0:	4b4a      	ldr	r3, [pc, #296]	; (800b2fc <_strtod_l+0x93c>)
 800b1d2:	400b      	ands	r3, r1
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f47f ae3f 	bne.w	800ae5c <_strtod_l+0x49c>
 800b1de:	2322      	movs	r3, #34	; 0x22
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	e63b      	b.n	800ae5c <_strtod_l+0x49c>
 800b1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ec:	ea03 0808 	and.w	r8, r3, r8
 800b1f0:	e6e8      	b.n	800afc4 <_strtod_l+0x604>
 800b1f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b1f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b1fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b1fe:	36e2      	adds	r6, #226	; 0xe2
 800b200:	fa01 f306 	lsl.w	r3, r1, r6
 800b204:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b208:	e748      	b.n	800b09c <_strtod_l+0x6dc>
 800b20a:	2100      	movs	r1, #0
 800b20c:	2301      	movs	r3, #1
 800b20e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b212:	e743      	b.n	800b09c <_strtod_l+0x6dc>
 800b214:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b216:	4632      	mov	r2, r6
 800b218:	4620      	mov	r0, r4
 800b21a:	f7ff f961 	bl	800a4e0 <__lshift>
 800b21e:	9016      	str	r0, [sp, #88]	; 0x58
 800b220:	2800      	cmp	r0, #0
 800b222:	f47f af6b 	bne.w	800b0fc <_strtod_l+0x73c>
 800b226:	e60f      	b.n	800ae48 <_strtod_l+0x488>
 800b228:	46ca      	mov	sl, r9
 800b22a:	d171      	bne.n	800b310 <_strtod_l+0x950>
 800b22c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b22e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b232:	b352      	cbz	r2, 800b28a <_strtod_l+0x8ca>
 800b234:	4a33      	ldr	r2, [pc, #204]	; (800b304 <_strtod_l+0x944>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d12a      	bne.n	800b290 <_strtod_l+0x8d0>
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	4641      	mov	r1, r8
 800b23e:	b1fb      	cbz	r3, 800b280 <_strtod_l+0x8c0>
 800b240:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <_strtod_l+0x93c>)
 800b242:	ea09 0303 	and.w	r3, r9, r3
 800b246:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295
 800b24e:	d81a      	bhi.n	800b286 <_strtod_l+0x8c6>
 800b250:	0d1b      	lsrs	r3, r3, #20
 800b252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b256:	fa02 f303 	lsl.w	r3, r2, r3
 800b25a:	4299      	cmp	r1, r3
 800b25c:	d118      	bne.n	800b290 <_strtod_l+0x8d0>
 800b25e:	4b2a      	ldr	r3, [pc, #168]	; (800b308 <_strtod_l+0x948>)
 800b260:	459a      	cmp	sl, r3
 800b262:	d102      	bne.n	800b26a <_strtod_l+0x8aa>
 800b264:	3101      	adds	r1, #1
 800b266:	f43f adef 	beq.w	800ae48 <_strtod_l+0x488>
 800b26a:	4b24      	ldr	r3, [pc, #144]	; (800b2fc <_strtod_l+0x93c>)
 800b26c:	ea0a 0303 	and.w	r3, sl, r3
 800b270:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b274:	f04f 0800 	mov.w	r8, #0
 800b278:	9b04      	ldr	r3, [sp, #16]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1a2      	bne.n	800b1c4 <_strtod_l+0x804>
 800b27e:	e5ed      	b.n	800ae5c <_strtod_l+0x49c>
 800b280:	f04f 33ff 	mov.w	r3, #4294967295
 800b284:	e7e9      	b.n	800b25a <_strtod_l+0x89a>
 800b286:	4613      	mov	r3, r2
 800b288:	e7e7      	b.n	800b25a <_strtod_l+0x89a>
 800b28a:	ea53 0308 	orrs.w	r3, r3, r8
 800b28e:	d08a      	beq.n	800b1a6 <_strtod_l+0x7e6>
 800b290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b292:	b1e3      	cbz	r3, 800b2ce <_strtod_l+0x90e>
 800b294:	ea13 0f0a 	tst.w	r3, sl
 800b298:	d0ee      	beq.n	800b278 <_strtod_l+0x8b8>
 800b29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29c:	9a04      	ldr	r2, [sp, #16]
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	b1c3      	cbz	r3, 800b2d6 <_strtod_l+0x916>
 800b2a4:	f7ff fb6f 	bl	800a986 <sulp>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	ec51 0b18 	vmov	r0, r1, d8
 800b2b0:	f7f4 fffc 	bl	80002ac <__adddf3>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	4689      	mov	r9, r1
 800b2b8:	e7de      	b.n	800b278 <_strtod_l+0x8b8>
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b2c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b2c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b2c8:	f04f 38ff 	mov.w	r8, #4294967295
 800b2cc:	e7d4      	b.n	800b278 <_strtod_l+0x8b8>
 800b2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2d0:	ea13 0f08 	tst.w	r3, r8
 800b2d4:	e7e0      	b.n	800b298 <_strtod_l+0x8d8>
 800b2d6:	f7ff fb56 	bl	800a986 <sulp>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	ec51 0b18 	vmov	r0, r1, d8
 800b2e2:	f7f4 ffe1 	bl	80002a8 <__aeabi_dsub>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4680      	mov	r8, r0
 800b2ec:	4689      	mov	r9, r1
 800b2ee:	f7f5 fbfb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0c0      	beq.n	800b278 <_strtod_l+0x8b8>
 800b2f6:	e618      	b.n	800af2a <_strtod_l+0x56a>
 800b2f8:	fffffc02 	.word	0xfffffc02
 800b2fc:	7ff00000 	.word	0x7ff00000
 800b300:	39500000 	.word	0x39500000
 800b304:	000fffff 	.word	0x000fffff
 800b308:	7fefffff 	.word	0x7fefffff
 800b30c:	0800f7d0 	.word	0x0800f7d0
 800b310:	4659      	mov	r1, fp
 800b312:	4628      	mov	r0, r5
 800b314:	f7ff fac0 	bl	800a898 <__ratio>
 800b318:	ec57 6b10 	vmov	r6, r7, d0
 800b31c:	ee10 0a10 	vmov	r0, s0
 800b320:	2200      	movs	r2, #0
 800b322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b326:	4639      	mov	r1, r7
 800b328:	f7f5 fbf2 	bl	8000b10 <__aeabi_dcmple>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d071      	beq.n	800b414 <_strtod_l+0xa54>
 800b330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b332:	2b00      	cmp	r3, #0
 800b334:	d17c      	bne.n	800b430 <_strtod_l+0xa70>
 800b336:	f1b8 0f00 	cmp.w	r8, #0
 800b33a:	d15a      	bne.n	800b3f2 <_strtod_l+0xa32>
 800b33c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b340:	2b00      	cmp	r3, #0
 800b342:	d15d      	bne.n	800b400 <_strtod_l+0xa40>
 800b344:	4b90      	ldr	r3, [pc, #576]	; (800b588 <_strtod_l+0xbc8>)
 800b346:	2200      	movs	r2, #0
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f5 fbd6 	bl	8000afc <__aeabi_dcmplt>
 800b350:	2800      	cmp	r0, #0
 800b352:	d15c      	bne.n	800b40e <_strtod_l+0xa4e>
 800b354:	4630      	mov	r0, r6
 800b356:	4639      	mov	r1, r7
 800b358:	4b8c      	ldr	r3, [pc, #560]	; (800b58c <_strtod_l+0xbcc>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	f7f5 f95c 	bl	8000618 <__aeabi_dmul>
 800b360:	4606      	mov	r6, r0
 800b362:	460f      	mov	r7, r1
 800b364:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b368:	9606      	str	r6, [sp, #24]
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b370:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b374:	4b86      	ldr	r3, [pc, #536]	; (800b590 <_strtod_l+0xbd0>)
 800b376:	ea0a 0303 	and.w	r3, sl, r3
 800b37a:	930d      	str	r3, [sp, #52]	; 0x34
 800b37c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b37e:	4b85      	ldr	r3, [pc, #532]	; (800b594 <_strtod_l+0xbd4>)
 800b380:	429a      	cmp	r2, r3
 800b382:	f040 8090 	bne.w	800b4a6 <_strtod_l+0xae6>
 800b386:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b38a:	ec49 8b10 	vmov	d0, r8, r9
 800b38e:	f7ff f9b9 	bl	800a704 <__ulp>
 800b392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b396:	ec51 0b10 	vmov	r0, r1, d0
 800b39a:	f7f5 f93d 	bl	8000618 <__aeabi_dmul>
 800b39e:	4642      	mov	r2, r8
 800b3a0:	464b      	mov	r3, r9
 800b3a2:	f7f4 ff83 	bl	80002ac <__adddf3>
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4979      	ldr	r1, [pc, #484]	; (800b590 <_strtod_l+0xbd0>)
 800b3aa:	4a7b      	ldr	r2, [pc, #492]	; (800b598 <_strtod_l+0xbd8>)
 800b3ac:	4019      	ands	r1, r3
 800b3ae:	4291      	cmp	r1, r2
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	d944      	bls.n	800b43e <_strtod_l+0xa7e>
 800b3b4:	ee18 2a90 	vmov	r2, s17
 800b3b8:	4b78      	ldr	r3, [pc, #480]	; (800b59c <_strtod_l+0xbdc>)
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d104      	bne.n	800b3c8 <_strtod_l+0xa08>
 800b3be:	ee18 3a10 	vmov	r3, s16
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	f43f ad40 	beq.w	800ae48 <_strtod_l+0x488>
 800b3c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b59c <_strtod_l+0xbdc>
 800b3cc:	f04f 38ff 	mov.w	r8, #4294967295
 800b3d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7fe fe6a 	bl	800a0ac <_Bfree>
 800b3d8:	9905      	ldr	r1, [sp, #20]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f7fe fe66 	bl	800a0ac <_Bfree>
 800b3e0:	4659      	mov	r1, fp
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f7fe fe62 	bl	800a0ac <_Bfree>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7fe fe5e 	bl	800a0ac <_Bfree>
 800b3f0:	e609      	b.n	800b006 <_strtod_l+0x646>
 800b3f2:	f1b8 0f01 	cmp.w	r8, #1
 800b3f6:	d103      	bne.n	800b400 <_strtod_l+0xa40>
 800b3f8:	f1b9 0f00 	cmp.w	r9, #0
 800b3fc:	f43f ad95 	beq.w	800af2a <_strtod_l+0x56a>
 800b400:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b558 <_strtod_l+0xb98>
 800b404:	4f60      	ldr	r7, [pc, #384]	; (800b588 <_strtod_l+0xbc8>)
 800b406:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b40a:	2600      	movs	r6, #0
 800b40c:	e7ae      	b.n	800b36c <_strtod_l+0x9ac>
 800b40e:	4f5f      	ldr	r7, [pc, #380]	; (800b58c <_strtod_l+0xbcc>)
 800b410:	2600      	movs	r6, #0
 800b412:	e7a7      	b.n	800b364 <_strtod_l+0x9a4>
 800b414:	4b5d      	ldr	r3, [pc, #372]	; (800b58c <_strtod_l+0xbcc>)
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f5 f8fc 	bl	8000618 <__aeabi_dmul>
 800b420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b422:	4606      	mov	r6, r0
 800b424:	460f      	mov	r7, r1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d09c      	beq.n	800b364 <_strtod_l+0x9a4>
 800b42a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b42e:	e79d      	b.n	800b36c <_strtod_l+0x9ac>
 800b430:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b560 <_strtod_l+0xba0>
 800b434:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b438:	ec57 6b17 	vmov	r6, r7, d7
 800b43c:	e796      	b.n	800b36c <_strtod_l+0x9ac>
 800b43e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b442:	9b04      	ldr	r3, [sp, #16]
 800b444:	46ca      	mov	sl, r9
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1c2      	bne.n	800b3d0 <_strtod_l+0xa10>
 800b44a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b44e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b450:	0d1b      	lsrs	r3, r3, #20
 800b452:	051b      	lsls	r3, r3, #20
 800b454:	429a      	cmp	r2, r3
 800b456:	d1bb      	bne.n	800b3d0 <_strtod_l+0xa10>
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fc3c 	bl	8000cd8 <__aeabi_d2lz>
 800b460:	f7f5 f8ac 	bl	80005bc <__aeabi_l2d>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b472:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b476:	ea43 0308 	orr.w	r3, r3, r8
 800b47a:	4313      	orrs	r3, r2
 800b47c:	4606      	mov	r6, r0
 800b47e:	460f      	mov	r7, r1
 800b480:	d054      	beq.n	800b52c <_strtod_l+0xb6c>
 800b482:	a339      	add	r3, pc, #228	; (adr r3, 800b568 <_strtod_l+0xba8>)
 800b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b488:	f7f5 fb38 	bl	8000afc <__aeabi_dcmplt>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f47f ace5 	bne.w	800ae5c <_strtod_l+0x49c>
 800b492:	a337      	add	r3, pc, #220	; (adr r3, 800b570 <_strtod_l+0xbb0>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fb4c 	bl	8000b38 <__aeabi_dcmpgt>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d095      	beq.n	800b3d0 <_strtod_l+0xa10>
 800b4a4:	e4da      	b.n	800ae5c <_strtod_l+0x49c>
 800b4a6:	9b04      	ldr	r3, [sp, #16]
 800b4a8:	b333      	cbz	r3, 800b4f8 <_strtod_l+0xb38>
 800b4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b4b0:	d822      	bhi.n	800b4f8 <_strtod_l+0xb38>
 800b4b2:	a331      	add	r3, pc, #196	; (adr r3, 800b578 <_strtod_l+0xbb8>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fb28 	bl	8000b10 <__aeabi_dcmple>
 800b4c0:	b1a0      	cbz	r0, 800b4ec <_strtod_l+0xb2c>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7f5 fb7f 	bl	8000bc8 <__aeabi_d2uiz>
 800b4ca:	2801      	cmp	r0, #1
 800b4cc:	bf38      	it	cc
 800b4ce:	2001      	movcc	r0, #1
 800b4d0:	f7f5 f828 	bl	8000524 <__aeabi_ui2d>
 800b4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460f      	mov	r7, r1
 800b4da:	bb23      	cbnz	r3, 800b526 <_strtod_l+0xb66>
 800b4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4e0:	9010      	str	r0, [sp, #64]	; 0x40
 800b4e2:	9311      	str	r3, [sp, #68]	; 0x44
 800b4e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b4f4:	1a9b      	subs	r3, r3, r2
 800b4f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b4fc:	eeb0 0a48 	vmov.f32	s0, s16
 800b500:	eef0 0a68 	vmov.f32	s1, s17
 800b504:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b508:	f7ff f8fc 	bl	800a704 <__ulp>
 800b50c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b510:	ec53 2b10 	vmov	r2, r3, d0
 800b514:	f7f5 f880 	bl	8000618 <__aeabi_dmul>
 800b518:	ec53 2b18 	vmov	r2, r3, d8
 800b51c:	f7f4 fec6 	bl	80002ac <__adddf3>
 800b520:	4680      	mov	r8, r0
 800b522:	4689      	mov	r9, r1
 800b524:	e78d      	b.n	800b442 <_strtod_l+0xa82>
 800b526:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b52a:	e7db      	b.n	800b4e4 <_strtod_l+0xb24>
 800b52c:	a314      	add	r3, pc, #80	; (adr r3, 800b580 <_strtod_l+0xbc0>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f5 fae3 	bl	8000afc <__aeabi_dcmplt>
 800b536:	e7b3      	b.n	800b4a0 <_strtod_l+0xae0>
 800b538:	2300      	movs	r3, #0
 800b53a:	930a      	str	r3, [sp, #40]	; 0x28
 800b53c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b53e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	f7ff ba7c 	b.w	800aa3e <_strtod_l+0x7e>
 800b546:	2a65      	cmp	r2, #101	; 0x65
 800b548:	f43f ab75 	beq.w	800ac36 <_strtod_l+0x276>
 800b54c:	2a45      	cmp	r2, #69	; 0x45
 800b54e:	f43f ab72 	beq.w	800ac36 <_strtod_l+0x276>
 800b552:	2301      	movs	r3, #1
 800b554:	f7ff bbaa 	b.w	800acac <_strtod_l+0x2ec>
 800b558:	00000000 	.word	0x00000000
 800b55c:	bff00000 	.word	0xbff00000
 800b560:	00000000 	.word	0x00000000
 800b564:	3ff00000 	.word	0x3ff00000
 800b568:	94a03595 	.word	0x94a03595
 800b56c:	3fdfffff 	.word	0x3fdfffff
 800b570:	35afe535 	.word	0x35afe535
 800b574:	3fe00000 	.word	0x3fe00000
 800b578:	ffc00000 	.word	0xffc00000
 800b57c:	41dfffff 	.word	0x41dfffff
 800b580:	94a03595 	.word	0x94a03595
 800b584:	3fcfffff 	.word	0x3fcfffff
 800b588:	3ff00000 	.word	0x3ff00000
 800b58c:	3fe00000 	.word	0x3fe00000
 800b590:	7ff00000 	.word	0x7ff00000
 800b594:	7fe00000 	.word	0x7fe00000
 800b598:	7c9fffff 	.word	0x7c9fffff
 800b59c:	7fefffff 	.word	0x7fefffff

0800b5a0 <_strtod_r>:
 800b5a0:	4b01      	ldr	r3, [pc, #4]	; (800b5a8 <_strtod_r+0x8>)
 800b5a2:	f7ff ba0d 	b.w	800a9c0 <_strtod_l>
 800b5a6:	bf00      	nop
 800b5a8:	200000bc 	.word	0x200000bc

0800b5ac <_strtol_l.constprop.0>:
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b2:	d001      	beq.n	800b5b8 <_strtol_l.constprop.0+0xc>
 800b5b4:	2b24      	cmp	r3, #36	; 0x24
 800b5b6:	d906      	bls.n	800b5c6 <_strtol_l.constprop.0+0x1a>
 800b5b8:	f7fd fd88 	bl	80090cc <__errno>
 800b5bc:	2316      	movs	r3, #22
 800b5be:	6003      	str	r3, [r0, #0]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b6ac <_strtol_l.constprop.0+0x100>
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	462e      	mov	r6, r5
 800b5ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b5d6:	f017 0708 	ands.w	r7, r7, #8
 800b5da:	d1f7      	bne.n	800b5cc <_strtol_l.constprop.0+0x20>
 800b5dc:	2c2d      	cmp	r4, #45	; 0x2d
 800b5de:	d132      	bne.n	800b646 <_strtol_l.constprop.0+0x9a>
 800b5e0:	782c      	ldrb	r4, [r5, #0]
 800b5e2:	2701      	movs	r7, #1
 800b5e4:	1cb5      	adds	r5, r6, #2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d05b      	beq.n	800b6a2 <_strtol_l.constprop.0+0xf6>
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d109      	bne.n	800b602 <_strtol_l.constprop.0+0x56>
 800b5ee:	2c30      	cmp	r4, #48	; 0x30
 800b5f0:	d107      	bne.n	800b602 <_strtol_l.constprop.0+0x56>
 800b5f2:	782c      	ldrb	r4, [r5, #0]
 800b5f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b5f8:	2c58      	cmp	r4, #88	; 0x58
 800b5fa:	d14d      	bne.n	800b698 <_strtol_l.constprop.0+0xec>
 800b5fc:	786c      	ldrb	r4, [r5, #1]
 800b5fe:	2310      	movs	r3, #16
 800b600:	3502      	adds	r5, #2
 800b602:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b606:	f108 38ff 	add.w	r8, r8, #4294967295
 800b60a:	f04f 0e00 	mov.w	lr, #0
 800b60e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b612:	4676      	mov	r6, lr
 800b614:	fb03 8a19 	mls	sl, r3, r9, r8
 800b618:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b61c:	f1bc 0f09 	cmp.w	ip, #9
 800b620:	d816      	bhi.n	800b650 <_strtol_l.constprop.0+0xa4>
 800b622:	4664      	mov	r4, ip
 800b624:	42a3      	cmp	r3, r4
 800b626:	dd24      	ble.n	800b672 <_strtol_l.constprop.0+0xc6>
 800b628:	f1be 3fff 	cmp.w	lr, #4294967295
 800b62c:	d008      	beq.n	800b640 <_strtol_l.constprop.0+0x94>
 800b62e:	45b1      	cmp	r9, r6
 800b630:	d31c      	bcc.n	800b66c <_strtol_l.constprop.0+0xc0>
 800b632:	d101      	bne.n	800b638 <_strtol_l.constprop.0+0x8c>
 800b634:	45a2      	cmp	sl, r4
 800b636:	db19      	blt.n	800b66c <_strtol_l.constprop.0+0xc0>
 800b638:	fb06 4603 	mla	r6, r6, r3, r4
 800b63c:	f04f 0e01 	mov.w	lr, #1
 800b640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b644:	e7e8      	b.n	800b618 <_strtol_l.constprop.0+0x6c>
 800b646:	2c2b      	cmp	r4, #43	; 0x2b
 800b648:	bf04      	itt	eq
 800b64a:	782c      	ldrbeq	r4, [r5, #0]
 800b64c:	1cb5      	addeq	r5, r6, #2
 800b64e:	e7ca      	b.n	800b5e6 <_strtol_l.constprop.0+0x3a>
 800b650:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b654:	f1bc 0f19 	cmp.w	ip, #25
 800b658:	d801      	bhi.n	800b65e <_strtol_l.constprop.0+0xb2>
 800b65a:	3c37      	subs	r4, #55	; 0x37
 800b65c:	e7e2      	b.n	800b624 <_strtol_l.constprop.0+0x78>
 800b65e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b662:	f1bc 0f19 	cmp.w	ip, #25
 800b666:	d804      	bhi.n	800b672 <_strtol_l.constprop.0+0xc6>
 800b668:	3c57      	subs	r4, #87	; 0x57
 800b66a:	e7db      	b.n	800b624 <_strtol_l.constprop.0+0x78>
 800b66c:	f04f 3eff 	mov.w	lr, #4294967295
 800b670:	e7e6      	b.n	800b640 <_strtol_l.constprop.0+0x94>
 800b672:	f1be 3fff 	cmp.w	lr, #4294967295
 800b676:	d105      	bne.n	800b684 <_strtol_l.constprop.0+0xd8>
 800b678:	2322      	movs	r3, #34	; 0x22
 800b67a:	6003      	str	r3, [r0, #0]
 800b67c:	4646      	mov	r6, r8
 800b67e:	b942      	cbnz	r2, 800b692 <_strtol_l.constprop.0+0xe6>
 800b680:	4630      	mov	r0, r6
 800b682:	e79e      	b.n	800b5c2 <_strtol_l.constprop.0+0x16>
 800b684:	b107      	cbz	r7, 800b688 <_strtol_l.constprop.0+0xdc>
 800b686:	4276      	negs	r6, r6
 800b688:	2a00      	cmp	r2, #0
 800b68a:	d0f9      	beq.n	800b680 <_strtol_l.constprop.0+0xd4>
 800b68c:	f1be 0f00 	cmp.w	lr, #0
 800b690:	d000      	beq.n	800b694 <_strtol_l.constprop.0+0xe8>
 800b692:	1e69      	subs	r1, r5, #1
 800b694:	6011      	str	r1, [r2, #0]
 800b696:	e7f3      	b.n	800b680 <_strtol_l.constprop.0+0xd4>
 800b698:	2430      	movs	r4, #48	; 0x30
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1b1      	bne.n	800b602 <_strtol_l.constprop.0+0x56>
 800b69e:	2308      	movs	r3, #8
 800b6a0:	e7af      	b.n	800b602 <_strtol_l.constprop.0+0x56>
 800b6a2:	2c30      	cmp	r4, #48	; 0x30
 800b6a4:	d0a5      	beq.n	800b5f2 <_strtol_l.constprop.0+0x46>
 800b6a6:	230a      	movs	r3, #10
 800b6a8:	e7ab      	b.n	800b602 <_strtol_l.constprop.0+0x56>
 800b6aa:	bf00      	nop
 800b6ac:	0800f7f9 	.word	0x0800f7f9

0800b6b0 <_strtol_r>:
 800b6b0:	f7ff bf7c 	b.w	800b5ac <_strtol_l.constprop.0>

0800b6b4 <__ssputs_r>:
 800b6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	688e      	ldr	r6, [r1, #8]
 800b6ba:	461f      	mov	r7, r3
 800b6bc:	42be      	cmp	r6, r7
 800b6be:	680b      	ldr	r3, [r1, #0]
 800b6c0:	4682      	mov	sl, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	4690      	mov	r8, r2
 800b6c6:	d82c      	bhi.n	800b722 <__ssputs_r+0x6e>
 800b6c8:	898a      	ldrh	r2, [r1, #12]
 800b6ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6ce:	d026      	beq.n	800b71e <__ssputs_r+0x6a>
 800b6d0:	6965      	ldr	r5, [r4, #20]
 800b6d2:	6909      	ldr	r1, [r1, #16]
 800b6d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6d8:	eba3 0901 	sub.w	r9, r3, r1
 800b6dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6e0:	1c7b      	adds	r3, r7, #1
 800b6e2:	444b      	add	r3, r9
 800b6e4:	106d      	asrs	r5, r5, #1
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	bf38      	it	cc
 800b6ea:	461d      	movcc	r5, r3
 800b6ec:	0553      	lsls	r3, r2, #21
 800b6ee:	d527      	bpl.n	800b740 <__ssputs_r+0x8c>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7fe fc0f 	bl	8009f14 <_malloc_r>
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	b360      	cbz	r0, 800b754 <__ssputs_r+0xa0>
 800b6fa:	6921      	ldr	r1, [r4, #16]
 800b6fc:	464a      	mov	r2, r9
 800b6fe:	f000 fa1b 	bl	800bb38 <memcpy>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	6126      	str	r6, [r4, #16]
 800b710:	6165      	str	r5, [r4, #20]
 800b712:	444e      	add	r6, r9
 800b714:	eba5 0509 	sub.w	r5, r5, r9
 800b718:	6026      	str	r6, [r4, #0]
 800b71a:	60a5      	str	r5, [r4, #8]
 800b71c:	463e      	mov	r6, r7
 800b71e:	42be      	cmp	r6, r7
 800b720:	d900      	bls.n	800b724 <__ssputs_r+0x70>
 800b722:	463e      	mov	r6, r7
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	4632      	mov	r2, r6
 800b728:	4641      	mov	r1, r8
 800b72a:	f000 f9c9 	bl	800bac0 <memmove>
 800b72e:	68a3      	ldr	r3, [r4, #8]
 800b730:	1b9b      	subs	r3, r3, r6
 800b732:	60a3      	str	r3, [r4, #8]
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	4433      	add	r3, r6
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	2000      	movs	r0, #0
 800b73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b740:	462a      	mov	r2, r5
 800b742:	f000 fdae 	bl	800c2a2 <_realloc_r>
 800b746:	4606      	mov	r6, r0
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1e0      	bne.n	800b70e <__ssputs_r+0x5a>
 800b74c:	6921      	ldr	r1, [r4, #16]
 800b74e:	4650      	mov	r0, sl
 800b750:	f7fe fb6c 	bl	8009e2c <_free_r>
 800b754:	230c      	movs	r3, #12
 800b756:	f8ca 3000 	str.w	r3, [sl]
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	e7e9      	b.n	800b73c <__ssputs_r+0x88>

0800b768 <_svfiprintf_r>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	4698      	mov	r8, r3
 800b76e:	898b      	ldrh	r3, [r1, #12]
 800b770:	061b      	lsls	r3, r3, #24
 800b772:	b09d      	sub	sp, #116	; 0x74
 800b774:	4607      	mov	r7, r0
 800b776:	460d      	mov	r5, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	d50e      	bpl.n	800b79a <_svfiprintf_r+0x32>
 800b77c:	690b      	ldr	r3, [r1, #16]
 800b77e:	b963      	cbnz	r3, 800b79a <_svfiprintf_r+0x32>
 800b780:	2140      	movs	r1, #64	; 0x40
 800b782:	f7fe fbc7 	bl	8009f14 <_malloc_r>
 800b786:	6028      	str	r0, [r5, #0]
 800b788:	6128      	str	r0, [r5, #16]
 800b78a:	b920      	cbnz	r0, 800b796 <_svfiprintf_r+0x2e>
 800b78c:	230c      	movs	r3, #12
 800b78e:	603b      	str	r3, [r7, #0]
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	e0d0      	b.n	800b938 <_svfiprintf_r+0x1d0>
 800b796:	2340      	movs	r3, #64	; 0x40
 800b798:	616b      	str	r3, [r5, #20]
 800b79a:	2300      	movs	r3, #0
 800b79c:	9309      	str	r3, [sp, #36]	; 0x24
 800b79e:	2320      	movs	r3, #32
 800b7a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7a8:	2330      	movs	r3, #48	; 0x30
 800b7aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b950 <_svfiprintf_r+0x1e8>
 800b7ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b2:	f04f 0901 	mov.w	r9, #1
 800b7b6:	4623      	mov	r3, r4
 800b7b8:	469a      	mov	sl, r3
 800b7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7be:	b10a      	cbz	r2, 800b7c4 <_svfiprintf_r+0x5c>
 800b7c0:	2a25      	cmp	r2, #37	; 0x25
 800b7c2:	d1f9      	bne.n	800b7b8 <_svfiprintf_r+0x50>
 800b7c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7c8:	d00b      	beq.n	800b7e2 <_svfiprintf_r+0x7a>
 800b7ca:	465b      	mov	r3, fp
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4638      	mov	r0, r7
 800b7d2:	f7ff ff6f 	bl	800b6b4 <__ssputs_r>
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	f000 80a9 	beq.w	800b92e <_svfiprintf_r+0x1c6>
 800b7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7de:	445a      	add	r2, fp
 800b7e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 80a1 	beq.w	800b92e <_svfiprintf_r+0x1c6>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f6:	f10a 0a01 	add.w	sl, sl, #1
 800b7fa:	9304      	str	r3, [sp, #16]
 800b7fc:	9307      	str	r3, [sp, #28]
 800b7fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b802:	931a      	str	r3, [sp, #104]	; 0x68
 800b804:	4654      	mov	r4, sl
 800b806:	2205      	movs	r2, #5
 800b808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80c:	4850      	ldr	r0, [pc, #320]	; (800b950 <_svfiprintf_r+0x1e8>)
 800b80e:	f7f4 fcef 	bl	80001f0 <memchr>
 800b812:	9a04      	ldr	r2, [sp, #16]
 800b814:	b9d8      	cbnz	r0, 800b84e <_svfiprintf_r+0xe6>
 800b816:	06d0      	lsls	r0, r2, #27
 800b818:	bf44      	itt	mi
 800b81a:	2320      	movmi	r3, #32
 800b81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b820:	0711      	lsls	r1, r2, #28
 800b822:	bf44      	itt	mi
 800b824:	232b      	movmi	r3, #43	; 0x2b
 800b826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b82a:	f89a 3000 	ldrb.w	r3, [sl]
 800b82e:	2b2a      	cmp	r3, #42	; 0x2a
 800b830:	d015      	beq.n	800b85e <_svfiprintf_r+0xf6>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	4654      	mov	r4, sl
 800b836:	2000      	movs	r0, #0
 800b838:	f04f 0c0a 	mov.w	ip, #10
 800b83c:	4621      	mov	r1, r4
 800b83e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b842:	3b30      	subs	r3, #48	; 0x30
 800b844:	2b09      	cmp	r3, #9
 800b846:	d94d      	bls.n	800b8e4 <_svfiprintf_r+0x17c>
 800b848:	b1b0      	cbz	r0, 800b878 <_svfiprintf_r+0x110>
 800b84a:	9207      	str	r2, [sp, #28]
 800b84c:	e014      	b.n	800b878 <_svfiprintf_r+0x110>
 800b84e:	eba0 0308 	sub.w	r3, r0, r8
 800b852:	fa09 f303 	lsl.w	r3, r9, r3
 800b856:	4313      	orrs	r3, r2
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	46a2      	mov	sl, r4
 800b85c:	e7d2      	b.n	800b804 <_svfiprintf_r+0x9c>
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	1d19      	adds	r1, r3, #4
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	9103      	str	r1, [sp, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	bfbb      	ittet	lt
 800b86a:	425b      	neglt	r3, r3
 800b86c:	f042 0202 	orrlt.w	r2, r2, #2
 800b870:	9307      	strge	r3, [sp, #28]
 800b872:	9307      	strlt	r3, [sp, #28]
 800b874:	bfb8      	it	lt
 800b876:	9204      	strlt	r2, [sp, #16]
 800b878:	7823      	ldrb	r3, [r4, #0]
 800b87a:	2b2e      	cmp	r3, #46	; 0x2e
 800b87c:	d10c      	bne.n	800b898 <_svfiprintf_r+0x130>
 800b87e:	7863      	ldrb	r3, [r4, #1]
 800b880:	2b2a      	cmp	r3, #42	; 0x2a
 800b882:	d134      	bne.n	800b8ee <_svfiprintf_r+0x186>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	9203      	str	r2, [sp, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfb8      	it	lt
 800b890:	f04f 33ff 	movlt.w	r3, #4294967295
 800b894:	3402      	adds	r4, #2
 800b896:	9305      	str	r3, [sp, #20]
 800b898:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b960 <_svfiprintf_r+0x1f8>
 800b89c:	7821      	ldrb	r1, [r4, #0]
 800b89e:	2203      	movs	r2, #3
 800b8a0:	4650      	mov	r0, sl
 800b8a2:	f7f4 fca5 	bl	80001f0 <memchr>
 800b8a6:	b138      	cbz	r0, 800b8b8 <_svfiprintf_r+0x150>
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	eba0 000a 	sub.w	r0, r0, sl
 800b8ae:	2240      	movs	r2, #64	; 0x40
 800b8b0:	4082      	lsls	r2, r0
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	3401      	adds	r4, #1
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	4825      	ldr	r0, [pc, #148]	; (800b954 <_svfiprintf_r+0x1ec>)
 800b8be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8c2:	2206      	movs	r2, #6
 800b8c4:	f7f4 fc94 	bl	80001f0 <memchr>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d038      	beq.n	800b93e <_svfiprintf_r+0x1d6>
 800b8cc:	4b22      	ldr	r3, [pc, #136]	; (800b958 <_svfiprintf_r+0x1f0>)
 800b8ce:	bb1b      	cbnz	r3, 800b918 <_svfiprintf_r+0x1b0>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	3307      	adds	r3, #7
 800b8d4:	f023 0307 	bic.w	r3, r3, #7
 800b8d8:	3308      	adds	r3, #8
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8de:	4433      	add	r3, r6
 800b8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e2:	e768      	b.n	800b7b6 <_svfiprintf_r+0x4e>
 800b8e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	e7a6      	b.n	800b83c <_svfiprintf_r+0xd4>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f04f 0c0a 	mov.w	ip, #10
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b900:	3a30      	subs	r2, #48	; 0x30
 800b902:	2a09      	cmp	r2, #9
 800b904:	d903      	bls.n	800b90e <_svfiprintf_r+0x1a6>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0c6      	beq.n	800b898 <_svfiprintf_r+0x130>
 800b90a:	9105      	str	r1, [sp, #20]
 800b90c:	e7c4      	b.n	800b898 <_svfiprintf_r+0x130>
 800b90e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b912:	4604      	mov	r4, r0
 800b914:	2301      	movs	r3, #1
 800b916:	e7f0      	b.n	800b8fa <_svfiprintf_r+0x192>
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <_svfiprintf_r+0x1f4>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4638      	mov	r0, r7
 800b924:	f7fc fc84 	bl	8008230 <_printf_float>
 800b928:	1c42      	adds	r2, r0, #1
 800b92a:	4606      	mov	r6, r0
 800b92c:	d1d6      	bne.n	800b8dc <_svfiprintf_r+0x174>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	065b      	lsls	r3, r3, #25
 800b932:	f53f af2d 	bmi.w	800b790 <_svfiprintf_r+0x28>
 800b936:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b938:	b01d      	add	sp, #116	; 0x74
 800b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93e:	ab03      	add	r3, sp, #12
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	462a      	mov	r2, r5
 800b944:	4b05      	ldr	r3, [pc, #20]	; (800b95c <_svfiprintf_r+0x1f4>)
 800b946:	a904      	add	r1, sp, #16
 800b948:	4638      	mov	r0, r7
 800b94a:	f7fc ff15 	bl	8008778 <_printf_i>
 800b94e:	e7eb      	b.n	800b928 <_svfiprintf_r+0x1c0>
 800b950:	0800f8f9 	.word	0x0800f8f9
 800b954:	0800f903 	.word	0x0800f903
 800b958:	08008231 	.word	0x08008231
 800b95c:	0800b6b5 	.word	0x0800b6b5
 800b960:	0800f8ff 	.word	0x0800f8ff

0800b964 <__sflush_r>:
 800b964:	898a      	ldrh	r2, [r1, #12]
 800b966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	4605      	mov	r5, r0
 800b96c:	0710      	lsls	r0, r2, #28
 800b96e:	460c      	mov	r4, r1
 800b970:	d458      	bmi.n	800ba24 <__sflush_r+0xc0>
 800b972:	684b      	ldr	r3, [r1, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	dc05      	bgt.n	800b984 <__sflush_r+0x20>
 800b978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	dc02      	bgt.n	800b984 <__sflush_r+0x20>
 800b97e:	2000      	movs	r0, #0
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b986:	2e00      	cmp	r6, #0
 800b988:	d0f9      	beq.n	800b97e <__sflush_r+0x1a>
 800b98a:	2300      	movs	r3, #0
 800b98c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b990:	682f      	ldr	r7, [r5, #0]
 800b992:	6a21      	ldr	r1, [r4, #32]
 800b994:	602b      	str	r3, [r5, #0]
 800b996:	d032      	beq.n	800b9fe <__sflush_r+0x9a>
 800b998:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	075a      	lsls	r2, r3, #29
 800b99e:	d505      	bpl.n	800b9ac <__sflush_r+0x48>
 800b9a0:	6863      	ldr	r3, [r4, #4]
 800b9a2:	1ac0      	subs	r0, r0, r3
 800b9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9a6:	b10b      	cbz	r3, 800b9ac <__sflush_r+0x48>
 800b9a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9aa:	1ac0      	subs	r0, r0, r3
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9b2:	6a21      	ldr	r1, [r4, #32]
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b0      	blx	r6
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	d106      	bne.n	800b9cc <__sflush_r+0x68>
 800b9be:	6829      	ldr	r1, [r5, #0]
 800b9c0:	291d      	cmp	r1, #29
 800b9c2:	d82b      	bhi.n	800ba1c <__sflush_r+0xb8>
 800b9c4:	4a29      	ldr	r2, [pc, #164]	; (800ba6c <__sflush_r+0x108>)
 800b9c6:	410a      	asrs	r2, r1
 800b9c8:	07d6      	lsls	r6, r2, #31
 800b9ca:	d427      	bmi.n	800ba1c <__sflush_r+0xb8>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	6062      	str	r2, [r4, #4]
 800b9d0:	04d9      	lsls	r1, r3, #19
 800b9d2:	6922      	ldr	r2, [r4, #16]
 800b9d4:	6022      	str	r2, [r4, #0]
 800b9d6:	d504      	bpl.n	800b9e2 <__sflush_r+0x7e>
 800b9d8:	1c42      	adds	r2, r0, #1
 800b9da:	d101      	bne.n	800b9e0 <__sflush_r+0x7c>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b903      	cbnz	r3, 800b9e2 <__sflush_r+0x7e>
 800b9e0:	6560      	str	r0, [r4, #84]	; 0x54
 800b9e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e4:	602f      	str	r7, [r5, #0]
 800b9e6:	2900      	cmp	r1, #0
 800b9e8:	d0c9      	beq.n	800b97e <__sflush_r+0x1a>
 800b9ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	d002      	beq.n	800b9f8 <__sflush_r+0x94>
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f7fe fa1a 	bl	8009e2c <_free_r>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	6360      	str	r0, [r4, #52]	; 0x34
 800b9fc:	e7c0      	b.n	800b980 <__sflush_r+0x1c>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4628      	mov	r0, r5
 800ba02:	47b0      	blx	r6
 800ba04:	1c41      	adds	r1, r0, #1
 800ba06:	d1c8      	bne.n	800b99a <__sflush_r+0x36>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0c5      	beq.n	800b99a <__sflush_r+0x36>
 800ba0e:	2b1d      	cmp	r3, #29
 800ba10:	d001      	beq.n	800ba16 <__sflush_r+0xb2>
 800ba12:	2b16      	cmp	r3, #22
 800ba14:	d101      	bne.n	800ba1a <__sflush_r+0xb6>
 800ba16:	602f      	str	r7, [r5, #0]
 800ba18:	e7b1      	b.n	800b97e <__sflush_r+0x1a>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	e7ad      	b.n	800b980 <__sflush_r+0x1c>
 800ba24:	690f      	ldr	r7, [r1, #16]
 800ba26:	2f00      	cmp	r7, #0
 800ba28:	d0a9      	beq.n	800b97e <__sflush_r+0x1a>
 800ba2a:	0793      	lsls	r3, r2, #30
 800ba2c:	680e      	ldr	r6, [r1, #0]
 800ba2e:	bf08      	it	eq
 800ba30:	694b      	ldreq	r3, [r1, #20]
 800ba32:	600f      	str	r7, [r1, #0]
 800ba34:	bf18      	it	ne
 800ba36:	2300      	movne	r3, #0
 800ba38:	eba6 0807 	sub.w	r8, r6, r7
 800ba3c:	608b      	str	r3, [r1, #8]
 800ba3e:	f1b8 0f00 	cmp.w	r8, #0
 800ba42:	dd9c      	ble.n	800b97e <__sflush_r+0x1a>
 800ba44:	6a21      	ldr	r1, [r4, #32]
 800ba46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba48:	4643      	mov	r3, r8
 800ba4a:	463a      	mov	r2, r7
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b0      	blx	r6
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dc06      	bgt.n	800ba62 <__sflush_r+0xfe>
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	e78e      	b.n	800b980 <__sflush_r+0x1c>
 800ba62:	4407      	add	r7, r0
 800ba64:	eba8 0800 	sub.w	r8, r8, r0
 800ba68:	e7e9      	b.n	800ba3e <__sflush_r+0xda>
 800ba6a:	bf00      	nop
 800ba6c:	dfbffffe 	.word	0xdfbffffe

0800ba70 <_fflush_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	690b      	ldr	r3, [r1, #16]
 800ba74:	4605      	mov	r5, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	b913      	cbnz	r3, 800ba80 <_fflush_r+0x10>
 800ba7a:	2500      	movs	r5, #0
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	b118      	cbz	r0, 800ba8a <_fflush_r+0x1a>
 800ba82:	6a03      	ldr	r3, [r0, #32]
 800ba84:	b90b      	cbnz	r3, 800ba8a <_fflush_r+0x1a>
 800ba86:	f7fd fa35 	bl	8008ef4 <__sinit>
 800ba8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0f3      	beq.n	800ba7a <_fflush_r+0xa>
 800ba92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba94:	07d0      	lsls	r0, r2, #31
 800ba96:	d404      	bmi.n	800baa2 <_fflush_r+0x32>
 800ba98:	0599      	lsls	r1, r3, #22
 800ba9a:	d402      	bmi.n	800baa2 <_fflush_r+0x32>
 800ba9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba9e:	f7fd fb40 	bl	8009122 <__retarget_lock_acquire_recursive>
 800baa2:	4628      	mov	r0, r5
 800baa4:	4621      	mov	r1, r4
 800baa6:	f7ff ff5d 	bl	800b964 <__sflush_r>
 800baaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baac:	07da      	lsls	r2, r3, #31
 800baae:	4605      	mov	r5, r0
 800bab0:	d4e4      	bmi.n	800ba7c <_fflush_r+0xc>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	059b      	lsls	r3, r3, #22
 800bab6:	d4e1      	bmi.n	800ba7c <_fflush_r+0xc>
 800bab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baba:	f7fd fb33 	bl	8009124 <__retarget_lock_release_recursive>
 800babe:	e7dd      	b.n	800ba7c <_fflush_r+0xc>

0800bac0 <memmove>:
 800bac0:	4288      	cmp	r0, r1
 800bac2:	b510      	push	{r4, lr}
 800bac4:	eb01 0402 	add.w	r4, r1, r2
 800bac8:	d902      	bls.n	800bad0 <memmove+0x10>
 800baca:	4284      	cmp	r4, r0
 800bacc:	4623      	mov	r3, r4
 800bace:	d807      	bhi.n	800bae0 <memmove+0x20>
 800bad0:	1e43      	subs	r3, r0, #1
 800bad2:	42a1      	cmp	r1, r4
 800bad4:	d008      	beq.n	800bae8 <memmove+0x28>
 800bad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bade:	e7f8      	b.n	800bad2 <memmove+0x12>
 800bae0:	4402      	add	r2, r0
 800bae2:	4601      	mov	r1, r0
 800bae4:	428a      	cmp	r2, r1
 800bae6:	d100      	bne.n	800baea <memmove+0x2a>
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baf2:	e7f7      	b.n	800bae4 <memmove+0x24>

0800baf4 <strncmp>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	b16a      	cbz	r2, 800bb14 <strncmp+0x20>
 800baf8:	3901      	subs	r1, #1
 800bafa:	1884      	adds	r4, r0, r2
 800bafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d103      	bne.n	800bb10 <strncmp+0x1c>
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d001      	beq.n	800bb10 <strncmp+0x1c>
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	d1f5      	bne.n	800bafc <strncmp+0x8>
 800bb10:	1ad0      	subs	r0, r2, r3
 800bb12:	bd10      	pop	{r4, pc}
 800bb14:	4610      	mov	r0, r2
 800bb16:	e7fc      	b.n	800bb12 <strncmp+0x1e>

0800bb18 <_sbrk_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4d06      	ldr	r5, [pc, #24]	; (800bb34 <_sbrk_r+0x1c>)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4604      	mov	r4, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f6 fdbe 	bl	80026a4 <_sbrk>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_sbrk_r+0x1a>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_sbrk_r+0x1a>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000a00 	.word	0x20000a00

0800bb38 <memcpy>:
 800bb38:	440a      	add	r2, r1
 800bb3a:	4291      	cmp	r1, r2
 800bb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb40:	d100      	bne.n	800bb44 <memcpy+0xc>
 800bb42:	4770      	bx	lr
 800bb44:	b510      	push	{r4, lr}
 800bb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	d1f9      	bne.n	800bb46 <memcpy+0xe>
 800bb52:	bd10      	pop	{r4, pc}
 800bb54:	0000      	movs	r0, r0
	...

0800bb58 <nan>:
 800bb58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb60 <nan+0x8>
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	00000000 	.word	0x00000000
 800bb64:	7ff80000 	.word	0x7ff80000

0800bb68 <__assert_func>:
 800bb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb6a:	4614      	mov	r4, r2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <__assert_func+0x2c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	68d8      	ldr	r0, [r3, #12]
 800bb76:	b14c      	cbz	r4, 800bb8c <__assert_func+0x24>
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <__assert_func+0x30>)
 800bb7a:	9100      	str	r1, [sp, #0]
 800bb7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb80:	4906      	ldr	r1, [pc, #24]	; (800bb9c <__assert_func+0x34>)
 800bb82:	462b      	mov	r3, r5
 800bb84:	f000 fbca 	bl	800c31c <fiprintf>
 800bb88:	f000 fbda 	bl	800c340 <abort>
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <__assert_func+0x38>)
 800bb8e:	461c      	mov	r4, r3
 800bb90:	e7f3      	b.n	800bb7a <__assert_func+0x12>
 800bb92:	bf00      	nop
 800bb94:	200000b8 	.word	0x200000b8
 800bb98:	0800f912 	.word	0x0800f912
 800bb9c:	0800f91f 	.word	0x0800f91f
 800bba0:	0800f94d 	.word	0x0800f94d

0800bba4 <_calloc_r>:
 800bba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bba6:	fba1 2402 	umull	r2, r4, r1, r2
 800bbaa:	b94c      	cbnz	r4, 800bbc0 <_calloc_r+0x1c>
 800bbac:	4611      	mov	r1, r2
 800bbae:	9201      	str	r2, [sp, #4]
 800bbb0:	f7fe f9b0 	bl	8009f14 <_malloc_r>
 800bbb4:	9a01      	ldr	r2, [sp, #4]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	b930      	cbnz	r0, 800bbc8 <_calloc_r+0x24>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	b003      	add	sp, #12
 800bbbe:	bd30      	pop	{r4, r5, pc}
 800bbc0:	220c      	movs	r2, #12
 800bbc2:	6002      	str	r2, [r0, #0]
 800bbc4:	2500      	movs	r5, #0
 800bbc6:	e7f8      	b.n	800bbba <_calloc_r+0x16>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	f7fd fa2c 	bl	8009026 <memset>
 800bbce:	e7f4      	b.n	800bbba <_calloc_r+0x16>

0800bbd0 <rshift>:
 800bbd0:	6903      	ldr	r3, [r0, #16]
 800bbd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbde:	f100 0414 	add.w	r4, r0, #20
 800bbe2:	dd45      	ble.n	800bc70 <rshift+0xa0>
 800bbe4:	f011 011f 	ands.w	r1, r1, #31
 800bbe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbf0:	d10c      	bne.n	800bc0c <rshift+0x3c>
 800bbf2:	f100 0710 	add.w	r7, r0, #16
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	42b1      	cmp	r1, r6
 800bbfa:	d334      	bcc.n	800bc66 <rshift+0x96>
 800bbfc:	1a9b      	subs	r3, r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	1eea      	subs	r2, r5, #3
 800bc02:	4296      	cmp	r6, r2
 800bc04:	bf38      	it	cc
 800bc06:	2300      	movcc	r3, #0
 800bc08:	4423      	add	r3, r4
 800bc0a:	e015      	b.n	800bc38 <rshift+0x68>
 800bc0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc10:	f1c1 0820 	rsb	r8, r1, #32
 800bc14:	40cf      	lsrs	r7, r1
 800bc16:	f105 0e04 	add.w	lr, r5, #4
 800bc1a:	46a1      	mov	r9, r4
 800bc1c:	4576      	cmp	r6, lr
 800bc1e:	46f4      	mov	ip, lr
 800bc20:	d815      	bhi.n	800bc4e <rshift+0x7e>
 800bc22:	1a9a      	subs	r2, r3, r2
 800bc24:	0092      	lsls	r2, r2, #2
 800bc26:	3a04      	subs	r2, #4
 800bc28:	3501      	adds	r5, #1
 800bc2a:	42ae      	cmp	r6, r5
 800bc2c:	bf38      	it	cc
 800bc2e:	2200      	movcc	r2, #0
 800bc30:	18a3      	adds	r3, r4, r2
 800bc32:	50a7      	str	r7, [r4, r2]
 800bc34:	b107      	cbz	r7, 800bc38 <rshift+0x68>
 800bc36:	3304      	adds	r3, #4
 800bc38:	1b1a      	subs	r2, r3, r4
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc40:	bf08      	it	eq
 800bc42:	2300      	moveq	r3, #0
 800bc44:	6102      	str	r2, [r0, #16]
 800bc46:	bf08      	it	eq
 800bc48:	6143      	streq	r3, [r0, #20]
 800bc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	f8dc c000 	ldr.w	ip, [ip]
 800bc52:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc56:	ea4c 0707 	orr.w	r7, ip, r7
 800bc5a:	f849 7b04 	str.w	r7, [r9], #4
 800bc5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc62:	40cf      	lsrs	r7, r1
 800bc64:	e7da      	b.n	800bc1c <rshift+0x4c>
 800bc66:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc6e:	e7c3      	b.n	800bbf8 <rshift+0x28>
 800bc70:	4623      	mov	r3, r4
 800bc72:	e7e1      	b.n	800bc38 <rshift+0x68>

0800bc74 <__hexdig_fun>:
 800bc74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc78:	2b09      	cmp	r3, #9
 800bc7a:	d802      	bhi.n	800bc82 <__hexdig_fun+0xe>
 800bc7c:	3820      	subs	r0, #32
 800bc7e:	b2c0      	uxtb	r0, r0
 800bc80:	4770      	bx	lr
 800bc82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc86:	2b05      	cmp	r3, #5
 800bc88:	d801      	bhi.n	800bc8e <__hexdig_fun+0x1a>
 800bc8a:	3847      	subs	r0, #71	; 0x47
 800bc8c:	e7f7      	b.n	800bc7e <__hexdig_fun+0xa>
 800bc8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d801      	bhi.n	800bc9a <__hexdig_fun+0x26>
 800bc96:	3827      	subs	r0, #39	; 0x27
 800bc98:	e7f1      	b.n	800bc7e <__hexdig_fun+0xa>
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	4770      	bx	lr
	...

0800bca0 <__gethex>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4617      	mov	r7, r2
 800bca6:	680a      	ldr	r2, [r1, #0]
 800bca8:	b085      	sub	sp, #20
 800bcaa:	f102 0b02 	add.w	fp, r2, #2
 800bcae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bcb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bcb6:	4681      	mov	r9, r0
 800bcb8:	468a      	mov	sl, r1
 800bcba:	9302      	str	r3, [sp, #8]
 800bcbc:	32fe      	adds	r2, #254	; 0xfe
 800bcbe:	eb02 030b 	add.w	r3, r2, fp
 800bcc2:	46d8      	mov	r8, fp
 800bcc4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	2830      	cmp	r0, #48	; 0x30
 800bccc:	d0f7      	beq.n	800bcbe <__gethex+0x1e>
 800bcce:	f7ff ffd1 	bl	800bc74 <__hexdig_fun>
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d138      	bne.n	800bd4a <__gethex+0xaa>
 800bcd8:	49a7      	ldr	r1, [pc, #668]	; (800bf78 <__gethex+0x2d8>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4640      	mov	r0, r8
 800bcde:	f7ff ff09 	bl	800baf4 <strncmp>
 800bce2:	4606      	mov	r6, r0
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d169      	bne.n	800bdbc <__gethex+0x11c>
 800bce8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bcec:	465d      	mov	r5, fp
 800bcee:	f7ff ffc1 	bl	800bc74 <__hexdig_fun>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d064      	beq.n	800bdc0 <__gethex+0x120>
 800bcf6:	465a      	mov	r2, fp
 800bcf8:	7810      	ldrb	r0, [r2, #0]
 800bcfa:	2830      	cmp	r0, #48	; 0x30
 800bcfc:	4690      	mov	r8, r2
 800bcfe:	f102 0201 	add.w	r2, r2, #1
 800bd02:	d0f9      	beq.n	800bcf8 <__gethex+0x58>
 800bd04:	f7ff ffb6 	bl	800bc74 <__hexdig_fun>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	fab0 f480 	clz	r4, r0
 800bd0e:	0964      	lsrs	r4, r4, #5
 800bd10:	465e      	mov	r6, fp
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	4642      	mov	r2, r8
 800bd16:	4615      	mov	r5, r2
 800bd18:	3201      	adds	r2, #1
 800bd1a:	7828      	ldrb	r0, [r5, #0]
 800bd1c:	f7ff ffaa 	bl	800bc74 <__hexdig_fun>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1f8      	bne.n	800bd16 <__gethex+0x76>
 800bd24:	4994      	ldr	r1, [pc, #592]	; (800bf78 <__gethex+0x2d8>)
 800bd26:	2201      	movs	r2, #1
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f7ff fee3 	bl	800baf4 <strncmp>
 800bd2e:	b978      	cbnz	r0, 800bd50 <__gethex+0xb0>
 800bd30:	b946      	cbnz	r6, 800bd44 <__gethex+0xa4>
 800bd32:	1c6e      	adds	r6, r5, #1
 800bd34:	4632      	mov	r2, r6
 800bd36:	4615      	mov	r5, r2
 800bd38:	3201      	adds	r2, #1
 800bd3a:	7828      	ldrb	r0, [r5, #0]
 800bd3c:	f7ff ff9a 	bl	800bc74 <__hexdig_fun>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d1f8      	bne.n	800bd36 <__gethex+0x96>
 800bd44:	1b73      	subs	r3, r6, r5
 800bd46:	009e      	lsls	r6, r3, #2
 800bd48:	e004      	b.n	800bd54 <__gethex+0xb4>
 800bd4a:	2400      	movs	r4, #0
 800bd4c:	4626      	mov	r6, r4
 800bd4e:	e7e1      	b.n	800bd14 <__gethex+0x74>
 800bd50:	2e00      	cmp	r6, #0
 800bd52:	d1f7      	bne.n	800bd44 <__gethex+0xa4>
 800bd54:	782b      	ldrb	r3, [r5, #0]
 800bd56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd5a:	2b50      	cmp	r3, #80	; 0x50
 800bd5c:	d13d      	bne.n	800bdda <__gethex+0x13a>
 800bd5e:	786b      	ldrb	r3, [r5, #1]
 800bd60:	2b2b      	cmp	r3, #43	; 0x2b
 800bd62:	d02f      	beq.n	800bdc4 <__gethex+0x124>
 800bd64:	2b2d      	cmp	r3, #45	; 0x2d
 800bd66:	d031      	beq.n	800bdcc <__gethex+0x12c>
 800bd68:	1c69      	adds	r1, r5, #1
 800bd6a:	f04f 0b00 	mov.w	fp, #0
 800bd6e:	7808      	ldrb	r0, [r1, #0]
 800bd70:	f7ff ff80 	bl	800bc74 <__hexdig_fun>
 800bd74:	1e42      	subs	r2, r0, #1
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	2a18      	cmp	r2, #24
 800bd7a:	d82e      	bhi.n	800bdda <__gethex+0x13a>
 800bd7c:	f1a0 0210 	sub.w	r2, r0, #16
 800bd80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd84:	f7ff ff76 	bl	800bc74 <__hexdig_fun>
 800bd88:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd8c:	fa5f fc8c 	uxtb.w	ip, ip
 800bd90:	f1bc 0f18 	cmp.w	ip, #24
 800bd94:	d91d      	bls.n	800bdd2 <__gethex+0x132>
 800bd96:	f1bb 0f00 	cmp.w	fp, #0
 800bd9a:	d000      	beq.n	800bd9e <__gethex+0xfe>
 800bd9c:	4252      	negs	r2, r2
 800bd9e:	4416      	add	r6, r2
 800bda0:	f8ca 1000 	str.w	r1, [sl]
 800bda4:	b1dc      	cbz	r4, 800bdde <__gethex+0x13e>
 800bda6:	9b01      	ldr	r3, [sp, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf14      	ite	ne
 800bdac:	f04f 0800 	movne.w	r8, #0
 800bdb0:	f04f 0806 	moveq.w	r8, #6
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	b005      	add	sp, #20
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	4645      	mov	r5, r8
 800bdbe:	4626      	mov	r6, r4
 800bdc0:	2401      	movs	r4, #1
 800bdc2:	e7c7      	b.n	800bd54 <__gethex+0xb4>
 800bdc4:	f04f 0b00 	mov.w	fp, #0
 800bdc8:	1ca9      	adds	r1, r5, #2
 800bdca:	e7d0      	b.n	800bd6e <__gethex+0xce>
 800bdcc:	f04f 0b01 	mov.w	fp, #1
 800bdd0:	e7fa      	b.n	800bdc8 <__gethex+0x128>
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	fb03 0002 	mla	r0, r3, r2, r0
 800bdd8:	e7d0      	b.n	800bd7c <__gethex+0xdc>
 800bdda:	4629      	mov	r1, r5
 800bddc:	e7e0      	b.n	800bda0 <__gethex+0x100>
 800bdde:	eba5 0308 	sub.w	r3, r5, r8
 800bde2:	3b01      	subs	r3, #1
 800bde4:	4621      	mov	r1, r4
 800bde6:	2b07      	cmp	r3, #7
 800bde8:	dc0a      	bgt.n	800be00 <__gethex+0x160>
 800bdea:	4648      	mov	r0, r9
 800bdec:	f7fe f91e 	bl	800a02c <_Balloc>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	b940      	cbnz	r0, 800be06 <__gethex+0x166>
 800bdf4:	4b61      	ldr	r3, [pc, #388]	; (800bf7c <__gethex+0x2dc>)
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	21e4      	movs	r1, #228	; 0xe4
 800bdfa:	4861      	ldr	r0, [pc, #388]	; (800bf80 <__gethex+0x2e0>)
 800bdfc:	f7ff feb4 	bl	800bb68 <__assert_func>
 800be00:	3101      	adds	r1, #1
 800be02:	105b      	asrs	r3, r3, #1
 800be04:	e7ef      	b.n	800bde6 <__gethex+0x146>
 800be06:	f100 0a14 	add.w	sl, r0, #20
 800be0a:	2300      	movs	r3, #0
 800be0c:	495a      	ldr	r1, [pc, #360]	; (800bf78 <__gethex+0x2d8>)
 800be0e:	f8cd a004 	str.w	sl, [sp, #4]
 800be12:	469b      	mov	fp, r3
 800be14:	45a8      	cmp	r8, r5
 800be16:	d342      	bcc.n	800be9e <__gethex+0x1fe>
 800be18:	9801      	ldr	r0, [sp, #4]
 800be1a:	f840 bb04 	str.w	fp, [r0], #4
 800be1e:	eba0 000a 	sub.w	r0, r0, sl
 800be22:	1080      	asrs	r0, r0, #2
 800be24:	6120      	str	r0, [r4, #16]
 800be26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800be2a:	4658      	mov	r0, fp
 800be2c:	f7fe f9f0 	bl	800a210 <__hi0bits>
 800be30:	683d      	ldr	r5, [r7, #0]
 800be32:	eba8 0000 	sub.w	r0, r8, r0
 800be36:	42a8      	cmp	r0, r5
 800be38:	dd59      	ble.n	800beee <__gethex+0x24e>
 800be3a:	eba0 0805 	sub.w	r8, r0, r5
 800be3e:	4641      	mov	r1, r8
 800be40:	4620      	mov	r0, r4
 800be42:	f7fe fd7f 	bl	800a944 <__any_on>
 800be46:	4683      	mov	fp, r0
 800be48:	b1b8      	cbz	r0, 800be7a <__gethex+0x1da>
 800be4a:	f108 33ff 	add.w	r3, r8, #4294967295
 800be4e:	1159      	asrs	r1, r3, #5
 800be50:	f003 021f 	and.w	r2, r3, #31
 800be54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be58:	f04f 0b01 	mov.w	fp, #1
 800be5c:	fa0b f202 	lsl.w	r2, fp, r2
 800be60:	420a      	tst	r2, r1
 800be62:	d00a      	beq.n	800be7a <__gethex+0x1da>
 800be64:	455b      	cmp	r3, fp
 800be66:	dd06      	ble.n	800be76 <__gethex+0x1d6>
 800be68:	f1a8 0102 	sub.w	r1, r8, #2
 800be6c:	4620      	mov	r0, r4
 800be6e:	f7fe fd69 	bl	800a944 <__any_on>
 800be72:	2800      	cmp	r0, #0
 800be74:	d138      	bne.n	800bee8 <__gethex+0x248>
 800be76:	f04f 0b02 	mov.w	fp, #2
 800be7a:	4641      	mov	r1, r8
 800be7c:	4620      	mov	r0, r4
 800be7e:	f7ff fea7 	bl	800bbd0 <rshift>
 800be82:	4446      	add	r6, r8
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	42b3      	cmp	r3, r6
 800be88:	da41      	bge.n	800bf0e <__gethex+0x26e>
 800be8a:	4621      	mov	r1, r4
 800be8c:	4648      	mov	r0, r9
 800be8e:	f7fe f90d 	bl	800a0ac <_Bfree>
 800be92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be94:	2300      	movs	r3, #0
 800be96:	6013      	str	r3, [r2, #0]
 800be98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800be9c:	e78a      	b.n	800bdb4 <__gethex+0x114>
 800be9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bea2:	2a2e      	cmp	r2, #46	; 0x2e
 800bea4:	d014      	beq.n	800bed0 <__gethex+0x230>
 800bea6:	2b20      	cmp	r3, #32
 800bea8:	d106      	bne.n	800beb8 <__gethex+0x218>
 800beaa:	9b01      	ldr	r3, [sp, #4]
 800beac:	f843 bb04 	str.w	fp, [r3], #4
 800beb0:	f04f 0b00 	mov.w	fp, #0
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	465b      	mov	r3, fp
 800beb8:	7828      	ldrb	r0, [r5, #0]
 800beba:	9303      	str	r3, [sp, #12]
 800bebc:	f7ff feda 	bl	800bc74 <__hexdig_fun>
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	f000 000f 	and.w	r0, r0, #15
 800bec6:	4098      	lsls	r0, r3
 800bec8:	ea4b 0b00 	orr.w	fp, fp, r0
 800becc:	3304      	adds	r3, #4
 800bece:	e7a1      	b.n	800be14 <__gethex+0x174>
 800bed0:	45a8      	cmp	r8, r5
 800bed2:	d8e8      	bhi.n	800bea6 <__gethex+0x206>
 800bed4:	2201      	movs	r2, #1
 800bed6:	4628      	mov	r0, r5
 800bed8:	9303      	str	r3, [sp, #12]
 800beda:	f7ff fe0b 	bl	800baf4 <strncmp>
 800bede:	4926      	ldr	r1, [pc, #152]	; (800bf78 <__gethex+0x2d8>)
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d1df      	bne.n	800bea6 <__gethex+0x206>
 800bee6:	e795      	b.n	800be14 <__gethex+0x174>
 800bee8:	f04f 0b03 	mov.w	fp, #3
 800beec:	e7c5      	b.n	800be7a <__gethex+0x1da>
 800beee:	da0b      	bge.n	800bf08 <__gethex+0x268>
 800bef0:	eba5 0800 	sub.w	r8, r5, r0
 800bef4:	4621      	mov	r1, r4
 800bef6:	4642      	mov	r2, r8
 800bef8:	4648      	mov	r0, r9
 800befa:	f7fe faf1 	bl	800a4e0 <__lshift>
 800befe:	eba6 0608 	sub.w	r6, r6, r8
 800bf02:	4604      	mov	r4, r0
 800bf04:	f100 0a14 	add.w	sl, r0, #20
 800bf08:	f04f 0b00 	mov.w	fp, #0
 800bf0c:	e7ba      	b.n	800be84 <__gethex+0x1e4>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	42b3      	cmp	r3, r6
 800bf12:	dd73      	ble.n	800bffc <__gethex+0x35c>
 800bf14:	1b9e      	subs	r6, r3, r6
 800bf16:	42b5      	cmp	r5, r6
 800bf18:	dc34      	bgt.n	800bf84 <__gethex+0x2e4>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d023      	beq.n	800bf68 <__gethex+0x2c8>
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d025      	beq.n	800bf70 <__gethex+0x2d0>
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d115      	bne.n	800bf54 <__gethex+0x2b4>
 800bf28:	42b5      	cmp	r5, r6
 800bf2a:	d113      	bne.n	800bf54 <__gethex+0x2b4>
 800bf2c:	2d01      	cmp	r5, #1
 800bf2e:	d10b      	bne.n	800bf48 <__gethex+0x2a8>
 800bf30:	9a02      	ldr	r2, [sp, #8]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	2301      	movs	r3, #1
 800bf38:	6123      	str	r3, [r4, #16]
 800bf3a:	f8ca 3000 	str.w	r3, [sl]
 800bf3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf40:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bf44:	601c      	str	r4, [r3, #0]
 800bf46:	e735      	b.n	800bdb4 <__gethex+0x114>
 800bf48:	1e69      	subs	r1, r5, #1
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7fe fcfa 	bl	800a944 <__any_on>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d1ed      	bne.n	800bf30 <__gethex+0x290>
 800bf54:	4621      	mov	r1, r4
 800bf56:	4648      	mov	r0, r9
 800bf58:	f7fe f8a8 	bl	800a0ac <_Bfree>
 800bf5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bf66:	e725      	b.n	800bdb4 <__gethex+0x114>
 800bf68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f2      	bne.n	800bf54 <__gethex+0x2b4>
 800bf6e:	e7df      	b.n	800bf30 <__gethex+0x290>
 800bf70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1dc      	bne.n	800bf30 <__gethex+0x290>
 800bf76:	e7ed      	b.n	800bf54 <__gethex+0x2b4>
 800bf78:	0800f7a4 	.word	0x0800f7a4
 800bf7c:	0800f639 	.word	0x0800f639
 800bf80:	0800f94e 	.word	0x0800f94e
 800bf84:	f106 38ff 	add.w	r8, r6, #4294967295
 800bf88:	f1bb 0f00 	cmp.w	fp, #0
 800bf8c:	d133      	bne.n	800bff6 <__gethex+0x356>
 800bf8e:	f1b8 0f00 	cmp.w	r8, #0
 800bf92:	d004      	beq.n	800bf9e <__gethex+0x2fe>
 800bf94:	4641      	mov	r1, r8
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7fe fcd4 	bl	800a944 <__any_on>
 800bf9c:	4683      	mov	fp, r0
 800bf9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bfa8:	f008 081f 	and.w	r8, r8, #31
 800bfac:	fa03 f308 	lsl.w	r3, r3, r8
 800bfb0:	4213      	tst	r3, r2
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	bf18      	it	ne
 800bfb8:	f04b 0b02 	orrne.w	fp, fp, #2
 800bfbc:	1bad      	subs	r5, r5, r6
 800bfbe:	f7ff fe07 	bl	800bbd0 <rshift>
 800bfc2:	687e      	ldr	r6, [r7, #4]
 800bfc4:	f04f 0802 	mov.w	r8, #2
 800bfc8:	f1bb 0f00 	cmp.w	fp, #0
 800bfcc:	d04a      	beq.n	800c064 <__gethex+0x3c4>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d016      	beq.n	800c002 <__gethex+0x362>
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d018      	beq.n	800c00a <__gethex+0x36a>
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d109      	bne.n	800bff0 <__gethex+0x350>
 800bfdc:	f01b 0f02 	tst.w	fp, #2
 800bfe0:	d006      	beq.n	800bff0 <__gethex+0x350>
 800bfe2:	f8da 3000 	ldr.w	r3, [sl]
 800bfe6:	ea4b 0b03 	orr.w	fp, fp, r3
 800bfea:	f01b 0f01 	tst.w	fp, #1
 800bfee:	d10f      	bne.n	800c010 <__gethex+0x370>
 800bff0:	f048 0810 	orr.w	r8, r8, #16
 800bff4:	e036      	b.n	800c064 <__gethex+0x3c4>
 800bff6:	f04f 0b01 	mov.w	fp, #1
 800bffa:	e7d0      	b.n	800bf9e <__gethex+0x2fe>
 800bffc:	f04f 0801 	mov.w	r8, #1
 800c000:	e7e2      	b.n	800bfc8 <__gethex+0x328>
 800c002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c004:	f1c3 0301 	rsb	r3, r3, #1
 800c008:	930f      	str	r3, [sp, #60]	; 0x3c
 800c00a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0ef      	beq.n	800bff0 <__gethex+0x350>
 800c010:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c014:	f104 0214 	add.w	r2, r4, #20
 800c018:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c022:	2300      	movs	r3, #0
 800c024:	4694      	mov	ip, r2
 800c026:	f852 1b04 	ldr.w	r1, [r2], #4
 800c02a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c02e:	d01e      	beq.n	800c06e <__gethex+0x3ce>
 800c030:	3101      	adds	r1, #1
 800c032:	f8cc 1000 	str.w	r1, [ip]
 800c036:	f1b8 0f02 	cmp.w	r8, #2
 800c03a:	f104 0214 	add.w	r2, r4, #20
 800c03e:	d13d      	bne.n	800c0bc <__gethex+0x41c>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	3b01      	subs	r3, #1
 800c044:	42ab      	cmp	r3, r5
 800c046:	d10b      	bne.n	800c060 <__gethex+0x3c0>
 800c048:	1169      	asrs	r1, r5, #5
 800c04a:	2301      	movs	r3, #1
 800c04c:	f005 051f 	and.w	r5, r5, #31
 800c050:	fa03 f505 	lsl.w	r5, r3, r5
 800c054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c058:	421d      	tst	r5, r3
 800c05a:	bf18      	it	ne
 800c05c:	f04f 0801 	movne.w	r8, #1
 800c060:	f048 0820 	orr.w	r8, r8, #32
 800c064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c066:	601c      	str	r4, [r3, #0]
 800c068:	9b02      	ldr	r3, [sp, #8]
 800c06a:	601e      	str	r6, [r3, #0]
 800c06c:	e6a2      	b.n	800bdb4 <__gethex+0x114>
 800c06e:	4290      	cmp	r0, r2
 800c070:	f842 3c04 	str.w	r3, [r2, #-4]
 800c074:	d8d6      	bhi.n	800c024 <__gethex+0x384>
 800c076:	68a2      	ldr	r2, [r4, #8]
 800c078:	4593      	cmp	fp, r2
 800c07a:	db17      	blt.n	800c0ac <__gethex+0x40c>
 800c07c:	6861      	ldr	r1, [r4, #4]
 800c07e:	4648      	mov	r0, r9
 800c080:	3101      	adds	r1, #1
 800c082:	f7fd ffd3 	bl	800a02c <_Balloc>
 800c086:	4682      	mov	sl, r0
 800c088:	b918      	cbnz	r0, 800c092 <__gethex+0x3f2>
 800c08a:	4b1b      	ldr	r3, [pc, #108]	; (800c0f8 <__gethex+0x458>)
 800c08c:	4602      	mov	r2, r0
 800c08e:	2184      	movs	r1, #132	; 0x84
 800c090:	e6b3      	b.n	800bdfa <__gethex+0x15a>
 800c092:	6922      	ldr	r2, [r4, #16]
 800c094:	3202      	adds	r2, #2
 800c096:	f104 010c 	add.w	r1, r4, #12
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	300c      	adds	r0, #12
 800c09e:	f7ff fd4b 	bl	800bb38 <memcpy>
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	4648      	mov	r0, r9
 800c0a6:	f7fe f801 	bl	800a0ac <_Bfree>
 800c0aa:	4654      	mov	r4, sl
 800c0ac:	6922      	ldr	r2, [r4, #16]
 800c0ae:	1c51      	adds	r1, r2, #1
 800c0b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c0b4:	6121      	str	r1, [r4, #16]
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	6151      	str	r1, [r2, #20]
 800c0ba:	e7bc      	b.n	800c036 <__gethex+0x396>
 800c0bc:	6921      	ldr	r1, [r4, #16]
 800c0be:	4559      	cmp	r1, fp
 800c0c0:	dd0b      	ble.n	800c0da <__gethex+0x43a>
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f7ff fd83 	bl	800bbd0 <rshift>
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	3601      	adds	r6, #1
 800c0ce:	42b3      	cmp	r3, r6
 800c0d0:	f6ff aedb 	blt.w	800be8a <__gethex+0x1ea>
 800c0d4:	f04f 0801 	mov.w	r8, #1
 800c0d8:	e7c2      	b.n	800c060 <__gethex+0x3c0>
 800c0da:	f015 051f 	ands.w	r5, r5, #31
 800c0de:	d0f9      	beq.n	800c0d4 <__gethex+0x434>
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	441a      	add	r2, r3
 800c0e4:	f1c5 0520 	rsb	r5, r5, #32
 800c0e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c0ec:	f7fe f890 	bl	800a210 <__hi0bits>
 800c0f0:	42a8      	cmp	r0, r5
 800c0f2:	dbe6      	blt.n	800c0c2 <__gethex+0x422>
 800c0f4:	e7ee      	b.n	800c0d4 <__gethex+0x434>
 800c0f6:	bf00      	nop
 800c0f8:	0800f639 	.word	0x0800f639

0800c0fc <L_shift>:
 800c0fc:	f1c2 0208 	rsb	r2, r2, #8
 800c100:	0092      	lsls	r2, r2, #2
 800c102:	b570      	push	{r4, r5, r6, lr}
 800c104:	f1c2 0620 	rsb	r6, r2, #32
 800c108:	6843      	ldr	r3, [r0, #4]
 800c10a:	6804      	ldr	r4, [r0, #0]
 800c10c:	fa03 f506 	lsl.w	r5, r3, r6
 800c110:	432c      	orrs	r4, r5
 800c112:	40d3      	lsrs	r3, r2
 800c114:	6004      	str	r4, [r0, #0]
 800c116:	f840 3f04 	str.w	r3, [r0, #4]!
 800c11a:	4288      	cmp	r0, r1
 800c11c:	d3f4      	bcc.n	800c108 <L_shift+0xc>
 800c11e:	bd70      	pop	{r4, r5, r6, pc}

0800c120 <__match>:
 800c120:	b530      	push	{r4, r5, lr}
 800c122:	6803      	ldr	r3, [r0, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c12a:	b914      	cbnz	r4, 800c132 <__match+0x12>
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	2001      	movs	r0, #1
 800c130:	bd30      	pop	{r4, r5, pc}
 800c132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c136:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c13a:	2d19      	cmp	r5, #25
 800c13c:	bf98      	it	ls
 800c13e:	3220      	addls	r2, #32
 800c140:	42a2      	cmp	r2, r4
 800c142:	d0f0      	beq.n	800c126 <__match+0x6>
 800c144:	2000      	movs	r0, #0
 800c146:	e7f3      	b.n	800c130 <__match+0x10>

0800c148 <__hexnan>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	680b      	ldr	r3, [r1, #0]
 800c14e:	6801      	ldr	r1, [r0, #0]
 800c150:	115e      	asrs	r6, r3, #5
 800c152:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c156:	f013 031f 	ands.w	r3, r3, #31
 800c15a:	b087      	sub	sp, #28
 800c15c:	bf18      	it	ne
 800c15e:	3604      	addne	r6, #4
 800c160:	2500      	movs	r5, #0
 800c162:	1f37      	subs	r7, r6, #4
 800c164:	4682      	mov	sl, r0
 800c166:	4690      	mov	r8, r2
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c16e:	46b9      	mov	r9, r7
 800c170:	463c      	mov	r4, r7
 800c172:	9502      	str	r5, [sp, #8]
 800c174:	46ab      	mov	fp, r5
 800c176:	784a      	ldrb	r2, [r1, #1]
 800c178:	1c4b      	adds	r3, r1, #1
 800c17a:	9303      	str	r3, [sp, #12]
 800c17c:	b342      	cbz	r2, 800c1d0 <__hexnan+0x88>
 800c17e:	4610      	mov	r0, r2
 800c180:	9105      	str	r1, [sp, #20]
 800c182:	9204      	str	r2, [sp, #16]
 800c184:	f7ff fd76 	bl	800bc74 <__hexdig_fun>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d14f      	bne.n	800c22c <__hexnan+0xe4>
 800c18c:	9a04      	ldr	r2, [sp, #16]
 800c18e:	9905      	ldr	r1, [sp, #20]
 800c190:	2a20      	cmp	r2, #32
 800c192:	d818      	bhi.n	800c1c6 <__hexnan+0x7e>
 800c194:	9b02      	ldr	r3, [sp, #8]
 800c196:	459b      	cmp	fp, r3
 800c198:	dd13      	ble.n	800c1c2 <__hexnan+0x7a>
 800c19a:	454c      	cmp	r4, r9
 800c19c:	d206      	bcs.n	800c1ac <__hexnan+0x64>
 800c19e:	2d07      	cmp	r5, #7
 800c1a0:	dc04      	bgt.n	800c1ac <__hexnan+0x64>
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff ffa8 	bl	800c0fc <L_shift>
 800c1ac:	4544      	cmp	r4, r8
 800c1ae:	d950      	bls.n	800c252 <__hexnan+0x10a>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	f1a4 0904 	sub.w	r9, r4, #4
 800c1b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ba:	f8cd b008 	str.w	fp, [sp, #8]
 800c1be:	464c      	mov	r4, r9
 800c1c0:	461d      	mov	r5, r3
 800c1c2:	9903      	ldr	r1, [sp, #12]
 800c1c4:	e7d7      	b.n	800c176 <__hexnan+0x2e>
 800c1c6:	2a29      	cmp	r2, #41	; 0x29
 800c1c8:	d155      	bne.n	800c276 <__hexnan+0x12e>
 800c1ca:	3102      	adds	r1, #2
 800c1cc:	f8ca 1000 	str.w	r1, [sl]
 800c1d0:	f1bb 0f00 	cmp.w	fp, #0
 800c1d4:	d04f      	beq.n	800c276 <__hexnan+0x12e>
 800c1d6:	454c      	cmp	r4, r9
 800c1d8:	d206      	bcs.n	800c1e8 <__hexnan+0xa0>
 800c1da:	2d07      	cmp	r5, #7
 800c1dc:	dc04      	bgt.n	800c1e8 <__hexnan+0xa0>
 800c1de:	462a      	mov	r2, r5
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7ff ff8a 	bl	800c0fc <L_shift>
 800c1e8:	4544      	cmp	r4, r8
 800c1ea:	d934      	bls.n	800c256 <__hexnan+0x10e>
 800c1ec:	f1a8 0204 	sub.w	r2, r8, #4
 800c1f0:	4623      	mov	r3, r4
 800c1f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1fa:	429f      	cmp	r7, r3
 800c1fc:	d2f9      	bcs.n	800c1f2 <__hexnan+0xaa>
 800c1fe:	1b3b      	subs	r3, r7, r4
 800c200:	f023 0303 	bic.w	r3, r3, #3
 800c204:	3304      	adds	r3, #4
 800c206:	3e03      	subs	r6, #3
 800c208:	3401      	adds	r4, #1
 800c20a:	42a6      	cmp	r6, r4
 800c20c:	bf38      	it	cc
 800c20e:	2304      	movcc	r3, #4
 800c210:	4443      	add	r3, r8
 800c212:	2200      	movs	r2, #0
 800c214:	f843 2b04 	str.w	r2, [r3], #4
 800c218:	429f      	cmp	r7, r3
 800c21a:	d2fb      	bcs.n	800c214 <__hexnan+0xcc>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	b91b      	cbnz	r3, 800c228 <__hexnan+0xe0>
 800c220:	4547      	cmp	r7, r8
 800c222:	d126      	bne.n	800c272 <__hexnan+0x12a>
 800c224:	2301      	movs	r3, #1
 800c226:	603b      	str	r3, [r7, #0]
 800c228:	2005      	movs	r0, #5
 800c22a:	e025      	b.n	800c278 <__hexnan+0x130>
 800c22c:	3501      	adds	r5, #1
 800c22e:	2d08      	cmp	r5, #8
 800c230:	f10b 0b01 	add.w	fp, fp, #1
 800c234:	dd06      	ble.n	800c244 <__hexnan+0xfc>
 800c236:	4544      	cmp	r4, r8
 800c238:	d9c3      	bls.n	800c1c2 <__hexnan+0x7a>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c240:	2501      	movs	r5, #1
 800c242:	3c04      	subs	r4, #4
 800c244:	6822      	ldr	r2, [r4, #0]
 800c246:	f000 000f 	and.w	r0, r0, #15
 800c24a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c24e:	6020      	str	r0, [r4, #0]
 800c250:	e7b7      	b.n	800c1c2 <__hexnan+0x7a>
 800c252:	2508      	movs	r5, #8
 800c254:	e7b5      	b.n	800c1c2 <__hexnan+0x7a>
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d0df      	beq.n	800c21c <__hexnan+0xd4>
 800c25c:	f1c3 0320 	rsb	r3, r3, #32
 800c260:	f04f 32ff 	mov.w	r2, #4294967295
 800c264:	40da      	lsrs	r2, r3
 800c266:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c26a:	4013      	ands	r3, r2
 800c26c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c270:	e7d4      	b.n	800c21c <__hexnan+0xd4>
 800c272:	3f04      	subs	r7, #4
 800c274:	e7d2      	b.n	800c21c <__hexnan+0xd4>
 800c276:	2004      	movs	r0, #4
 800c278:	b007      	add	sp, #28
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c27e <__ascii_mbtowc>:
 800c27e:	b082      	sub	sp, #8
 800c280:	b901      	cbnz	r1, 800c284 <__ascii_mbtowc+0x6>
 800c282:	a901      	add	r1, sp, #4
 800c284:	b142      	cbz	r2, 800c298 <__ascii_mbtowc+0x1a>
 800c286:	b14b      	cbz	r3, 800c29c <__ascii_mbtowc+0x1e>
 800c288:	7813      	ldrb	r3, [r2, #0]
 800c28a:	600b      	str	r3, [r1, #0]
 800c28c:	7812      	ldrb	r2, [r2, #0]
 800c28e:	1e10      	subs	r0, r2, #0
 800c290:	bf18      	it	ne
 800c292:	2001      	movne	r0, #1
 800c294:	b002      	add	sp, #8
 800c296:	4770      	bx	lr
 800c298:	4610      	mov	r0, r2
 800c29a:	e7fb      	b.n	800c294 <__ascii_mbtowc+0x16>
 800c29c:	f06f 0001 	mvn.w	r0, #1
 800c2a0:	e7f8      	b.n	800c294 <__ascii_mbtowc+0x16>

0800c2a2 <_realloc_r>:
 800c2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	460e      	mov	r6, r1
 800c2ac:	b921      	cbnz	r1, 800c2b8 <_realloc_r+0x16>
 800c2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	f7fd be2e 	b.w	8009f14 <_malloc_r>
 800c2b8:	b92a      	cbnz	r2, 800c2c6 <_realloc_r+0x24>
 800c2ba:	f7fd fdb7 	bl	8009e2c <_free_r>
 800c2be:	4625      	mov	r5, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c6:	f000 f842 	bl	800c34e <_malloc_usable_size_r>
 800c2ca:	4284      	cmp	r4, r0
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	d802      	bhi.n	800c2d6 <_realloc_r+0x34>
 800c2d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2d4:	d812      	bhi.n	800c2fc <_realloc_r+0x5a>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4640      	mov	r0, r8
 800c2da:	f7fd fe1b 	bl	8009f14 <_malloc_r>
 800c2de:	4605      	mov	r5, r0
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d0ed      	beq.n	800c2c0 <_realloc_r+0x1e>
 800c2e4:	42bc      	cmp	r4, r7
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	4631      	mov	r1, r6
 800c2ea:	bf28      	it	cs
 800c2ec:	463a      	movcs	r2, r7
 800c2ee:	f7ff fc23 	bl	800bb38 <memcpy>
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	f7fd fd99 	bl	8009e2c <_free_r>
 800c2fa:	e7e1      	b.n	800c2c0 <_realloc_r+0x1e>
 800c2fc:	4635      	mov	r5, r6
 800c2fe:	e7df      	b.n	800c2c0 <_realloc_r+0x1e>

0800c300 <__ascii_wctomb>:
 800c300:	b149      	cbz	r1, 800c316 <__ascii_wctomb+0x16>
 800c302:	2aff      	cmp	r2, #255	; 0xff
 800c304:	bf85      	ittet	hi
 800c306:	238a      	movhi	r3, #138	; 0x8a
 800c308:	6003      	strhi	r3, [r0, #0]
 800c30a:	700a      	strbls	r2, [r1, #0]
 800c30c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c310:	bf98      	it	ls
 800c312:	2001      	movls	r0, #1
 800c314:	4770      	bx	lr
 800c316:	4608      	mov	r0, r1
 800c318:	4770      	bx	lr
	...

0800c31c <fiprintf>:
 800c31c:	b40e      	push	{r1, r2, r3}
 800c31e:	b503      	push	{r0, r1, lr}
 800c320:	4601      	mov	r1, r0
 800c322:	ab03      	add	r3, sp, #12
 800c324:	4805      	ldr	r0, [pc, #20]	; (800c33c <fiprintf+0x20>)
 800c326:	f853 2b04 	ldr.w	r2, [r3], #4
 800c32a:	6800      	ldr	r0, [r0, #0]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	f000 f83f 	bl	800c3b0 <_vfiprintf_r>
 800c332:	b002      	add	sp, #8
 800c334:	f85d eb04 	ldr.w	lr, [sp], #4
 800c338:	b003      	add	sp, #12
 800c33a:	4770      	bx	lr
 800c33c:	200000b8 	.word	0x200000b8

0800c340 <abort>:
 800c340:	b508      	push	{r3, lr}
 800c342:	2006      	movs	r0, #6
 800c344:	f000 fa0c 	bl	800c760 <raise>
 800c348:	2001      	movs	r0, #1
 800c34a:	f7f6 f933 	bl	80025b4 <_exit>

0800c34e <_malloc_usable_size_r>:
 800c34e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c352:	1f18      	subs	r0, r3, #4
 800c354:	2b00      	cmp	r3, #0
 800c356:	bfbc      	itt	lt
 800c358:	580b      	ldrlt	r3, [r1, r0]
 800c35a:	18c0      	addlt	r0, r0, r3
 800c35c:	4770      	bx	lr

0800c35e <__sfputc_r>:
 800c35e:	6893      	ldr	r3, [r2, #8]
 800c360:	3b01      	subs	r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	b410      	push	{r4}
 800c366:	6093      	str	r3, [r2, #8]
 800c368:	da08      	bge.n	800c37c <__sfputc_r+0x1e>
 800c36a:	6994      	ldr	r4, [r2, #24]
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	db01      	blt.n	800c374 <__sfputc_r+0x16>
 800c370:	290a      	cmp	r1, #10
 800c372:	d103      	bne.n	800c37c <__sfputc_r+0x1e>
 800c374:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c378:	f000 b934 	b.w	800c5e4 <__swbuf_r>
 800c37c:	6813      	ldr	r3, [r2, #0]
 800c37e:	1c58      	adds	r0, r3, #1
 800c380:	6010      	str	r0, [r2, #0]
 800c382:	7019      	strb	r1, [r3, #0]
 800c384:	4608      	mov	r0, r1
 800c386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <__sfputs_r>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
 800c392:	4614      	mov	r4, r2
 800c394:	18d5      	adds	r5, r2, r3
 800c396:	42ac      	cmp	r4, r5
 800c398:	d101      	bne.n	800c39e <__sfputs_r+0x12>
 800c39a:	2000      	movs	r0, #0
 800c39c:	e007      	b.n	800c3ae <__sfputs_r+0x22>
 800c39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a2:	463a      	mov	r2, r7
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ffda 	bl	800c35e <__sfputc_r>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d1f3      	bne.n	800c396 <__sfputs_r+0xa>
 800c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3b0 <_vfiprintf_r>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	460d      	mov	r5, r1
 800c3b6:	b09d      	sub	sp, #116	; 0x74
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	4698      	mov	r8, r3
 800c3bc:	4606      	mov	r6, r0
 800c3be:	b118      	cbz	r0, 800c3c8 <_vfiprintf_r+0x18>
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	b90b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x18>
 800c3c4:	f7fc fd96 	bl	8008ef4 <__sinit>
 800c3c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3ca:	07d9      	lsls	r1, r3, #31
 800c3cc:	d405      	bmi.n	800c3da <_vfiprintf_r+0x2a>
 800c3ce:	89ab      	ldrh	r3, [r5, #12]
 800c3d0:	059a      	lsls	r2, r3, #22
 800c3d2:	d402      	bmi.n	800c3da <_vfiprintf_r+0x2a>
 800c3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3d6:	f7fc fea4 	bl	8009122 <__retarget_lock_acquire_recursive>
 800c3da:	89ab      	ldrh	r3, [r5, #12]
 800c3dc:	071b      	lsls	r3, r3, #28
 800c3de:	d501      	bpl.n	800c3e4 <_vfiprintf_r+0x34>
 800c3e0:	692b      	ldr	r3, [r5, #16]
 800c3e2:	b99b      	cbnz	r3, 800c40c <_vfiprintf_r+0x5c>
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f000 f93a 	bl	800c660 <__swsetup_r>
 800c3ec:	b170      	cbz	r0, 800c40c <_vfiprintf_r+0x5c>
 800c3ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f0:	07dc      	lsls	r4, r3, #31
 800c3f2:	d504      	bpl.n	800c3fe <_vfiprintf_r+0x4e>
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	b01d      	add	sp, #116	; 0x74
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	89ab      	ldrh	r3, [r5, #12]
 800c400:	0598      	lsls	r0, r3, #22
 800c402:	d4f7      	bmi.n	800c3f4 <_vfiprintf_r+0x44>
 800c404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c406:	f7fc fe8d 	bl	8009124 <__retarget_lock_release_recursive>
 800c40a:	e7f3      	b.n	800c3f4 <_vfiprintf_r+0x44>
 800c40c:	2300      	movs	r3, #0
 800c40e:	9309      	str	r3, [sp, #36]	; 0x24
 800c410:	2320      	movs	r3, #32
 800c412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c416:	f8cd 800c 	str.w	r8, [sp, #12]
 800c41a:	2330      	movs	r3, #48	; 0x30
 800c41c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c5d0 <_vfiprintf_r+0x220>
 800c420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c424:	f04f 0901 	mov.w	r9, #1
 800c428:	4623      	mov	r3, r4
 800c42a:	469a      	mov	sl, r3
 800c42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c430:	b10a      	cbz	r2, 800c436 <_vfiprintf_r+0x86>
 800c432:	2a25      	cmp	r2, #37	; 0x25
 800c434:	d1f9      	bne.n	800c42a <_vfiprintf_r+0x7a>
 800c436:	ebba 0b04 	subs.w	fp, sl, r4
 800c43a:	d00b      	beq.n	800c454 <_vfiprintf_r+0xa4>
 800c43c:	465b      	mov	r3, fp
 800c43e:	4622      	mov	r2, r4
 800c440:	4629      	mov	r1, r5
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ffa2 	bl	800c38c <__sfputs_r>
 800c448:	3001      	adds	r0, #1
 800c44a:	f000 80a9 	beq.w	800c5a0 <_vfiprintf_r+0x1f0>
 800c44e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c450:	445a      	add	r2, fp
 800c452:	9209      	str	r2, [sp, #36]	; 0x24
 800c454:	f89a 3000 	ldrb.w	r3, [sl]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 80a1 	beq.w	800c5a0 <_vfiprintf_r+0x1f0>
 800c45e:	2300      	movs	r3, #0
 800c460:	f04f 32ff 	mov.w	r2, #4294967295
 800c464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c468:	f10a 0a01 	add.w	sl, sl, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	9307      	str	r3, [sp, #28]
 800c470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c474:	931a      	str	r3, [sp, #104]	; 0x68
 800c476:	4654      	mov	r4, sl
 800c478:	2205      	movs	r2, #5
 800c47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47e:	4854      	ldr	r0, [pc, #336]	; (800c5d0 <_vfiprintf_r+0x220>)
 800c480:	f7f3 feb6 	bl	80001f0 <memchr>
 800c484:	9a04      	ldr	r2, [sp, #16]
 800c486:	b9d8      	cbnz	r0, 800c4c0 <_vfiprintf_r+0x110>
 800c488:	06d1      	lsls	r1, r2, #27
 800c48a:	bf44      	itt	mi
 800c48c:	2320      	movmi	r3, #32
 800c48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c492:	0713      	lsls	r3, r2, #28
 800c494:	bf44      	itt	mi
 800c496:	232b      	movmi	r3, #43	; 0x2b
 800c498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c49c:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a2:	d015      	beq.n	800c4d0 <_vfiprintf_r+0x120>
 800c4a4:	9a07      	ldr	r2, [sp, #28]
 800c4a6:	4654      	mov	r4, sl
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f04f 0c0a 	mov.w	ip, #10
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4b4:	3b30      	subs	r3, #48	; 0x30
 800c4b6:	2b09      	cmp	r3, #9
 800c4b8:	d94d      	bls.n	800c556 <_vfiprintf_r+0x1a6>
 800c4ba:	b1b0      	cbz	r0, 800c4ea <_vfiprintf_r+0x13a>
 800c4bc:	9207      	str	r2, [sp, #28]
 800c4be:	e014      	b.n	800c4ea <_vfiprintf_r+0x13a>
 800c4c0:	eba0 0308 	sub.w	r3, r0, r8
 800c4c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	46a2      	mov	sl, r4
 800c4ce:	e7d2      	b.n	800c476 <_vfiprintf_r+0xc6>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	1d19      	adds	r1, r3, #4
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	9103      	str	r1, [sp, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	bfbb      	ittet	lt
 800c4dc:	425b      	neglt	r3, r3
 800c4de:	f042 0202 	orrlt.w	r2, r2, #2
 800c4e2:	9307      	strge	r3, [sp, #28]
 800c4e4:	9307      	strlt	r3, [sp, #28]
 800c4e6:	bfb8      	it	lt
 800c4e8:	9204      	strlt	r2, [sp, #16]
 800c4ea:	7823      	ldrb	r3, [r4, #0]
 800c4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c4ee:	d10c      	bne.n	800c50a <_vfiprintf_r+0x15a>
 800c4f0:	7863      	ldrb	r3, [r4, #1]
 800c4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f4:	d134      	bne.n	800c560 <_vfiprintf_r+0x1b0>
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	1d1a      	adds	r2, r3, #4
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	9203      	str	r2, [sp, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bfb8      	it	lt
 800c502:	f04f 33ff 	movlt.w	r3, #4294967295
 800c506:	3402      	adds	r4, #2
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c5e0 <_vfiprintf_r+0x230>
 800c50e:	7821      	ldrb	r1, [r4, #0]
 800c510:	2203      	movs	r2, #3
 800c512:	4650      	mov	r0, sl
 800c514:	f7f3 fe6c 	bl	80001f0 <memchr>
 800c518:	b138      	cbz	r0, 800c52a <_vfiprintf_r+0x17a>
 800c51a:	9b04      	ldr	r3, [sp, #16]
 800c51c:	eba0 000a 	sub.w	r0, r0, sl
 800c520:	2240      	movs	r2, #64	; 0x40
 800c522:	4082      	lsls	r2, r0
 800c524:	4313      	orrs	r3, r2
 800c526:	3401      	adds	r4, #1
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52e:	4829      	ldr	r0, [pc, #164]	; (800c5d4 <_vfiprintf_r+0x224>)
 800c530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c534:	2206      	movs	r2, #6
 800c536:	f7f3 fe5b 	bl	80001f0 <memchr>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d03f      	beq.n	800c5be <_vfiprintf_r+0x20e>
 800c53e:	4b26      	ldr	r3, [pc, #152]	; (800c5d8 <_vfiprintf_r+0x228>)
 800c540:	bb1b      	cbnz	r3, 800c58a <_vfiprintf_r+0x1da>
 800c542:	9b03      	ldr	r3, [sp, #12]
 800c544:	3307      	adds	r3, #7
 800c546:	f023 0307 	bic.w	r3, r3, #7
 800c54a:	3308      	adds	r3, #8
 800c54c:	9303      	str	r3, [sp, #12]
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	443b      	add	r3, r7
 800c552:	9309      	str	r3, [sp, #36]	; 0x24
 800c554:	e768      	b.n	800c428 <_vfiprintf_r+0x78>
 800c556:	fb0c 3202 	mla	r2, ip, r2, r3
 800c55a:	460c      	mov	r4, r1
 800c55c:	2001      	movs	r0, #1
 800c55e:	e7a6      	b.n	800c4ae <_vfiprintf_r+0xfe>
 800c560:	2300      	movs	r3, #0
 800c562:	3401      	adds	r4, #1
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	4619      	mov	r1, r3
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4620      	mov	r0, r4
 800c56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c572:	3a30      	subs	r2, #48	; 0x30
 800c574:	2a09      	cmp	r2, #9
 800c576:	d903      	bls.n	800c580 <_vfiprintf_r+0x1d0>
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0c6      	beq.n	800c50a <_vfiprintf_r+0x15a>
 800c57c:	9105      	str	r1, [sp, #20]
 800c57e:	e7c4      	b.n	800c50a <_vfiprintf_r+0x15a>
 800c580:	fb0c 2101 	mla	r1, ip, r1, r2
 800c584:	4604      	mov	r4, r0
 800c586:	2301      	movs	r3, #1
 800c588:	e7f0      	b.n	800c56c <_vfiprintf_r+0x1bc>
 800c58a:	ab03      	add	r3, sp, #12
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	462a      	mov	r2, r5
 800c590:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <_vfiprintf_r+0x22c>)
 800c592:	a904      	add	r1, sp, #16
 800c594:	4630      	mov	r0, r6
 800c596:	f7fb fe4b 	bl	8008230 <_printf_float>
 800c59a:	4607      	mov	r7, r0
 800c59c:	1c78      	adds	r0, r7, #1
 800c59e:	d1d6      	bne.n	800c54e <_vfiprintf_r+0x19e>
 800c5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5a2:	07d9      	lsls	r1, r3, #31
 800c5a4:	d405      	bmi.n	800c5b2 <_vfiprintf_r+0x202>
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	059a      	lsls	r2, r3, #22
 800c5aa:	d402      	bmi.n	800c5b2 <_vfiprintf_r+0x202>
 800c5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ae:	f7fc fdb9 	bl	8009124 <__retarget_lock_release_recursive>
 800c5b2:	89ab      	ldrh	r3, [r5, #12]
 800c5b4:	065b      	lsls	r3, r3, #25
 800c5b6:	f53f af1d 	bmi.w	800c3f4 <_vfiprintf_r+0x44>
 800c5ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5bc:	e71c      	b.n	800c3f8 <_vfiprintf_r+0x48>
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <_vfiprintf_r+0x22c>)
 800c5c6:	a904      	add	r1, sp, #16
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7fc f8d5 	bl	8008778 <_printf_i>
 800c5ce:	e7e4      	b.n	800c59a <_vfiprintf_r+0x1ea>
 800c5d0:	0800f8f9 	.word	0x0800f8f9
 800c5d4:	0800f903 	.word	0x0800f903
 800c5d8:	08008231 	.word	0x08008231
 800c5dc:	0800c38d 	.word	0x0800c38d
 800c5e0:	0800f8ff 	.word	0x0800f8ff

0800c5e4 <__swbuf_r>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	460e      	mov	r6, r1
 800c5e8:	4614      	mov	r4, r2
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	b118      	cbz	r0, 800c5f6 <__swbuf_r+0x12>
 800c5ee:	6a03      	ldr	r3, [r0, #32]
 800c5f0:	b90b      	cbnz	r3, 800c5f6 <__swbuf_r+0x12>
 800c5f2:	f7fc fc7f 	bl	8008ef4 <__sinit>
 800c5f6:	69a3      	ldr	r3, [r4, #24]
 800c5f8:	60a3      	str	r3, [r4, #8]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	071a      	lsls	r2, r3, #28
 800c5fe:	d525      	bpl.n	800c64c <__swbuf_r+0x68>
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	b31b      	cbz	r3, 800c64c <__swbuf_r+0x68>
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	6922      	ldr	r2, [r4, #16]
 800c608:	1a98      	subs	r0, r3, r2
 800c60a:	6963      	ldr	r3, [r4, #20]
 800c60c:	b2f6      	uxtb	r6, r6
 800c60e:	4283      	cmp	r3, r0
 800c610:	4637      	mov	r7, r6
 800c612:	dc04      	bgt.n	800c61e <__swbuf_r+0x3a>
 800c614:	4621      	mov	r1, r4
 800c616:	4628      	mov	r0, r5
 800c618:	f7ff fa2a 	bl	800ba70 <_fflush_r>
 800c61c:	b9e0      	cbnz	r0, 800c658 <__swbuf_r+0x74>
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	3b01      	subs	r3, #1
 800c622:	60a3      	str	r3, [r4, #8]
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	6022      	str	r2, [r4, #0]
 800c62a:	701e      	strb	r6, [r3, #0]
 800c62c:	6962      	ldr	r2, [r4, #20]
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	429a      	cmp	r2, r3
 800c632:	d004      	beq.n	800c63e <__swbuf_r+0x5a>
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	07db      	lsls	r3, r3, #31
 800c638:	d506      	bpl.n	800c648 <__swbuf_r+0x64>
 800c63a:	2e0a      	cmp	r6, #10
 800c63c:	d104      	bne.n	800c648 <__swbuf_r+0x64>
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f7ff fa15 	bl	800ba70 <_fflush_r>
 800c646:	b938      	cbnz	r0, 800c658 <__swbuf_r+0x74>
 800c648:	4638      	mov	r0, r7
 800c64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c64c:	4621      	mov	r1, r4
 800c64e:	4628      	mov	r0, r5
 800c650:	f000 f806 	bl	800c660 <__swsetup_r>
 800c654:	2800      	cmp	r0, #0
 800c656:	d0d5      	beq.n	800c604 <__swbuf_r+0x20>
 800c658:	f04f 37ff 	mov.w	r7, #4294967295
 800c65c:	e7f4      	b.n	800c648 <__swbuf_r+0x64>
	...

0800c660 <__swsetup_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4b2a      	ldr	r3, [pc, #168]	; (800c70c <__swsetup_r+0xac>)
 800c664:	4605      	mov	r5, r0
 800c666:	6818      	ldr	r0, [r3, #0]
 800c668:	460c      	mov	r4, r1
 800c66a:	b118      	cbz	r0, 800c674 <__swsetup_r+0x14>
 800c66c:	6a03      	ldr	r3, [r0, #32]
 800c66e:	b90b      	cbnz	r3, 800c674 <__swsetup_r+0x14>
 800c670:	f7fc fc40 	bl	8008ef4 <__sinit>
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c67a:	0718      	lsls	r0, r3, #28
 800c67c:	d422      	bmi.n	800c6c4 <__swsetup_r+0x64>
 800c67e:	06d9      	lsls	r1, r3, #27
 800c680:	d407      	bmi.n	800c692 <__swsetup_r+0x32>
 800c682:	2309      	movs	r3, #9
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	e034      	b.n	800c6fc <__swsetup_r+0x9c>
 800c692:	0758      	lsls	r0, r3, #29
 800c694:	d512      	bpl.n	800c6bc <__swsetup_r+0x5c>
 800c696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c698:	b141      	cbz	r1, 800c6ac <__swsetup_r+0x4c>
 800c69a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c69e:	4299      	cmp	r1, r3
 800c6a0:	d002      	beq.n	800c6a8 <__swsetup_r+0x48>
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f7fd fbc2 	bl	8009e2c <_free_r>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	6363      	str	r3, [r4, #52]	; 0x34
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	6063      	str	r3, [r4, #4]
 800c6b8:	6923      	ldr	r3, [r4, #16]
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f043 0308 	orr.w	r3, r3, #8
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	b94b      	cbnz	r3, 800c6dc <__swsetup_r+0x7c>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d2:	d003      	beq.n	800c6dc <__swsetup_r+0x7c>
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f000 f884 	bl	800c7e4 <__smakebuf_r>
 800c6dc:	89a0      	ldrh	r0, [r4, #12]
 800c6de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6e2:	f010 0301 	ands.w	r3, r0, #1
 800c6e6:	d00a      	beq.n	800c6fe <__swsetup_r+0x9e>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60a3      	str	r3, [r4, #8]
 800c6ec:	6963      	ldr	r3, [r4, #20]
 800c6ee:	425b      	negs	r3, r3
 800c6f0:	61a3      	str	r3, [r4, #24]
 800c6f2:	6923      	ldr	r3, [r4, #16]
 800c6f4:	b943      	cbnz	r3, 800c708 <__swsetup_r+0xa8>
 800c6f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6fa:	d1c4      	bne.n	800c686 <__swsetup_r+0x26>
 800c6fc:	bd38      	pop	{r3, r4, r5, pc}
 800c6fe:	0781      	lsls	r1, r0, #30
 800c700:	bf58      	it	pl
 800c702:	6963      	ldrpl	r3, [r4, #20]
 800c704:	60a3      	str	r3, [r4, #8]
 800c706:	e7f4      	b.n	800c6f2 <__swsetup_r+0x92>
 800c708:	2000      	movs	r0, #0
 800c70a:	e7f7      	b.n	800c6fc <__swsetup_r+0x9c>
 800c70c:	200000b8 	.word	0x200000b8

0800c710 <_raise_r>:
 800c710:	291f      	cmp	r1, #31
 800c712:	b538      	push	{r3, r4, r5, lr}
 800c714:	4604      	mov	r4, r0
 800c716:	460d      	mov	r5, r1
 800c718:	d904      	bls.n	800c724 <_raise_r+0x14>
 800c71a:	2316      	movs	r3, #22
 800c71c:	6003      	str	r3, [r0, #0]
 800c71e:	f04f 30ff 	mov.w	r0, #4294967295
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c726:	b112      	cbz	r2, 800c72e <_raise_r+0x1e>
 800c728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c72c:	b94b      	cbnz	r3, 800c742 <_raise_r+0x32>
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 f830 	bl	800c794 <_getpid_r>
 800c734:	462a      	mov	r2, r5
 800c736:	4601      	mov	r1, r0
 800c738:	4620      	mov	r0, r4
 800c73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c73e:	f000 b817 	b.w	800c770 <_kill_r>
 800c742:	2b01      	cmp	r3, #1
 800c744:	d00a      	beq.n	800c75c <_raise_r+0x4c>
 800c746:	1c59      	adds	r1, r3, #1
 800c748:	d103      	bne.n	800c752 <_raise_r+0x42>
 800c74a:	2316      	movs	r3, #22
 800c74c:	6003      	str	r3, [r0, #0]
 800c74e:	2001      	movs	r0, #1
 800c750:	e7e7      	b.n	800c722 <_raise_r+0x12>
 800c752:	2400      	movs	r4, #0
 800c754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c758:	4628      	mov	r0, r5
 800c75a:	4798      	blx	r3
 800c75c:	2000      	movs	r0, #0
 800c75e:	e7e0      	b.n	800c722 <_raise_r+0x12>

0800c760 <raise>:
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <raise+0xc>)
 800c762:	4601      	mov	r1, r0
 800c764:	6818      	ldr	r0, [r3, #0]
 800c766:	f7ff bfd3 	b.w	800c710 <_raise_r>
 800c76a:	bf00      	nop
 800c76c:	200000b8 	.word	0x200000b8

0800c770 <_kill_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d07      	ldr	r5, [pc, #28]	; (800c790 <_kill_r+0x20>)
 800c774:	2300      	movs	r3, #0
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	f7f5 ff09 	bl	8002594 <_kill>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	d102      	bne.n	800c78c <_kill_r+0x1c>
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	b103      	cbz	r3, 800c78c <_kill_r+0x1c>
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	bd38      	pop	{r3, r4, r5, pc}
 800c78e:	bf00      	nop
 800c790:	20000a00 	.word	0x20000a00

0800c794 <_getpid_r>:
 800c794:	f7f5 bef6 	b.w	8002584 <_getpid>

0800c798 <__swhatbuf_r>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	460c      	mov	r4, r1
 800c79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	b096      	sub	sp, #88	; 0x58
 800c7a4:	4615      	mov	r5, r2
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	da0d      	bge.n	800c7c6 <__swhatbuf_r+0x2e>
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7b0:	f04f 0100 	mov.w	r1, #0
 800c7b4:	bf0c      	ite	eq
 800c7b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7ba:	2340      	movne	r3, #64	; 0x40
 800c7bc:	2000      	movs	r0, #0
 800c7be:	6031      	str	r1, [r6, #0]
 800c7c0:	602b      	str	r3, [r5, #0]
 800c7c2:	b016      	add	sp, #88	; 0x58
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
 800c7c6:	466a      	mov	r2, sp
 800c7c8:	f000 f848 	bl	800c85c <_fstat_r>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	dbec      	blt.n	800c7aa <__swhatbuf_r+0x12>
 800c7d0:	9901      	ldr	r1, [sp, #4]
 800c7d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7da:	4259      	negs	r1, r3
 800c7dc:	4159      	adcs	r1, r3
 800c7de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e2:	e7eb      	b.n	800c7bc <__swhatbuf_r+0x24>

0800c7e4 <__smakebuf_r>:
 800c7e4:	898b      	ldrh	r3, [r1, #12]
 800c7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7e8:	079d      	lsls	r5, r3, #30
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	d507      	bpl.n	800c800 <__smakebuf_r+0x1c>
 800c7f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	6123      	str	r3, [r4, #16]
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	6163      	str	r3, [r4, #20]
 800c7fc:	b002      	add	sp, #8
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	ab01      	add	r3, sp, #4
 800c802:	466a      	mov	r2, sp
 800c804:	f7ff ffc8 	bl	800c798 <__swhatbuf_r>
 800c808:	9900      	ldr	r1, [sp, #0]
 800c80a:	4605      	mov	r5, r0
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7fd fb81 	bl	8009f14 <_malloc_r>
 800c812:	b948      	cbnz	r0, 800c828 <__smakebuf_r+0x44>
 800c814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c818:	059a      	lsls	r2, r3, #22
 800c81a:	d4ef      	bmi.n	800c7fc <__smakebuf_r+0x18>
 800c81c:	f023 0303 	bic.w	r3, r3, #3
 800c820:	f043 0302 	orr.w	r3, r3, #2
 800c824:	81a3      	strh	r3, [r4, #12]
 800c826:	e7e3      	b.n	800c7f0 <__smakebuf_r+0xc>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	6020      	str	r0, [r4, #0]
 800c82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	6163      	str	r3, [r4, #20]
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	6120      	str	r0, [r4, #16]
 800c83a:	b15b      	cbz	r3, 800c854 <__smakebuf_r+0x70>
 800c83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c840:	4630      	mov	r0, r6
 800c842:	f000 f81d 	bl	800c880 <_isatty_r>
 800c846:	b128      	cbz	r0, 800c854 <__smakebuf_r+0x70>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	f043 0301 	orr.w	r3, r3, #1
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	431d      	orrs	r5, r3
 800c858:	81a5      	strh	r5, [r4, #12]
 800c85a:	e7cf      	b.n	800c7fc <__smakebuf_r+0x18>

0800c85c <_fstat_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d07      	ldr	r5, [pc, #28]	; (800c87c <_fstat_r+0x20>)
 800c860:	2300      	movs	r3, #0
 800c862:	4604      	mov	r4, r0
 800c864:	4608      	mov	r0, r1
 800c866:	4611      	mov	r1, r2
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	f7f5 fef2 	bl	8002652 <_fstat>
 800c86e:	1c43      	adds	r3, r0, #1
 800c870:	d102      	bne.n	800c878 <_fstat_r+0x1c>
 800c872:	682b      	ldr	r3, [r5, #0]
 800c874:	b103      	cbz	r3, 800c878 <_fstat_r+0x1c>
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	bd38      	pop	{r3, r4, r5, pc}
 800c87a:	bf00      	nop
 800c87c:	20000a00 	.word	0x20000a00

0800c880 <_isatty_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d06      	ldr	r5, [pc, #24]	; (800c89c <_isatty_r+0x1c>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	602b      	str	r3, [r5, #0]
 800c88c:	f7f5 fef1 	bl	8002672 <_isatty>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_isatty_r+0x1a>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_isatty_r+0x1a>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20000a00 	.word	0x20000a00

0800c8a0 <cos>:
 800c8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8a2:	ec53 2b10 	vmov	r2, r3, d0
 800c8a6:	4826      	ldr	r0, [pc, #152]	; (800c940 <cos+0xa0>)
 800c8a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8ac:	4281      	cmp	r1, r0
 800c8ae:	dc06      	bgt.n	800c8be <cos+0x1e>
 800c8b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c938 <cos+0x98>
 800c8b4:	b005      	add	sp, #20
 800c8b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ba:	f000 b89d 	b.w	800c9f8 <__kernel_cos>
 800c8be:	4821      	ldr	r0, [pc, #132]	; (800c944 <cos+0xa4>)
 800c8c0:	4281      	cmp	r1, r0
 800c8c2:	dd09      	ble.n	800c8d8 <cos+0x38>
 800c8c4:	ee10 0a10 	vmov	r0, s0
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f7f3 fced 	bl	80002a8 <__aeabi_dsub>
 800c8ce:	ec41 0b10 	vmov	d0, r0, r1
 800c8d2:	b005      	add	sp, #20
 800c8d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8d8:	4668      	mov	r0, sp
 800c8da:	f000 fa15 	bl	800cd08 <__ieee754_rem_pio2>
 800c8de:	f000 0003 	and.w	r0, r0, #3
 800c8e2:	2801      	cmp	r0, #1
 800c8e4:	d00b      	beq.n	800c8fe <cos+0x5e>
 800c8e6:	2802      	cmp	r0, #2
 800c8e8:	d016      	beq.n	800c918 <cos+0x78>
 800c8ea:	b9e0      	cbnz	r0, 800c926 <cos+0x86>
 800c8ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8f0:	ed9d 0b00 	vldr	d0, [sp]
 800c8f4:	f000 f880 	bl	800c9f8 <__kernel_cos>
 800c8f8:	ec51 0b10 	vmov	r0, r1, d0
 800c8fc:	e7e7      	b.n	800c8ce <cos+0x2e>
 800c8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c902:	ed9d 0b00 	vldr	d0, [sp]
 800c906:	f000 f93f 	bl	800cb88 <__kernel_sin>
 800c90a:	ec53 2b10 	vmov	r2, r3, d0
 800c90e:	ee10 0a10 	vmov	r0, s0
 800c912:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c916:	e7da      	b.n	800c8ce <cos+0x2e>
 800c918:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c91c:	ed9d 0b00 	vldr	d0, [sp]
 800c920:	f000 f86a 	bl	800c9f8 <__kernel_cos>
 800c924:	e7f1      	b.n	800c90a <cos+0x6a>
 800c926:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c92a:	ed9d 0b00 	vldr	d0, [sp]
 800c92e:	2001      	movs	r0, #1
 800c930:	f000 f92a 	bl	800cb88 <__kernel_sin>
 800c934:	e7e0      	b.n	800c8f8 <cos+0x58>
 800c936:	bf00      	nop
	...
 800c940:	3fe921fb 	.word	0x3fe921fb
 800c944:	7fefffff 	.word	0x7fefffff

0800c948 <sin>:
 800c948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c94a:	ec53 2b10 	vmov	r2, r3, d0
 800c94e:	4828      	ldr	r0, [pc, #160]	; (800c9f0 <sin+0xa8>)
 800c950:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c954:	4281      	cmp	r1, r0
 800c956:	dc07      	bgt.n	800c968 <sin+0x20>
 800c958:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c9e8 <sin+0xa0>
 800c95c:	2000      	movs	r0, #0
 800c95e:	b005      	add	sp, #20
 800c960:	f85d eb04 	ldr.w	lr, [sp], #4
 800c964:	f000 b910 	b.w	800cb88 <__kernel_sin>
 800c968:	4822      	ldr	r0, [pc, #136]	; (800c9f4 <sin+0xac>)
 800c96a:	4281      	cmp	r1, r0
 800c96c:	dd09      	ble.n	800c982 <sin+0x3a>
 800c96e:	ee10 0a10 	vmov	r0, s0
 800c972:	4619      	mov	r1, r3
 800c974:	f7f3 fc98 	bl	80002a8 <__aeabi_dsub>
 800c978:	ec41 0b10 	vmov	d0, r0, r1
 800c97c:	b005      	add	sp, #20
 800c97e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c982:	4668      	mov	r0, sp
 800c984:	f000 f9c0 	bl	800cd08 <__ieee754_rem_pio2>
 800c988:	f000 0003 	and.w	r0, r0, #3
 800c98c:	2801      	cmp	r0, #1
 800c98e:	d00c      	beq.n	800c9aa <sin+0x62>
 800c990:	2802      	cmp	r0, #2
 800c992:	d011      	beq.n	800c9b8 <sin+0x70>
 800c994:	b9f0      	cbnz	r0, 800c9d4 <sin+0x8c>
 800c996:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c99a:	ed9d 0b00 	vldr	d0, [sp]
 800c99e:	2001      	movs	r0, #1
 800c9a0:	f000 f8f2 	bl	800cb88 <__kernel_sin>
 800c9a4:	ec51 0b10 	vmov	r0, r1, d0
 800c9a8:	e7e6      	b.n	800c978 <sin+0x30>
 800c9aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9ae:	ed9d 0b00 	vldr	d0, [sp]
 800c9b2:	f000 f821 	bl	800c9f8 <__kernel_cos>
 800c9b6:	e7f5      	b.n	800c9a4 <sin+0x5c>
 800c9b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9bc:	ed9d 0b00 	vldr	d0, [sp]
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f000 f8e1 	bl	800cb88 <__kernel_sin>
 800c9c6:	ec53 2b10 	vmov	r2, r3, d0
 800c9ca:	ee10 0a10 	vmov	r0, s0
 800c9ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c9d2:	e7d1      	b.n	800c978 <sin+0x30>
 800c9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c9d8:	ed9d 0b00 	vldr	d0, [sp]
 800c9dc:	f000 f80c 	bl	800c9f8 <__kernel_cos>
 800c9e0:	e7f1      	b.n	800c9c6 <sin+0x7e>
 800c9e2:	bf00      	nop
 800c9e4:	f3af 8000 	nop.w
	...
 800c9f0:	3fe921fb 	.word	0x3fe921fb
 800c9f4:	7fefffff 	.word	0x7fefffff

0800c9f8 <__kernel_cos>:
 800c9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	ec57 6b10 	vmov	r6, r7, d0
 800ca00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ca04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ca08:	ed8d 1b00 	vstr	d1, [sp]
 800ca0c:	da07      	bge.n	800ca1e <__kernel_cos+0x26>
 800ca0e:	ee10 0a10 	vmov	r0, s0
 800ca12:	4639      	mov	r1, r7
 800ca14:	f7f4 f8b0 	bl	8000b78 <__aeabi_d2iz>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f000 8088 	beq.w	800cb2e <__kernel_cos+0x136>
 800ca1e:	4632      	mov	r2, r6
 800ca20:	463b      	mov	r3, r7
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fdf7 	bl	8000618 <__aeabi_dmul>
 800ca2a:	4b51      	ldr	r3, [pc, #324]	; (800cb70 <__kernel_cos+0x178>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	460d      	mov	r5, r1
 800ca32:	f7f3 fdf1 	bl	8000618 <__aeabi_dmul>
 800ca36:	a340      	add	r3, pc, #256	; (adr r3, 800cb38 <__kernel_cos+0x140>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4682      	mov	sl, r0
 800ca3e:	468b      	mov	fp, r1
 800ca40:	4620      	mov	r0, r4
 800ca42:	4629      	mov	r1, r5
 800ca44:	f7f3 fde8 	bl	8000618 <__aeabi_dmul>
 800ca48:	a33d      	add	r3, pc, #244	; (adr r3, 800cb40 <__kernel_cos+0x148>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f3 fc2d 	bl	80002ac <__adddf3>
 800ca52:	4622      	mov	r2, r4
 800ca54:	462b      	mov	r3, r5
 800ca56:	f7f3 fddf 	bl	8000618 <__aeabi_dmul>
 800ca5a:	a33b      	add	r3, pc, #236	; (adr r3, 800cb48 <__kernel_cos+0x150>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fc22 	bl	80002a8 <__aeabi_dsub>
 800ca64:	4622      	mov	r2, r4
 800ca66:	462b      	mov	r3, r5
 800ca68:	f7f3 fdd6 	bl	8000618 <__aeabi_dmul>
 800ca6c:	a338      	add	r3, pc, #224	; (adr r3, 800cb50 <__kernel_cos+0x158>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f7f3 fc1b 	bl	80002ac <__adddf3>
 800ca76:	4622      	mov	r2, r4
 800ca78:	462b      	mov	r3, r5
 800ca7a:	f7f3 fdcd 	bl	8000618 <__aeabi_dmul>
 800ca7e:	a336      	add	r3, pc, #216	; (adr r3, 800cb58 <__kernel_cos+0x160>)
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	f7f3 fc10 	bl	80002a8 <__aeabi_dsub>
 800ca88:	4622      	mov	r2, r4
 800ca8a:	462b      	mov	r3, r5
 800ca8c:	f7f3 fdc4 	bl	8000618 <__aeabi_dmul>
 800ca90:	a333      	add	r3, pc, #204	; (adr r3, 800cb60 <__kernel_cos+0x168>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f3 fc09 	bl	80002ac <__adddf3>
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	462b      	mov	r3, r5
 800ca9e:	f7f3 fdbb 	bl	8000618 <__aeabi_dmul>
 800caa2:	4622      	mov	r2, r4
 800caa4:	462b      	mov	r3, r5
 800caa6:	f7f3 fdb7 	bl	8000618 <__aeabi_dmul>
 800caaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caae:	4604      	mov	r4, r0
 800cab0:	460d      	mov	r5, r1
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 fdaf 	bl	8000618 <__aeabi_dmul>
 800caba:	460b      	mov	r3, r1
 800cabc:	4602      	mov	r2, r0
 800cabe:	4629      	mov	r1, r5
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7f3 fbf1 	bl	80002a8 <__aeabi_dsub>
 800cac6:	4b2b      	ldr	r3, [pc, #172]	; (800cb74 <__kernel_cos+0x17c>)
 800cac8:	4598      	cmp	r8, r3
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	dc10      	bgt.n	800caf2 <__kernel_cos+0xfa>
 800cad0:	4602      	mov	r2, r0
 800cad2:	460b      	mov	r3, r1
 800cad4:	4650      	mov	r0, sl
 800cad6:	4659      	mov	r1, fp
 800cad8:	f7f3 fbe6 	bl	80002a8 <__aeabi_dsub>
 800cadc:	460b      	mov	r3, r1
 800cade:	4926      	ldr	r1, [pc, #152]	; (800cb78 <__kernel_cos+0x180>)
 800cae0:	4602      	mov	r2, r0
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7f3 fbe0 	bl	80002a8 <__aeabi_dsub>
 800cae8:	ec41 0b10 	vmov	d0, r0, r1
 800caec:	b003      	add	sp, #12
 800caee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf2:	4b22      	ldr	r3, [pc, #136]	; (800cb7c <__kernel_cos+0x184>)
 800caf4:	4920      	ldr	r1, [pc, #128]	; (800cb78 <__kernel_cos+0x180>)
 800caf6:	4598      	cmp	r8, r3
 800caf8:	bfcc      	ite	gt
 800cafa:	4d21      	ldrgt	r5, [pc, #132]	; (800cb80 <__kernel_cos+0x188>)
 800cafc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cb00:	2400      	movs	r4, #0
 800cb02:	4622      	mov	r2, r4
 800cb04:	462b      	mov	r3, r5
 800cb06:	2000      	movs	r0, #0
 800cb08:	f7f3 fbce 	bl	80002a8 <__aeabi_dsub>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	4680      	mov	r8, r0
 800cb10:	4689      	mov	r9, r1
 800cb12:	462b      	mov	r3, r5
 800cb14:	4650      	mov	r0, sl
 800cb16:	4659      	mov	r1, fp
 800cb18:	f7f3 fbc6 	bl	80002a8 <__aeabi_dsub>
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	463b      	mov	r3, r7
 800cb20:	f7f3 fbc2 	bl	80002a8 <__aeabi_dsub>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4640      	mov	r0, r8
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	e7da      	b.n	800cae4 <__kernel_cos+0xec>
 800cb2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cb68 <__kernel_cos+0x170>
 800cb32:	e7db      	b.n	800caec <__kernel_cos+0xf4>
 800cb34:	f3af 8000 	nop.w
 800cb38:	be8838d4 	.word	0xbe8838d4
 800cb3c:	bda8fae9 	.word	0xbda8fae9
 800cb40:	bdb4b1c4 	.word	0xbdb4b1c4
 800cb44:	3e21ee9e 	.word	0x3e21ee9e
 800cb48:	809c52ad 	.word	0x809c52ad
 800cb4c:	3e927e4f 	.word	0x3e927e4f
 800cb50:	19cb1590 	.word	0x19cb1590
 800cb54:	3efa01a0 	.word	0x3efa01a0
 800cb58:	16c15177 	.word	0x16c15177
 800cb5c:	3f56c16c 	.word	0x3f56c16c
 800cb60:	5555554c 	.word	0x5555554c
 800cb64:	3fa55555 	.word	0x3fa55555
 800cb68:	00000000 	.word	0x00000000
 800cb6c:	3ff00000 	.word	0x3ff00000
 800cb70:	3fe00000 	.word	0x3fe00000
 800cb74:	3fd33332 	.word	0x3fd33332
 800cb78:	3ff00000 	.word	0x3ff00000
 800cb7c:	3fe90000 	.word	0x3fe90000
 800cb80:	3fd20000 	.word	0x3fd20000
 800cb84:	00000000 	.word	0x00000000

0800cb88 <__kernel_sin>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	ed2d 8b04 	vpush	{d8-d9}
 800cb90:	eeb0 8a41 	vmov.f32	s16, s2
 800cb94:	eef0 8a61 	vmov.f32	s17, s3
 800cb98:	ec55 4b10 	vmov	r4, r5, d0
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cba2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cba6:	9001      	str	r0, [sp, #4]
 800cba8:	da06      	bge.n	800cbb8 <__kernel_sin+0x30>
 800cbaa:	ee10 0a10 	vmov	r0, s0
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f7f3 ffe2 	bl	8000b78 <__aeabi_d2iz>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d051      	beq.n	800cc5c <__kernel_sin+0xd4>
 800cbb8:	4622      	mov	r2, r4
 800cbba:	462b      	mov	r3, r5
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 fd2a 	bl	8000618 <__aeabi_dmul>
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	468b      	mov	fp, r1
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 fd22 	bl	8000618 <__aeabi_dmul>
 800cbd4:	a341      	add	r3, pc, #260	; (adr r3, 800ccdc <__kernel_sin+0x154>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	4680      	mov	r8, r0
 800cbdc:	4689      	mov	r9, r1
 800cbde:	4650      	mov	r0, sl
 800cbe0:	4659      	mov	r1, fp
 800cbe2:	f7f3 fd19 	bl	8000618 <__aeabi_dmul>
 800cbe6:	a33f      	add	r3, pc, #252	; (adr r3, 800cce4 <__kernel_sin+0x15c>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f7f3 fb5c 	bl	80002a8 <__aeabi_dsub>
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	465b      	mov	r3, fp
 800cbf4:	f7f3 fd10 	bl	8000618 <__aeabi_dmul>
 800cbf8:	a33c      	add	r3, pc, #240	; (adr r3, 800ccec <__kernel_sin+0x164>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fb55 	bl	80002ac <__adddf3>
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	f7f3 fd07 	bl	8000618 <__aeabi_dmul>
 800cc0a:	a33a      	add	r3, pc, #232	; (adr r3, 800ccf4 <__kernel_sin+0x16c>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 fb4a 	bl	80002a8 <__aeabi_dsub>
 800cc14:	4652      	mov	r2, sl
 800cc16:	465b      	mov	r3, fp
 800cc18:	f7f3 fcfe 	bl	8000618 <__aeabi_dmul>
 800cc1c:	a337      	add	r3, pc, #220	; (adr r3, 800ccfc <__kernel_sin+0x174>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f3 fb43 	bl	80002ac <__adddf3>
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	4606      	mov	r6, r0
 800cc2a:	460f      	mov	r7, r1
 800cc2c:	b9eb      	cbnz	r3, 800cc6a <__kernel_sin+0xe2>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4650      	mov	r0, sl
 800cc34:	4659      	mov	r1, fp
 800cc36:	f7f3 fcef 	bl	8000618 <__aeabi_dmul>
 800cc3a:	a325      	add	r3, pc, #148	; (adr r3, 800ccd0 <__kernel_sin+0x148>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fb32 	bl	80002a8 <__aeabi_dsub>
 800cc44:	4642      	mov	r2, r8
 800cc46:	464b      	mov	r3, r9
 800cc48:	f7f3 fce6 	bl	8000618 <__aeabi_dmul>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4620      	mov	r0, r4
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7f3 fb2a 	bl	80002ac <__adddf3>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	ec45 4b10 	vmov	d0, r4, r5
 800cc60:	b003      	add	sp, #12
 800cc62:	ecbd 8b04 	vpop	{d8-d9}
 800cc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6a:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <__kernel_sin+0x150>)
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	2200      	movs	r2, #0
 800cc72:	f7f3 fcd1 	bl	8000618 <__aeabi_dmul>
 800cc76:	4632      	mov	r2, r6
 800cc78:	ec41 0b19 	vmov	d9, r0, r1
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fcc9 	bl	8000618 <__aeabi_dmul>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	ec51 0b19 	vmov	r0, r1, d9
 800cc8e:	f7f3 fb0b 	bl	80002a8 <__aeabi_dsub>
 800cc92:	4652      	mov	r2, sl
 800cc94:	465b      	mov	r3, fp
 800cc96:	f7f3 fcbf 	bl	8000618 <__aeabi_dmul>
 800cc9a:	ec53 2b18 	vmov	r2, r3, d8
 800cc9e:	f7f3 fb03 	bl	80002a8 <__aeabi_dsub>
 800cca2:	a30b      	add	r3, pc, #44	; (adr r3, 800ccd0 <__kernel_sin+0x148>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	4606      	mov	r6, r0
 800ccaa:	460f      	mov	r7, r1
 800ccac:	4640      	mov	r0, r8
 800ccae:	4649      	mov	r1, r9
 800ccb0:	f7f3 fcb2 	bl	8000618 <__aeabi_dmul>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 faf6 	bl	80002ac <__adddf3>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f7f3 faee 	bl	80002a8 <__aeabi_dsub>
 800cccc:	e7c4      	b.n	800cc58 <__kernel_sin+0xd0>
 800ccce:	bf00      	nop
 800ccd0:	55555549 	.word	0x55555549
 800ccd4:	3fc55555 	.word	0x3fc55555
 800ccd8:	3fe00000 	.word	0x3fe00000
 800ccdc:	5acfd57c 	.word	0x5acfd57c
 800cce0:	3de5d93a 	.word	0x3de5d93a
 800cce4:	8a2b9ceb 	.word	0x8a2b9ceb
 800cce8:	3e5ae5e6 	.word	0x3e5ae5e6
 800ccec:	57b1fe7d 	.word	0x57b1fe7d
 800ccf0:	3ec71de3 	.word	0x3ec71de3
 800ccf4:	19c161d5 	.word	0x19c161d5
 800ccf8:	3f2a01a0 	.word	0x3f2a01a0
 800ccfc:	1110f8a6 	.word	0x1110f8a6
 800cd00:	3f811111 	.word	0x3f811111
 800cd04:	00000000 	.word	0x00000000

0800cd08 <__ieee754_rem_pio2>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	ed2d 8b02 	vpush	{d8}
 800cd10:	ec55 4b10 	vmov	r4, r5, d0
 800cd14:	4bca      	ldr	r3, [pc, #808]	; (800d040 <__ieee754_rem_pio2+0x338>)
 800cd16:	b08b      	sub	sp, #44	; 0x2c
 800cd18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cd1c:	4598      	cmp	r8, r3
 800cd1e:	4682      	mov	sl, r0
 800cd20:	9502      	str	r5, [sp, #8]
 800cd22:	dc08      	bgt.n	800cd36 <__ieee754_rem_pio2+0x2e>
 800cd24:	2200      	movs	r2, #0
 800cd26:	2300      	movs	r3, #0
 800cd28:	ed80 0b00 	vstr	d0, [r0]
 800cd2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cd30:	f04f 0b00 	mov.w	fp, #0
 800cd34:	e028      	b.n	800cd88 <__ieee754_rem_pio2+0x80>
 800cd36:	4bc3      	ldr	r3, [pc, #780]	; (800d044 <__ieee754_rem_pio2+0x33c>)
 800cd38:	4598      	cmp	r8, r3
 800cd3a:	dc78      	bgt.n	800ce2e <__ieee754_rem_pio2+0x126>
 800cd3c:	9b02      	ldr	r3, [sp, #8]
 800cd3e:	4ec2      	ldr	r6, [pc, #776]	; (800d048 <__ieee754_rem_pio2+0x340>)
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	ee10 0a10 	vmov	r0, s0
 800cd46:	a3b0      	add	r3, pc, #704	; (adr r3, 800d008 <__ieee754_rem_pio2+0x300>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	dd39      	ble.n	800cdc4 <__ieee754_rem_pio2+0xbc>
 800cd50:	f7f3 faaa 	bl	80002a8 <__aeabi_dsub>
 800cd54:	45b0      	cmp	r8, r6
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	d01b      	beq.n	800cd94 <__ieee754_rem_pio2+0x8c>
 800cd5c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d010 <__ieee754_rem_pio2+0x308>)
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	f7f3 faa1 	bl	80002a8 <__aeabi_dsub>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	e9ca 2300 	strd	r2, r3, [sl]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7f3 fa99 	bl	80002a8 <__aeabi_dsub>
 800cd76:	a3a6      	add	r3, pc, #664	; (adr r3, 800d010 <__ieee754_rem_pio2+0x308>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fa94 	bl	80002a8 <__aeabi_dsub>
 800cd80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd84:	f04f 0b01 	mov.w	fp, #1
 800cd88:	4658      	mov	r0, fp
 800cd8a:	b00b      	add	sp, #44	; 0x2c
 800cd8c:	ecbd 8b02 	vpop	{d8}
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	a3a0      	add	r3, pc, #640	; (adr r3, 800d018 <__ieee754_rem_pio2+0x310>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f7f3 fa85 	bl	80002a8 <__aeabi_dsub>
 800cd9e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d020 <__ieee754_rem_pio2+0x318>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	4604      	mov	r4, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	f7f3 fa7e 	bl	80002a8 <__aeabi_dsub>
 800cdac:	4602      	mov	r2, r0
 800cdae:	460b      	mov	r3, r1
 800cdb0:	e9ca 2300 	strd	r2, r3, [sl]
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fa76 	bl	80002a8 <__aeabi_dsub>
 800cdbc:	a398      	add	r3, pc, #608	; (adr r3, 800d020 <__ieee754_rem_pio2+0x318>)
 800cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc2:	e7db      	b.n	800cd7c <__ieee754_rem_pio2+0x74>
 800cdc4:	f7f3 fa72 	bl	80002ac <__adddf3>
 800cdc8:	45b0      	cmp	r8, r6
 800cdca:	4604      	mov	r4, r0
 800cdcc:	460d      	mov	r5, r1
 800cdce:	d016      	beq.n	800cdfe <__ieee754_rem_pio2+0xf6>
 800cdd0:	a38f      	add	r3, pc, #572	; (adr r3, 800d010 <__ieee754_rem_pio2+0x308>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f7f3 fa69 	bl	80002ac <__adddf3>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9ca 2300 	strd	r2, r3, [sl]
 800cde2:	4620      	mov	r0, r4
 800cde4:	4629      	mov	r1, r5
 800cde6:	f7f3 fa5f 	bl	80002a8 <__aeabi_dsub>
 800cdea:	a389      	add	r3, pc, #548	; (adr r3, 800d010 <__ieee754_rem_pio2+0x308>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	f7f3 fa5c 	bl	80002ac <__adddf3>
 800cdf4:	f04f 3bff 	mov.w	fp, #4294967295
 800cdf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdfc:	e7c4      	b.n	800cd88 <__ieee754_rem_pio2+0x80>
 800cdfe:	a386      	add	r3, pc, #536	; (adr r3, 800d018 <__ieee754_rem_pio2+0x310>)
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	f7f3 fa52 	bl	80002ac <__adddf3>
 800ce08:	a385      	add	r3, pc, #532	; (adr r3, 800d020 <__ieee754_rem_pio2+0x318>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	4604      	mov	r4, r0
 800ce10:	460d      	mov	r5, r1
 800ce12:	f7f3 fa4b 	bl	80002ac <__adddf3>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fa41 	bl	80002a8 <__aeabi_dsub>
 800ce26:	a37e      	add	r3, pc, #504	; (adr r3, 800d020 <__ieee754_rem_pio2+0x318>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	e7e0      	b.n	800cdf0 <__ieee754_rem_pio2+0xe8>
 800ce2e:	4b87      	ldr	r3, [pc, #540]	; (800d04c <__ieee754_rem_pio2+0x344>)
 800ce30:	4598      	cmp	r8, r3
 800ce32:	f300 80d8 	bgt.w	800cfe6 <__ieee754_rem_pio2+0x2de>
 800ce36:	f000 f96d 	bl	800d114 <fabs>
 800ce3a:	ec55 4b10 	vmov	r4, r5, d0
 800ce3e:	ee10 0a10 	vmov	r0, s0
 800ce42:	a379      	add	r3, pc, #484	; (adr r3, 800d028 <__ieee754_rem_pio2+0x320>)
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fbe5 	bl	8000618 <__aeabi_dmul>
 800ce4e:	4b80      	ldr	r3, [pc, #512]	; (800d050 <__ieee754_rem_pio2+0x348>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	f7f3 fa2b 	bl	80002ac <__adddf3>
 800ce56:	f7f3 fe8f 	bl	8000b78 <__aeabi_d2iz>
 800ce5a:	4683      	mov	fp, r0
 800ce5c:	f7f3 fb72 	bl	8000544 <__aeabi_i2d>
 800ce60:	4602      	mov	r2, r0
 800ce62:	460b      	mov	r3, r1
 800ce64:	ec43 2b18 	vmov	d8, r2, r3
 800ce68:	a367      	add	r3, pc, #412	; (adr r3, 800d008 <__ieee754_rem_pio2+0x300>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fbd3 	bl	8000618 <__aeabi_dmul>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4620      	mov	r0, r4
 800ce78:	4629      	mov	r1, r5
 800ce7a:	f7f3 fa15 	bl	80002a8 <__aeabi_dsub>
 800ce7e:	a364      	add	r3, pc, #400	; (adr r3, 800d010 <__ieee754_rem_pio2+0x308>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	4606      	mov	r6, r0
 800ce86:	460f      	mov	r7, r1
 800ce88:	ec51 0b18 	vmov	r0, r1, d8
 800ce8c:	f7f3 fbc4 	bl	8000618 <__aeabi_dmul>
 800ce90:	f1bb 0f1f 	cmp.w	fp, #31
 800ce94:	4604      	mov	r4, r0
 800ce96:	460d      	mov	r5, r1
 800ce98:	dc0d      	bgt.n	800ceb6 <__ieee754_rem_pio2+0x1ae>
 800ce9a:	4b6e      	ldr	r3, [pc, #440]	; (800d054 <__ieee754_rem_pio2+0x34c>)
 800ce9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea4:	4543      	cmp	r3, r8
 800cea6:	d006      	beq.n	800ceb6 <__ieee754_rem_pio2+0x1ae>
 800cea8:	4622      	mov	r2, r4
 800ceaa:	462b      	mov	r3, r5
 800ceac:	4630      	mov	r0, r6
 800ceae:	4639      	mov	r1, r7
 800ceb0:	f7f3 f9fa 	bl	80002a8 <__aeabi_dsub>
 800ceb4:	e00e      	b.n	800ced4 <__ieee754_rem_pio2+0x1cc>
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	4622      	mov	r2, r4
 800ceba:	4630      	mov	r0, r6
 800cebc:	4639      	mov	r1, r7
 800cebe:	f7f3 f9f3 	bl	80002a8 <__aeabi_dsub>
 800cec2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cec6:	9303      	str	r3, [sp, #12]
 800cec8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cecc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ced0:	2b10      	cmp	r3, #16
 800ced2:	dc02      	bgt.n	800ceda <__ieee754_rem_pio2+0x1d2>
 800ced4:	e9ca 0100 	strd	r0, r1, [sl]
 800ced8:	e039      	b.n	800cf4e <__ieee754_rem_pio2+0x246>
 800ceda:	a34f      	add	r3, pc, #316	; (adr r3, 800d018 <__ieee754_rem_pio2+0x310>)
 800cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee0:	ec51 0b18 	vmov	r0, r1, d8
 800cee4:	f7f3 fb98 	bl	8000618 <__aeabi_dmul>
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4630      	mov	r0, r6
 800cef2:	4639      	mov	r1, r7
 800cef4:	f7f3 f9d8 	bl	80002a8 <__aeabi_dsub>
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4680      	mov	r8, r0
 800cefe:	4689      	mov	r9, r1
 800cf00:	4630      	mov	r0, r6
 800cf02:	4639      	mov	r1, r7
 800cf04:	f7f3 f9d0 	bl	80002a8 <__aeabi_dsub>
 800cf08:	4622      	mov	r2, r4
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	f7f3 f9cc 	bl	80002a8 <__aeabi_dsub>
 800cf10:	a343      	add	r3, pc, #268	; (adr r3, 800d020 <__ieee754_rem_pio2+0x318>)
 800cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf16:	4604      	mov	r4, r0
 800cf18:	460d      	mov	r5, r1
 800cf1a:	ec51 0b18 	vmov	r0, r1, d8
 800cf1e:	f7f3 fb7b 	bl	8000618 <__aeabi_dmul>
 800cf22:	4622      	mov	r2, r4
 800cf24:	462b      	mov	r3, r5
 800cf26:	f7f3 f9bf 	bl	80002a8 <__aeabi_dsub>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	4640      	mov	r0, r8
 800cf34:	4649      	mov	r1, r9
 800cf36:	f7f3 f9b7 	bl	80002a8 <__aeabi_dsub>
 800cf3a:	9a03      	ldr	r2, [sp, #12]
 800cf3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	2b31      	cmp	r3, #49	; 0x31
 800cf44:	dc24      	bgt.n	800cf90 <__ieee754_rem_pio2+0x288>
 800cf46:	e9ca 0100 	strd	r0, r1, [sl]
 800cf4a:	4646      	mov	r6, r8
 800cf4c:	464f      	mov	r7, r9
 800cf4e:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf52:	4630      	mov	r0, r6
 800cf54:	4642      	mov	r2, r8
 800cf56:	464b      	mov	r3, r9
 800cf58:	4639      	mov	r1, r7
 800cf5a:	f7f3 f9a5 	bl	80002a8 <__aeabi_dsub>
 800cf5e:	462b      	mov	r3, r5
 800cf60:	4622      	mov	r2, r4
 800cf62:	f7f3 f9a1 	bl	80002a8 <__aeabi_dsub>
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cf6e:	f6bf af0b 	bge.w	800cd88 <__ieee754_rem_pio2+0x80>
 800cf72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cf76:	f8ca 3004 	str.w	r3, [sl, #4]
 800cf7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf7e:	f8ca 8000 	str.w	r8, [sl]
 800cf82:	f8ca 0008 	str.w	r0, [sl, #8]
 800cf86:	f8ca 300c 	str.w	r3, [sl, #12]
 800cf8a:	f1cb 0b00 	rsb	fp, fp, #0
 800cf8e:	e6fb      	b.n	800cd88 <__ieee754_rem_pio2+0x80>
 800cf90:	a327      	add	r3, pc, #156	; (adr r3, 800d030 <__ieee754_rem_pio2+0x328>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	ec51 0b18 	vmov	r0, r1, d8
 800cf9a:	f7f3 fb3d 	bl	8000618 <__aeabi_dmul>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4640      	mov	r0, r8
 800cfa8:	4649      	mov	r1, r9
 800cfaa:	f7f3 f97d 	bl	80002a8 <__aeabi_dsub>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460f      	mov	r7, r1
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	4649      	mov	r1, r9
 800cfba:	f7f3 f975 	bl	80002a8 <__aeabi_dsub>
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	f7f3 f971 	bl	80002a8 <__aeabi_dsub>
 800cfc6:	a31c      	add	r3, pc, #112	; (adr r3, 800d038 <__ieee754_rem_pio2+0x330>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	ec51 0b18 	vmov	r0, r1, d8
 800cfd4:	f7f3 fb20 	bl	8000618 <__aeabi_dmul>
 800cfd8:	4622      	mov	r2, r4
 800cfda:	462b      	mov	r3, r5
 800cfdc:	f7f3 f964 	bl	80002a8 <__aeabi_dsub>
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	460d      	mov	r5, r1
 800cfe4:	e760      	b.n	800cea8 <__ieee754_rem_pio2+0x1a0>
 800cfe6:	4b1c      	ldr	r3, [pc, #112]	; (800d058 <__ieee754_rem_pio2+0x350>)
 800cfe8:	4598      	cmp	r8, r3
 800cfea:	dd37      	ble.n	800d05c <__ieee754_rem_pio2+0x354>
 800cfec:	ee10 2a10 	vmov	r2, s0
 800cff0:	462b      	mov	r3, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	f7f3 f957 	bl	80002a8 <__aeabi_dsub>
 800cffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cffe:	e9ca 0100 	strd	r0, r1, [sl]
 800d002:	e695      	b.n	800cd30 <__ieee754_rem_pio2+0x28>
 800d004:	f3af 8000 	nop.w
 800d008:	54400000 	.word	0x54400000
 800d00c:	3ff921fb 	.word	0x3ff921fb
 800d010:	1a626331 	.word	0x1a626331
 800d014:	3dd0b461 	.word	0x3dd0b461
 800d018:	1a600000 	.word	0x1a600000
 800d01c:	3dd0b461 	.word	0x3dd0b461
 800d020:	2e037073 	.word	0x2e037073
 800d024:	3ba3198a 	.word	0x3ba3198a
 800d028:	6dc9c883 	.word	0x6dc9c883
 800d02c:	3fe45f30 	.word	0x3fe45f30
 800d030:	2e000000 	.word	0x2e000000
 800d034:	3ba3198a 	.word	0x3ba3198a
 800d038:	252049c1 	.word	0x252049c1
 800d03c:	397b839a 	.word	0x397b839a
 800d040:	3fe921fb 	.word	0x3fe921fb
 800d044:	4002d97b 	.word	0x4002d97b
 800d048:	3ff921fb 	.word	0x3ff921fb
 800d04c:	413921fb 	.word	0x413921fb
 800d050:	3fe00000 	.word	0x3fe00000
 800d054:	0800f9b0 	.word	0x0800f9b0
 800d058:	7fefffff 	.word	0x7fefffff
 800d05c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d060:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d064:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d068:	4620      	mov	r0, r4
 800d06a:	460d      	mov	r5, r1
 800d06c:	f7f3 fd84 	bl	8000b78 <__aeabi_d2iz>
 800d070:	f7f3 fa68 	bl	8000544 <__aeabi_i2d>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4620      	mov	r0, r4
 800d07a:	4629      	mov	r1, r5
 800d07c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d080:	f7f3 f912 	bl	80002a8 <__aeabi_dsub>
 800d084:	4b21      	ldr	r3, [pc, #132]	; (800d10c <__ieee754_rem_pio2+0x404>)
 800d086:	2200      	movs	r2, #0
 800d088:	f7f3 fac6 	bl	8000618 <__aeabi_dmul>
 800d08c:	460d      	mov	r5, r1
 800d08e:	4604      	mov	r4, r0
 800d090:	f7f3 fd72 	bl	8000b78 <__aeabi_d2iz>
 800d094:	f7f3 fa56 	bl	8000544 <__aeabi_i2d>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4620      	mov	r0, r4
 800d09e:	4629      	mov	r1, r5
 800d0a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d0a4:	f7f3 f900 	bl	80002a8 <__aeabi_dsub>
 800d0a8:	4b18      	ldr	r3, [pc, #96]	; (800d10c <__ieee754_rem_pio2+0x404>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f7f3 fab4 	bl	8000618 <__aeabi_dmul>
 800d0b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d0b8:	2703      	movs	r7, #3
 800d0ba:	2400      	movs	r4, #0
 800d0bc:	2500      	movs	r5, #0
 800d0be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	46b9      	mov	r9, r7
 800d0c8:	3f01      	subs	r7, #1
 800d0ca:	f7f3 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d1f5      	bne.n	800d0be <__ieee754_rem_pio2+0x3b6>
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <__ieee754_rem_pio2+0x408>)
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	4632      	mov	r2, r6
 800d0dc:	464b      	mov	r3, r9
 800d0de:	4651      	mov	r1, sl
 800d0e0:	a804      	add	r0, sp, #16
 800d0e2:	f000 f821 	bl	800d128 <__kernel_rem_pio2>
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	4683      	mov	fp, r0
 800d0ec:	f6bf ae4c 	bge.w	800cd88 <__ieee754_rem_pio2+0x80>
 800d0f0:	e9da 2100 	ldrd	r2, r1, [sl]
 800d0f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0f8:	e9ca 2300 	strd	r2, r3, [sl]
 800d0fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d104:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d108:	e73f      	b.n	800cf8a <__ieee754_rem_pio2+0x282>
 800d10a:	bf00      	nop
 800d10c:	41700000 	.word	0x41700000
 800d110:	0800fa30 	.word	0x0800fa30

0800d114 <fabs>:
 800d114:	ec51 0b10 	vmov	r0, r1, d0
 800d118:	ee10 2a10 	vmov	r2, s0
 800d11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d120:	ec43 2b10 	vmov	d0, r2, r3
 800d124:	4770      	bx	lr
	...

0800d128 <__kernel_rem_pio2>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	ed2d 8b02 	vpush	{d8}
 800d130:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d134:	f112 0f14 	cmn.w	r2, #20
 800d138:	9306      	str	r3, [sp, #24]
 800d13a:	9104      	str	r1, [sp, #16]
 800d13c:	4bc2      	ldr	r3, [pc, #776]	; (800d448 <__kernel_rem_pio2+0x320>)
 800d13e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d140:	9009      	str	r0, [sp, #36]	; 0x24
 800d142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	9b06      	ldr	r3, [sp, #24]
 800d14a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d14e:	bfa8      	it	ge
 800d150:	1ed4      	subge	r4, r2, #3
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	bfb2      	itee	lt
 800d156:	2400      	movlt	r4, #0
 800d158:	2318      	movge	r3, #24
 800d15a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d15e:	f06f 0317 	mvn.w	r3, #23
 800d162:	fb04 3303 	mla	r3, r4, r3, r3
 800d166:	eb03 0a02 	add.w	sl, r3, r2
 800d16a:	9b00      	ldr	r3, [sp, #0]
 800d16c:	9a05      	ldr	r2, [sp, #20]
 800d16e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d438 <__kernel_rem_pio2+0x310>
 800d172:	eb03 0802 	add.w	r8, r3, r2
 800d176:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d178:	1aa7      	subs	r7, r4, r2
 800d17a:	ae20      	add	r6, sp, #128	; 0x80
 800d17c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d180:	2500      	movs	r5, #0
 800d182:	4545      	cmp	r5, r8
 800d184:	dd13      	ble.n	800d1ae <__kernel_rem_pio2+0x86>
 800d186:	9b06      	ldr	r3, [sp, #24]
 800d188:	aa20      	add	r2, sp, #128	; 0x80
 800d18a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d18e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d192:	f04f 0800 	mov.w	r8, #0
 800d196:	9b00      	ldr	r3, [sp, #0]
 800d198:	4598      	cmp	r8, r3
 800d19a:	dc31      	bgt.n	800d200 <__kernel_rem_pio2+0xd8>
 800d19c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d438 <__kernel_rem_pio2+0x310>
 800d1a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d1a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1a8:	462f      	mov	r7, r5
 800d1aa:	2600      	movs	r6, #0
 800d1ac:	e01b      	b.n	800d1e6 <__kernel_rem_pio2+0xbe>
 800d1ae:	42ef      	cmn	r7, r5
 800d1b0:	d407      	bmi.n	800d1c2 <__kernel_rem_pio2+0x9a>
 800d1b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d1b6:	f7f3 f9c5 	bl	8000544 <__aeabi_i2d>
 800d1ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d1be:	3501      	adds	r5, #1
 800d1c0:	e7df      	b.n	800d182 <__kernel_rem_pio2+0x5a>
 800d1c2:	ec51 0b18 	vmov	r0, r1, d8
 800d1c6:	e7f8      	b.n	800d1ba <__kernel_rem_pio2+0x92>
 800d1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d1d0:	f7f3 fa22 	bl	8000618 <__aeabi_dmul>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1dc:	f7f3 f866 	bl	80002ac <__adddf3>
 800d1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1e4:	3601      	adds	r6, #1
 800d1e6:	9b05      	ldr	r3, [sp, #20]
 800d1e8:	429e      	cmp	r6, r3
 800d1ea:	f1a7 0708 	sub.w	r7, r7, #8
 800d1ee:	ddeb      	ble.n	800d1c8 <__kernel_rem_pio2+0xa0>
 800d1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1f4:	f108 0801 	add.w	r8, r8, #1
 800d1f8:	ecab 7b02 	vstmia	fp!, {d7}
 800d1fc:	3508      	adds	r5, #8
 800d1fe:	e7ca      	b.n	800d196 <__kernel_rem_pio2+0x6e>
 800d200:	9b00      	ldr	r3, [sp, #0]
 800d202:	aa0c      	add	r2, sp, #48	; 0x30
 800d204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d208:	930b      	str	r3, [sp, #44]	; 0x2c
 800d20a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d20c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d210:	9c00      	ldr	r4, [sp, #0]
 800d212:	930a      	str	r3, [sp, #40]	; 0x28
 800d214:	00e3      	lsls	r3, r4, #3
 800d216:	9308      	str	r3, [sp, #32]
 800d218:	ab98      	add	r3, sp, #608	; 0x260
 800d21a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d21e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d222:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d226:	ab70      	add	r3, sp, #448	; 0x1c0
 800d228:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d22c:	46c3      	mov	fp, r8
 800d22e:	46a1      	mov	r9, r4
 800d230:	f1b9 0f00 	cmp.w	r9, #0
 800d234:	f1a5 0508 	sub.w	r5, r5, #8
 800d238:	dc77      	bgt.n	800d32a <__kernel_rem_pio2+0x202>
 800d23a:	ec47 6b10 	vmov	d0, r6, r7
 800d23e:	4650      	mov	r0, sl
 800d240:	f000 fac2 	bl	800d7c8 <scalbn>
 800d244:	ec57 6b10 	vmov	r6, r7, d0
 800d248:	2200      	movs	r2, #0
 800d24a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d24e:	ee10 0a10 	vmov	r0, s0
 800d252:	4639      	mov	r1, r7
 800d254:	f7f3 f9e0 	bl	8000618 <__aeabi_dmul>
 800d258:	ec41 0b10 	vmov	d0, r0, r1
 800d25c:	f000 fb34 	bl	800d8c8 <floor>
 800d260:	4b7a      	ldr	r3, [pc, #488]	; (800d44c <__kernel_rem_pio2+0x324>)
 800d262:	ec51 0b10 	vmov	r0, r1, d0
 800d266:	2200      	movs	r2, #0
 800d268:	f7f3 f9d6 	bl	8000618 <__aeabi_dmul>
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4630      	mov	r0, r6
 800d272:	4639      	mov	r1, r7
 800d274:	f7f3 f818 	bl	80002a8 <__aeabi_dsub>
 800d278:	460f      	mov	r7, r1
 800d27a:	4606      	mov	r6, r0
 800d27c:	f7f3 fc7c 	bl	8000b78 <__aeabi_d2iz>
 800d280:	9002      	str	r0, [sp, #8]
 800d282:	f7f3 f95f 	bl	8000544 <__aeabi_i2d>
 800d286:	4602      	mov	r2, r0
 800d288:	460b      	mov	r3, r1
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	f7f3 f80b 	bl	80002a8 <__aeabi_dsub>
 800d292:	f1ba 0f00 	cmp.w	sl, #0
 800d296:	4606      	mov	r6, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	dd6d      	ble.n	800d378 <__kernel_rem_pio2+0x250>
 800d29c:	1e61      	subs	r1, r4, #1
 800d29e:	ab0c      	add	r3, sp, #48	; 0x30
 800d2a0:	9d02      	ldr	r5, [sp, #8]
 800d2a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2a6:	f1ca 0018 	rsb	r0, sl, #24
 800d2aa:	fa43 f200 	asr.w	r2, r3, r0
 800d2ae:	4415      	add	r5, r2
 800d2b0:	4082      	lsls	r2, r0
 800d2b2:	1a9b      	subs	r3, r3, r2
 800d2b4:	aa0c      	add	r2, sp, #48	; 0x30
 800d2b6:	9502      	str	r5, [sp, #8]
 800d2b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d2bc:	f1ca 0217 	rsb	r2, sl, #23
 800d2c0:	fa43 fb02 	asr.w	fp, r3, r2
 800d2c4:	f1bb 0f00 	cmp.w	fp, #0
 800d2c8:	dd65      	ble.n	800d396 <__kernel_rem_pio2+0x26e>
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	9302      	str	r3, [sp, #8]
 800d2d2:	4615      	mov	r5, r2
 800d2d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d2d8:	4294      	cmp	r4, r2
 800d2da:	f300 809f 	bgt.w	800d41c <__kernel_rem_pio2+0x2f4>
 800d2de:	f1ba 0f00 	cmp.w	sl, #0
 800d2e2:	dd07      	ble.n	800d2f4 <__kernel_rem_pio2+0x1cc>
 800d2e4:	f1ba 0f01 	cmp.w	sl, #1
 800d2e8:	f000 80c1 	beq.w	800d46e <__kernel_rem_pio2+0x346>
 800d2ec:	f1ba 0f02 	cmp.w	sl, #2
 800d2f0:	f000 80c7 	beq.w	800d482 <__kernel_rem_pio2+0x35a>
 800d2f4:	f1bb 0f02 	cmp.w	fp, #2
 800d2f8:	d14d      	bne.n	800d396 <__kernel_rem_pio2+0x26e>
 800d2fa:	4632      	mov	r2, r6
 800d2fc:	463b      	mov	r3, r7
 800d2fe:	4954      	ldr	r1, [pc, #336]	; (800d450 <__kernel_rem_pio2+0x328>)
 800d300:	2000      	movs	r0, #0
 800d302:	f7f2 ffd1 	bl	80002a8 <__aeabi_dsub>
 800d306:	4606      	mov	r6, r0
 800d308:	460f      	mov	r7, r1
 800d30a:	2d00      	cmp	r5, #0
 800d30c:	d043      	beq.n	800d396 <__kernel_rem_pio2+0x26e>
 800d30e:	4650      	mov	r0, sl
 800d310:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d440 <__kernel_rem_pio2+0x318>
 800d314:	f000 fa58 	bl	800d7c8 <scalbn>
 800d318:	4630      	mov	r0, r6
 800d31a:	4639      	mov	r1, r7
 800d31c:	ec53 2b10 	vmov	r2, r3, d0
 800d320:	f7f2 ffc2 	bl	80002a8 <__aeabi_dsub>
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	e035      	b.n	800d396 <__kernel_rem_pio2+0x26e>
 800d32a:	4b4a      	ldr	r3, [pc, #296]	; (800d454 <__kernel_rem_pio2+0x32c>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	4630      	mov	r0, r6
 800d330:	4639      	mov	r1, r7
 800d332:	f7f3 f971 	bl	8000618 <__aeabi_dmul>
 800d336:	f7f3 fc1f 	bl	8000b78 <__aeabi_d2iz>
 800d33a:	f7f3 f903 	bl	8000544 <__aeabi_i2d>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	ec43 2b18 	vmov	d8, r2, r3
 800d346:	4b44      	ldr	r3, [pc, #272]	; (800d458 <__kernel_rem_pio2+0x330>)
 800d348:	2200      	movs	r2, #0
 800d34a:	f7f3 f965 	bl	8000618 <__aeabi_dmul>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	4630      	mov	r0, r6
 800d354:	4639      	mov	r1, r7
 800d356:	f7f2 ffa7 	bl	80002a8 <__aeabi_dsub>
 800d35a:	f7f3 fc0d 	bl	8000b78 <__aeabi_d2iz>
 800d35e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d362:	f84b 0b04 	str.w	r0, [fp], #4
 800d366:	ec51 0b18 	vmov	r0, r1, d8
 800d36a:	f7f2 ff9f 	bl	80002ac <__adddf3>
 800d36e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	e75b      	b.n	800d230 <__kernel_rem_pio2+0x108>
 800d378:	d106      	bne.n	800d388 <__kernel_rem_pio2+0x260>
 800d37a:	1e63      	subs	r3, r4, #1
 800d37c:	aa0c      	add	r2, sp, #48	; 0x30
 800d37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d382:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d386:	e79d      	b.n	800d2c4 <__kernel_rem_pio2+0x19c>
 800d388:	4b34      	ldr	r3, [pc, #208]	; (800d45c <__kernel_rem_pio2+0x334>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	f7f3 fbca 	bl	8000b24 <__aeabi_dcmpge>
 800d390:	2800      	cmp	r0, #0
 800d392:	d140      	bne.n	800d416 <__kernel_rem_pio2+0x2ee>
 800d394:	4683      	mov	fp, r0
 800d396:	2200      	movs	r2, #0
 800d398:	2300      	movs	r3, #0
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f3 fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f000 80c1 	beq.w	800d52a <__kernel_rem_pio2+0x402>
 800d3a8:	1e65      	subs	r5, r4, #1
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	9900      	ldr	r1, [sp, #0]
 800d3b0:	428b      	cmp	r3, r1
 800d3b2:	da6d      	bge.n	800d490 <__kernel_rem_pio2+0x368>
 800d3b4:	2a00      	cmp	r2, #0
 800d3b6:	f000 808a 	beq.w	800d4ce <__kernel_rem_pio2+0x3a6>
 800d3ba:	ab0c      	add	r3, sp, #48	; 0x30
 800d3bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d3c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f000 80ae 	beq.w	800d526 <__kernel_rem_pio2+0x3fe>
 800d3ca:	4650      	mov	r0, sl
 800d3cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d440 <__kernel_rem_pio2+0x318>
 800d3d0:	f000 f9fa 	bl	800d7c8 <scalbn>
 800d3d4:	1c6b      	adds	r3, r5, #1
 800d3d6:	00da      	lsls	r2, r3, #3
 800d3d8:	9205      	str	r2, [sp, #20]
 800d3da:	ec57 6b10 	vmov	r6, r7, d0
 800d3de:	aa70      	add	r2, sp, #448	; 0x1c0
 800d3e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d454 <__kernel_rem_pio2+0x32c>
 800d3e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d3e8:	462c      	mov	r4, r5
 800d3ea:	f04f 0800 	mov.w	r8, #0
 800d3ee:	2c00      	cmp	r4, #0
 800d3f0:	f280 80d4 	bge.w	800d59c <__kernel_rem_pio2+0x474>
 800d3f4:	462c      	mov	r4, r5
 800d3f6:	2c00      	cmp	r4, #0
 800d3f8:	f2c0 8102 	blt.w	800d600 <__kernel_rem_pio2+0x4d8>
 800d3fc:	4b18      	ldr	r3, [pc, #96]	; (800d460 <__kernel_rem_pio2+0x338>)
 800d3fe:	461e      	mov	r6, r3
 800d400:	ab70      	add	r3, sp, #448	; 0x1c0
 800d402:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d406:	1b2b      	subs	r3, r5, r4
 800d408:	f04f 0900 	mov.w	r9, #0
 800d40c:	f04f 0a00 	mov.w	sl, #0
 800d410:	2700      	movs	r7, #0
 800d412:	9306      	str	r3, [sp, #24]
 800d414:	e0e6      	b.n	800d5e4 <__kernel_rem_pio2+0x4bc>
 800d416:	f04f 0b02 	mov.w	fp, #2
 800d41a:	e756      	b.n	800d2ca <__kernel_rem_pio2+0x1a2>
 800d41c:	f8d8 3000 	ldr.w	r3, [r8]
 800d420:	bb05      	cbnz	r5, 800d464 <__kernel_rem_pio2+0x33c>
 800d422:	b123      	cbz	r3, 800d42e <__kernel_rem_pio2+0x306>
 800d424:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d428:	f8c8 3000 	str.w	r3, [r8]
 800d42c:	2301      	movs	r3, #1
 800d42e:	3201      	adds	r2, #1
 800d430:	f108 0804 	add.w	r8, r8, #4
 800d434:	461d      	mov	r5, r3
 800d436:	e74f      	b.n	800d2d8 <__kernel_rem_pio2+0x1b0>
	...
 800d444:	3ff00000 	.word	0x3ff00000
 800d448:	0800fb78 	.word	0x0800fb78
 800d44c:	40200000 	.word	0x40200000
 800d450:	3ff00000 	.word	0x3ff00000
 800d454:	3e700000 	.word	0x3e700000
 800d458:	41700000 	.word	0x41700000
 800d45c:	3fe00000 	.word	0x3fe00000
 800d460:	0800fb38 	.word	0x0800fb38
 800d464:	1acb      	subs	r3, r1, r3
 800d466:	f8c8 3000 	str.w	r3, [r8]
 800d46a:	462b      	mov	r3, r5
 800d46c:	e7df      	b.n	800d42e <__kernel_rem_pio2+0x306>
 800d46e:	1e62      	subs	r2, r4, #1
 800d470:	ab0c      	add	r3, sp, #48	; 0x30
 800d472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d476:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d47a:	a90c      	add	r1, sp, #48	; 0x30
 800d47c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d480:	e738      	b.n	800d2f4 <__kernel_rem_pio2+0x1cc>
 800d482:	1e62      	subs	r2, r4, #1
 800d484:	ab0c      	add	r3, sp, #48	; 0x30
 800d486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d48a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d48e:	e7f4      	b.n	800d47a <__kernel_rem_pio2+0x352>
 800d490:	a90c      	add	r1, sp, #48	; 0x30
 800d492:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d496:	3b01      	subs	r3, #1
 800d498:	430a      	orrs	r2, r1
 800d49a:	e788      	b.n	800d3ae <__kernel_rem_pio2+0x286>
 800d49c:	3301      	adds	r3, #1
 800d49e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d4a2:	2900      	cmp	r1, #0
 800d4a4:	d0fa      	beq.n	800d49c <__kernel_rem_pio2+0x374>
 800d4a6:	9a08      	ldr	r2, [sp, #32]
 800d4a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d4ac:	446a      	add	r2, sp
 800d4ae:	3a98      	subs	r2, #152	; 0x98
 800d4b0:	9208      	str	r2, [sp, #32]
 800d4b2:	9a06      	ldr	r2, [sp, #24]
 800d4b4:	a920      	add	r1, sp, #128	; 0x80
 800d4b6:	18a2      	adds	r2, r4, r2
 800d4b8:	18e3      	adds	r3, r4, r3
 800d4ba:	f104 0801 	add.w	r8, r4, #1
 800d4be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d4c2:	9302      	str	r3, [sp, #8]
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	4543      	cmp	r3, r8
 800d4c8:	da04      	bge.n	800d4d4 <__kernel_rem_pio2+0x3ac>
 800d4ca:	461c      	mov	r4, r3
 800d4cc:	e6a2      	b.n	800d214 <__kernel_rem_pio2+0xec>
 800d4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e7e4      	b.n	800d49e <__kernel_rem_pio2+0x376>
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d4da:	f7f3 f833 	bl	8000544 <__aeabi_i2d>
 800d4de:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	46ab      	mov	fp, r5
 800d4e6:	461c      	mov	r4, r3
 800d4e8:	f04f 0900 	mov.w	r9, #0
 800d4ec:	2600      	movs	r6, #0
 800d4ee:	2700      	movs	r7, #0
 800d4f0:	9b05      	ldr	r3, [sp, #20]
 800d4f2:	4599      	cmp	r9, r3
 800d4f4:	dd06      	ble.n	800d504 <__kernel_rem_pio2+0x3dc>
 800d4f6:	9b08      	ldr	r3, [sp, #32]
 800d4f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d4fc:	f108 0801 	add.w	r8, r8, #1
 800d500:	9308      	str	r3, [sp, #32]
 800d502:	e7df      	b.n	800d4c4 <__kernel_rem_pio2+0x39c>
 800d504:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d508:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d50c:	f7f3 f884 	bl	8000618 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4630      	mov	r0, r6
 800d516:	4639      	mov	r1, r7
 800d518:	f7f2 fec8 	bl	80002ac <__adddf3>
 800d51c:	f109 0901 	add.w	r9, r9, #1
 800d520:	4606      	mov	r6, r0
 800d522:	460f      	mov	r7, r1
 800d524:	e7e4      	b.n	800d4f0 <__kernel_rem_pio2+0x3c8>
 800d526:	3d01      	subs	r5, #1
 800d528:	e747      	b.n	800d3ba <__kernel_rem_pio2+0x292>
 800d52a:	ec47 6b10 	vmov	d0, r6, r7
 800d52e:	f1ca 0000 	rsb	r0, sl, #0
 800d532:	f000 f949 	bl	800d7c8 <scalbn>
 800d536:	ec57 6b10 	vmov	r6, r7, d0
 800d53a:	4ba0      	ldr	r3, [pc, #640]	; (800d7bc <__kernel_rem_pio2+0x694>)
 800d53c:	ee10 0a10 	vmov	r0, s0
 800d540:	2200      	movs	r2, #0
 800d542:	4639      	mov	r1, r7
 800d544:	f7f3 faee 	bl	8000b24 <__aeabi_dcmpge>
 800d548:	b1f8      	cbz	r0, 800d58a <__kernel_rem_pio2+0x462>
 800d54a:	4b9d      	ldr	r3, [pc, #628]	; (800d7c0 <__kernel_rem_pio2+0x698>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	f7f3 f861 	bl	8000618 <__aeabi_dmul>
 800d556:	f7f3 fb0f 	bl	8000b78 <__aeabi_d2iz>
 800d55a:	4680      	mov	r8, r0
 800d55c:	f7f2 fff2 	bl	8000544 <__aeabi_i2d>
 800d560:	4b96      	ldr	r3, [pc, #600]	; (800d7bc <__kernel_rem_pio2+0x694>)
 800d562:	2200      	movs	r2, #0
 800d564:	f7f3 f858 	bl	8000618 <__aeabi_dmul>
 800d568:	460b      	mov	r3, r1
 800d56a:	4602      	mov	r2, r0
 800d56c:	4639      	mov	r1, r7
 800d56e:	4630      	mov	r0, r6
 800d570:	f7f2 fe9a 	bl	80002a8 <__aeabi_dsub>
 800d574:	f7f3 fb00 	bl	8000b78 <__aeabi_d2iz>
 800d578:	1c65      	adds	r5, r4, #1
 800d57a:	ab0c      	add	r3, sp, #48	; 0x30
 800d57c:	f10a 0a18 	add.w	sl, sl, #24
 800d580:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d584:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d588:	e71f      	b.n	800d3ca <__kernel_rem_pio2+0x2a2>
 800d58a:	4630      	mov	r0, r6
 800d58c:	4639      	mov	r1, r7
 800d58e:	f7f3 faf3 	bl	8000b78 <__aeabi_d2iz>
 800d592:	ab0c      	add	r3, sp, #48	; 0x30
 800d594:	4625      	mov	r5, r4
 800d596:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d59a:	e716      	b.n	800d3ca <__kernel_rem_pio2+0x2a2>
 800d59c:	ab0c      	add	r3, sp, #48	; 0x30
 800d59e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d5a2:	f7f2 ffcf 	bl	8000544 <__aeabi_i2d>
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	463b      	mov	r3, r7
 800d5aa:	f7f3 f835 	bl	8000618 <__aeabi_dmul>
 800d5ae:	4642      	mov	r2, r8
 800d5b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d5b4:	464b      	mov	r3, r9
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	4639      	mov	r1, r7
 800d5ba:	f7f3 f82d 	bl	8000618 <__aeabi_dmul>
 800d5be:	3c01      	subs	r4, #1
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	460f      	mov	r7, r1
 800d5c4:	e713      	b.n	800d3ee <__kernel_rem_pio2+0x2c6>
 800d5c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d5ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d5ce:	f7f3 f823 	bl	8000618 <__aeabi_dmul>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4648      	mov	r0, r9
 800d5d8:	4651      	mov	r1, sl
 800d5da:	f7f2 fe67 	bl	80002ac <__adddf3>
 800d5de:	3701      	adds	r7, #1
 800d5e0:	4681      	mov	r9, r0
 800d5e2:	468a      	mov	sl, r1
 800d5e4:	9b00      	ldr	r3, [sp, #0]
 800d5e6:	429f      	cmp	r7, r3
 800d5e8:	dc02      	bgt.n	800d5f0 <__kernel_rem_pio2+0x4c8>
 800d5ea:	9b06      	ldr	r3, [sp, #24]
 800d5ec:	429f      	cmp	r7, r3
 800d5ee:	ddea      	ble.n	800d5c6 <__kernel_rem_pio2+0x49e>
 800d5f0:	9a06      	ldr	r2, [sp, #24]
 800d5f2:	ab48      	add	r3, sp, #288	; 0x120
 800d5f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d5f8:	e9c6 9a00 	strd	r9, sl, [r6]
 800d5fc:	3c01      	subs	r4, #1
 800d5fe:	e6fa      	b.n	800d3f6 <__kernel_rem_pio2+0x2ce>
 800d600:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d602:	2b02      	cmp	r3, #2
 800d604:	dc0b      	bgt.n	800d61e <__kernel_rem_pio2+0x4f6>
 800d606:	2b00      	cmp	r3, #0
 800d608:	dc39      	bgt.n	800d67e <__kernel_rem_pio2+0x556>
 800d60a:	d05d      	beq.n	800d6c8 <__kernel_rem_pio2+0x5a0>
 800d60c:	9b02      	ldr	r3, [sp, #8]
 800d60e:	f003 0007 	and.w	r0, r3, #7
 800d612:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d616:	ecbd 8b02 	vpop	{d8}
 800d61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d620:	2b03      	cmp	r3, #3
 800d622:	d1f3      	bne.n	800d60c <__kernel_rem_pio2+0x4e4>
 800d624:	9b05      	ldr	r3, [sp, #20]
 800d626:	9500      	str	r5, [sp, #0]
 800d628:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d62c:	eb0d 0403 	add.w	r4, sp, r3
 800d630:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d634:	46a2      	mov	sl, r4
 800d636:	9b00      	ldr	r3, [sp, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f1aa 0a08 	sub.w	sl, sl, #8
 800d63e:	dc69      	bgt.n	800d714 <__kernel_rem_pio2+0x5ec>
 800d640:	46aa      	mov	sl, r5
 800d642:	f1ba 0f01 	cmp.w	sl, #1
 800d646:	f1a4 0408 	sub.w	r4, r4, #8
 800d64a:	f300 8083 	bgt.w	800d754 <__kernel_rem_pio2+0x62c>
 800d64e:	9c05      	ldr	r4, [sp, #20]
 800d650:	ab48      	add	r3, sp, #288	; 0x120
 800d652:	441c      	add	r4, r3
 800d654:	2000      	movs	r0, #0
 800d656:	2100      	movs	r1, #0
 800d658:	2d01      	cmp	r5, #1
 800d65a:	f300 809a 	bgt.w	800d792 <__kernel_rem_pio2+0x66a>
 800d65e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d662:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d666:	f1bb 0f00 	cmp.w	fp, #0
 800d66a:	f040 8098 	bne.w	800d79e <__kernel_rem_pio2+0x676>
 800d66e:	9b04      	ldr	r3, [sp, #16]
 800d670:	e9c3 7800 	strd	r7, r8, [r3]
 800d674:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d678:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d67c:	e7c6      	b.n	800d60c <__kernel_rem_pio2+0x4e4>
 800d67e:	9e05      	ldr	r6, [sp, #20]
 800d680:	ab48      	add	r3, sp, #288	; 0x120
 800d682:	441e      	add	r6, r3
 800d684:	462c      	mov	r4, r5
 800d686:	2000      	movs	r0, #0
 800d688:	2100      	movs	r1, #0
 800d68a:	2c00      	cmp	r4, #0
 800d68c:	da33      	bge.n	800d6f6 <__kernel_rem_pio2+0x5ce>
 800d68e:	f1bb 0f00 	cmp.w	fp, #0
 800d692:	d036      	beq.n	800d702 <__kernel_rem_pio2+0x5da>
 800d694:	4602      	mov	r2, r0
 800d696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d69a:	9c04      	ldr	r4, [sp, #16]
 800d69c:	e9c4 2300 	strd	r2, r3, [r4]
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d6a8:	f7f2 fdfe 	bl	80002a8 <__aeabi_dsub>
 800d6ac:	ae4a      	add	r6, sp, #296	; 0x128
 800d6ae:	2401      	movs	r4, #1
 800d6b0:	42a5      	cmp	r5, r4
 800d6b2:	da29      	bge.n	800d708 <__kernel_rem_pio2+0x5e0>
 800d6b4:	f1bb 0f00 	cmp.w	fp, #0
 800d6b8:	d002      	beq.n	800d6c0 <__kernel_rem_pio2+0x598>
 800d6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6be:	4619      	mov	r1, r3
 800d6c0:	9b04      	ldr	r3, [sp, #16]
 800d6c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d6c6:	e7a1      	b.n	800d60c <__kernel_rem_pio2+0x4e4>
 800d6c8:	9c05      	ldr	r4, [sp, #20]
 800d6ca:	ab48      	add	r3, sp, #288	; 0x120
 800d6cc:	441c      	add	r4, r3
 800d6ce:	2000      	movs	r0, #0
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	2d00      	cmp	r5, #0
 800d6d4:	da09      	bge.n	800d6ea <__kernel_rem_pio2+0x5c2>
 800d6d6:	f1bb 0f00 	cmp.w	fp, #0
 800d6da:	d002      	beq.n	800d6e2 <__kernel_rem_pio2+0x5ba>
 800d6dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	9b04      	ldr	r3, [sp, #16]
 800d6e4:	e9c3 0100 	strd	r0, r1, [r3]
 800d6e8:	e790      	b.n	800d60c <__kernel_rem_pio2+0x4e4>
 800d6ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d6ee:	f7f2 fddd 	bl	80002ac <__adddf3>
 800d6f2:	3d01      	subs	r5, #1
 800d6f4:	e7ed      	b.n	800d6d2 <__kernel_rem_pio2+0x5aa>
 800d6f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d6fa:	f7f2 fdd7 	bl	80002ac <__adddf3>
 800d6fe:	3c01      	subs	r4, #1
 800d700:	e7c3      	b.n	800d68a <__kernel_rem_pio2+0x562>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	e7c8      	b.n	800d69a <__kernel_rem_pio2+0x572>
 800d708:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d70c:	f7f2 fdce 	bl	80002ac <__adddf3>
 800d710:	3401      	adds	r4, #1
 800d712:	e7cd      	b.n	800d6b0 <__kernel_rem_pio2+0x588>
 800d714:	e9da 8900 	ldrd	r8, r9, [sl]
 800d718:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d71c:	9b00      	ldr	r3, [sp, #0]
 800d71e:	3b01      	subs	r3, #1
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	4632      	mov	r2, r6
 800d724:	463b      	mov	r3, r7
 800d726:	4640      	mov	r0, r8
 800d728:	4649      	mov	r1, r9
 800d72a:	f7f2 fdbf 	bl	80002ac <__adddf3>
 800d72e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	4640      	mov	r0, r8
 800d738:	4649      	mov	r1, r9
 800d73a:	f7f2 fdb5 	bl	80002a8 <__aeabi_dsub>
 800d73e:	4632      	mov	r2, r6
 800d740:	463b      	mov	r3, r7
 800d742:	f7f2 fdb3 	bl	80002ac <__adddf3>
 800d746:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d74a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d74e:	ed8a 7b00 	vstr	d7, [sl]
 800d752:	e770      	b.n	800d636 <__kernel_rem_pio2+0x50e>
 800d754:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d758:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d75c:	4640      	mov	r0, r8
 800d75e:	4632      	mov	r2, r6
 800d760:	463b      	mov	r3, r7
 800d762:	4649      	mov	r1, r9
 800d764:	f7f2 fda2 	bl	80002ac <__adddf3>
 800d768:	e9cd 0100 	strd	r0, r1, [sp]
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4640      	mov	r0, r8
 800d772:	4649      	mov	r1, r9
 800d774:	f7f2 fd98 	bl	80002a8 <__aeabi_dsub>
 800d778:	4632      	mov	r2, r6
 800d77a:	463b      	mov	r3, r7
 800d77c:	f7f2 fd96 	bl	80002ac <__adddf3>
 800d780:	ed9d 7b00 	vldr	d7, [sp]
 800d784:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d788:	ed84 7b00 	vstr	d7, [r4]
 800d78c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d790:	e757      	b.n	800d642 <__kernel_rem_pio2+0x51a>
 800d792:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d796:	f7f2 fd89 	bl	80002ac <__adddf3>
 800d79a:	3d01      	subs	r5, #1
 800d79c:	e75c      	b.n	800d658 <__kernel_rem_pio2+0x530>
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	9a04      	ldr	r2, [sp, #16]
 800d7a2:	601f      	str	r7, [r3, #0]
 800d7a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d7a8:	605c      	str	r4, [r3, #4]
 800d7aa:	609d      	str	r5, [r3, #8]
 800d7ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d7b0:	60d3      	str	r3, [r2, #12]
 800d7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7b6:	6110      	str	r0, [r2, #16]
 800d7b8:	6153      	str	r3, [r2, #20]
 800d7ba:	e727      	b.n	800d60c <__kernel_rem_pio2+0x4e4>
 800d7bc:	41700000 	.word	0x41700000
 800d7c0:	3e700000 	.word	0x3e700000
 800d7c4:	00000000 	.word	0x00000000

0800d7c8 <scalbn>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	ec55 4b10 	vmov	r4, r5, d0
 800d7ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	462b      	mov	r3, r5
 800d7d6:	b999      	cbnz	r1, 800d800 <scalbn+0x38>
 800d7d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d7dc:	4323      	orrs	r3, r4
 800d7de:	d03f      	beq.n	800d860 <scalbn+0x98>
 800d7e0:	4b35      	ldr	r3, [pc, #212]	; (800d8b8 <scalbn+0xf0>)
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	ee10 0a10 	vmov	r0, s0
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f7f2 ff15 	bl	8000618 <__aeabi_dmul>
 800d7ee:	4b33      	ldr	r3, [pc, #204]	; (800d8bc <scalbn+0xf4>)
 800d7f0:	429e      	cmp	r6, r3
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	460d      	mov	r5, r1
 800d7f6:	da10      	bge.n	800d81a <scalbn+0x52>
 800d7f8:	a327      	add	r3, pc, #156	; (adr r3, 800d898 <scalbn+0xd0>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	e01f      	b.n	800d840 <scalbn+0x78>
 800d800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d804:	4291      	cmp	r1, r2
 800d806:	d10c      	bne.n	800d822 <scalbn+0x5a>
 800d808:	ee10 2a10 	vmov	r2, s0
 800d80c:	4620      	mov	r0, r4
 800d80e:	4629      	mov	r1, r5
 800d810:	f7f2 fd4c 	bl	80002ac <__adddf3>
 800d814:	4604      	mov	r4, r0
 800d816:	460d      	mov	r5, r1
 800d818:	e022      	b.n	800d860 <scalbn+0x98>
 800d81a:	460b      	mov	r3, r1
 800d81c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d820:	3936      	subs	r1, #54	; 0x36
 800d822:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d826:	4296      	cmp	r6, r2
 800d828:	dd0d      	ble.n	800d846 <scalbn+0x7e>
 800d82a:	2d00      	cmp	r5, #0
 800d82c:	a11c      	add	r1, pc, #112	; (adr r1, 800d8a0 <scalbn+0xd8>)
 800d82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d832:	da02      	bge.n	800d83a <scalbn+0x72>
 800d834:	a11c      	add	r1, pc, #112	; (adr r1, 800d8a8 <scalbn+0xe0>)
 800d836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d83a:	a319      	add	r3, pc, #100	; (adr r3, 800d8a0 <scalbn+0xd8>)
 800d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d840:	f7f2 feea 	bl	8000618 <__aeabi_dmul>
 800d844:	e7e6      	b.n	800d814 <scalbn+0x4c>
 800d846:	1872      	adds	r2, r6, r1
 800d848:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d84c:	428a      	cmp	r2, r1
 800d84e:	dcec      	bgt.n	800d82a <scalbn+0x62>
 800d850:	2a00      	cmp	r2, #0
 800d852:	dd08      	ble.n	800d866 <scalbn+0x9e>
 800d854:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d858:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d85c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d860:	ec45 4b10 	vmov	d0, r4, r5
 800d864:	bd70      	pop	{r4, r5, r6, pc}
 800d866:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d86a:	da08      	bge.n	800d87e <scalbn+0xb6>
 800d86c:	2d00      	cmp	r5, #0
 800d86e:	a10a      	add	r1, pc, #40	; (adr r1, 800d898 <scalbn+0xd0>)
 800d870:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d874:	dac0      	bge.n	800d7f8 <scalbn+0x30>
 800d876:	a10e      	add	r1, pc, #56	; (adr r1, 800d8b0 <scalbn+0xe8>)
 800d878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d87c:	e7bc      	b.n	800d7f8 <scalbn+0x30>
 800d87e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d882:	3236      	adds	r2, #54	; 0x36
 800d884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d888:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d88c:	4620      	mov	r0, r4
 800d88e:	4b0c      	ldr	r3, [pc, #48]	; (800d8c0 <scalbn+0xf8>)
 800d890:	2200      	movs	r2, #0
 800d892:	e7d5      	b.n	800d840 <scalbn+0x78>
 800d894:	f3af 8000 	nop.w
 800d898:	c2f8f359 	.word	0xc2f8f359
 800d89c:	01a56e1f 	.word	0x01a56e1f
 800d8a0:	8800759c 	.word	0x8800759c
 800d8a4:	7e37e43c 	.word	0x7e37e43c
 800d8a8:	8800759c 	.word	0x8800759c
 800d8ac:	fe37e43c 	.word	0xfe37e43c
 800d8b0:	c2f8f359 	.word	0xc2f8f359
 800d8b4:	81a56e1f 	.word	0x81a56e1f
 800d8b8:	43500000 	.word	0x43500000
 800d8bc:	ffff3cb0 	.word	0xffff3cb0
 800d8c0:	3c900000 	.word	0x3c900000
 800d8c4:	00000000 	.word	0x00000000

0800d8c8 <floor>:
 800d8c8:	ec51 0b10 	vmov	r0, r1, d0
 800d8cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d8d8:	2e13      	cmp	r6, #19
 800d8da:	ee10 5a10 	vmov	r5, s0
 800d8de:	ee10 8a10 	vmov	r8, s0
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	dc31      	bgt.n	800d94a <floor+0x82>
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	da14      	bge.n	800d914 <floor+0x4c>
 800d8ea:	a333      	add	r3, pc, #204	; (adr r3, 800d9b8 <floor+0xf0>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fcdc 	bl	80002ac <__adddf3>
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f7f3 f91e 	bl	8000b38 <__aeabi_dcmpgt>
 800d8fc:	b138      	cbz	r0, 800d90e <floor+0x46>
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	da53      	bge.n	800d9aa <floor+0xe2>
 800d902:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d906:	4325      	orrs	r5, r4
 800d908:	d052      	beq.n	800d9b0 <floor+0xe8>
 800d90a:	4c2d      	ldr	r4, [pc, #180]	; (800d9c0 <floor+0xf8>)
 800d90c:	2500      	movs	r5, #0
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	e024      	b.n	800d95e <floor+0x96>
 800d914:	4f2b      	ldr	r7, [pc, #172]	; (800d9c4 <floor+0xfc>)
 800d916:	4137      	asrs	r7, r6
 800d918:	ea01 0307 	and.w	r3, r1, r7
 800d91c:	4303      	orrs	r3, r0
 800d91e:	d01e      	beq.n	800d95e <floor+0x96>
 800d920:	a325      	add	r3, pc, #148	; (adr r3, 800d9b8 <floor+0xf0>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fcc1 	bl	80002ac <__adddf3>
 800d92a:	2200      	movs	r2, #0
 800d92c:	2300      	movs	r3, #0
 800d92e:	f7f3 f903 	bl	8000b38 <__aeabi_dcmpgt>
 800d932:	2800      	cmp	r0, #0
 800d934:	d0eb      	beq.n	800d90e <floor+0x46>
 800d936:	2c00      	cmp	r4, #0
 800d938:	bfbe      	ittt	lt
 800d93a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d93e:	4133      	asrlt	r3, r6
 800d940:	18e4      	addlt	r4, r4, r3
 800d942:	ea24 0407 	bic.w	r4, r4, r7
 800d946:	2500      	movs	r5, #0
 800d948:	e7e1      	b.n	800d90e <floor+0x46>
 800d94a:	2e33      	cmp	r6, #51	; 0x33
 800d94c:	dd0b      	ble.n	800d966 <floor+0x9e>
 800d94e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d952:	d104      	bne.n	800d95e <floor+0x96>
 800d954:	ee10 2a10 	vmov	r2, s0
 800d958:	460b      	mov	r3, r1
 800d95a:	f7f2 fca7 	bl	80002ac <__adddf3>
 800d95e:	ec41 0b10 	vmov	d0, r0, r1
 800d962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d966:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d96a:	f04f 37ff 	mov.w	r7, #4294967295
 800d96e:	40df      	lsrs	r7, r3
 800d970:	4238      	tst	r0, r7
 800d972:	d0f4      	beq.n	800d95e <floor+0x96>
 800d974:	a310      	add	r3, pc, #64	; (adr r3, 800d9b8 <floor+0xf0>)
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	f7f2 fc97 	bl	80002ac <__adddf3>
 800d97e:	2200      	movs	r2, #0
 800d980:	2300      	movs	r3, #0
 800d982:	f7f3 f8d9 	bl	8000b38 <__aeabi_dcmpgt>
 800d986:	2800      	cmp	r0, #0
 800d988:	d0c1      	beq.n	800d90e <floor+0x46>
 800d98a:	2c00      	cmp	r4, #0
 800d98c:	da0a      	bge.n	800d9a4 <floor+0xdc>
 800d98e:	2e14      	cmp	r6, #20
 800d990:	d101      	bne.n	800d996 <floor+0xce>
 800d992:	3401      	adds	r4, #1
 800d994:	e006      	b.n	800d9a4 <floor+0xdc>
 800d996:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d99a:	2301      	movs	r3, #1
 800d99c:	40b3      	lsls	r3, r6
 800d99e:	441d      	add	r5, r3
 800d9a0:	45a8      	cmp	r8, r5
 800d9a2:	d8f6      	bhi.n	800d992 <floor+0xca>
 800d9a4:	ea25 0507 	bic.w	r5, r5, r7
 800d9a8:	e7b1      	b.n	800d90e <floor+0x46>
 800d9aa:	2500      	movs	r5, #0
 800d9ac:	462c      	mov	r4, r5
 800d9ae:	e7ae      	b.n	800d90e <floor+0x46>
 800d9b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d9b4:	e7ab      	b.n	800d90e <floor+0x46>
 800d9b6:	bf00      	nop
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	7e37e43c 	.word	0x7e37e43c
 800d9c0:	bff00000 	.word	0xbff00000
 800d9c4:	000fffff 	.word	0x000fffff

0800d9c8 <_init>:
 800d9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ca:	bf00      	nop
 800d9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ce:	bc08      	pop	{r3}
 800d9d0:	469e      	mov	lr, r3
 800d9d2:	4770      	bx	lr

0800d9d4 <_fini>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	bf00      	nop
 800d9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9da:	bc08      	pop	{r3}
 800d9dc:	469e      	mov	lr, r3
 800d9de:	4770      	bx	lr
